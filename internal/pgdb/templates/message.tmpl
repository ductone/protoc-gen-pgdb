
type {{.MessageType}} struct {
    self {{.ReceiverType}}
}

func (dbr {{.ReceiverType}}) DBReflect() pgdb_v1.Message {
    return &{{.MessageType}}{
        self: dbr,
    }
}

func (m *{{.MessageType}}) Descriptor() pgdb_v1.Descriptor {
    return instance{{.DescriptorType}}
}

func (m *{{.MessageType}}) Record(opts ...pgdb_v1.QueryOptions) (exp.Record, error) {
    pbData, err := proto.Marshal(m.self)
    if err != nil {
        return nil, err
    }
    rv := exp.Record{
        "pk": m.self.PartitionKey(),
        "sk": m.self.SortKey(),
        "pb_data": string(pbData),
        "fts_data": "",
        {{ range .Fields }}
        "{{.ColumnName}}": {{.ColumnValueExp}},
        {{ end }}
   }
   return rv, nil
}

func (m *{{.MessageType}}) ConflictUpdateExpression(opts ...pgdb_v1.QueryOptions) (exp.ConflictUpdateExpression, error) {
    return nil, nil
}


