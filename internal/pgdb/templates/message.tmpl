
type {{.MessageType}} struct {
    self *{{.ReceiverType}}
}

func (dbr *{{.ReceiverType}}) DBReflect() pgdb_v1.Message {
    return &{{.MessageType}}{
        self: dbr,
    }
}

func (m *{{.MessageType}}) Descriptor() pgdb_v1.Descriptor {
    return instance{{.DescriptorType}}
}

func (m *{{.MessageType}}) Record(opts ...pgdb_v1.RecordOptionsFunc) (exp.Record, error) {
    opt := pgdb_v1.NewRecordOptions(opts)
    {{ if .WantRecordStringBuilder }}
	var sb strings.Builder
    {{ end }}

    var rv exp.Record

    {{ range .Fields }}
        {{.Convert.CodeForValue}}
        {{ $VarForValue := .Convert.VarForValue }}
        {{ if $VarForValue }}
            rv[opt.Prefix + "{{.DB.Name}}"] =  {{ $VarForValue }}
        {{ end }}

        {{ $VarForAppend := .Convert.VarForAppend }}
        {{ if $VarForAppend }}
        for k, v := range {{ $VarForAppend }} {
            rv[opt.Prefix + k] = v
        }
        {{ end }}
    {{ end }}

   return rv, nil
}

func (m *{{.MessageType}}) ConflictUpdateExpression(opts ...pgdb_v1.RecordOptionsFunc) (exp.ConflictUpdateExpression, error) {
    return nil, nil
}


