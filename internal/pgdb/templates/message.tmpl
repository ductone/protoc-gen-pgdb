
type {{.MessageType}} struct {
    self *{{.ReceiverType}}
}

func (dbr *{{.ReceiverType}}) DBReflect() pgdb_v1.Message {
    return &{{.MessageType}}{
        self: dbr,
    }
}

func (m *{{.MessageType}}) Descriptor() pgdb_v1.Descriptor {
    return instance{{.DescriptorType}}
}

func (m *{{.MessageType}}) Record(opts ...pgdb_v1.RecordOptionsFunc) (exp.Record, error) {
    ro := pgdb_v1.NewRecordOptions(opts)
    _ = ro
    {{ if .WantRecordStringBuilder }}
	var sb strings.Builder
    {{ end }}

    rv := exp.Record{}

    {{ range .Fields }}
        {{.Convert.CodeForValue}}
        {{ $VarForValue := .Convert.VarForValue }}
        {{ if $VarForValue }}
            rv[ro.ColumnName("{{.DB.Name}}")] =  {{ $VarForValue }}
        {{ end }}

        {{ $VarForAppend := .Convert.VarForAppend }}
        {{ if $VarForAppend }}
        for k, v := range {{ $VarForAppend }} {
            rv[ro.ColumnName(k)] = v
        }
        {{ end }}
    {{ end }}

   return rv, nil
}

func (m *{{.MessageType}}) SearchData(opts ...pgdb_v1.RecordOptionsFunc) ([]*pgdb_v1.SearchContent) {
    rv := []*pgdb_v1.SearchContent{
    {{ range .SearchFields }}
        {
            Type:   pgdb_v1.FieldOptions_{{- .Ext.FullTextType.String -}},
            Weight: pgdb_v1.FieldOptions_{{- .Ext.FullTextWeight.String -}},
            Value:  {{ .VarName }},
        },
    {{ end }}
    }

    {{ range .Fields }}
        {{ if .Nested }}
        rv = append(rv, m.self.Get{{- .GoName -}}().DBReflect().SearchData()...)
        {{ end }}
    {{ end }}
    return rv
}
