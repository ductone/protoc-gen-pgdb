
{{ $UnsafeType := .UnsafeType }}
{{ $ColumnType := .ColumnType }}
{{ $QueryType := .QueryType }}

type {{ .DbType }} struct {
	tableName string
}

type {{ .QueryType }} struct {
	tableName string
}

type {{ .UnsafeType }} struct {
	tableName string
}

type {{ .ColumnType }} struct {
	tableName string
}

func (x *{{ .ReceiverType -}}) DB() *{{- .DbType}} {
	return &{{- .DbType -}}{tableName: x.DBReflect().Descriptor().TableName()}
}

func (x *{{- .DbType -}}) TableName() string {
	return x.tableName
}

func (x *{{- .DbType -}}) Query() *{{- .QueryType }} {
	return &{{- .QueryType -}}{tableName: x.tableName}
}

func (x *{{- .DbType -}}) Columns() *{{- .ColumnType }} {
	return &{{- .ColumnType -}}{tableName: x.tableName}
}

func (x *{{ .DbType }}) WithTable(t string) *{{- .DbType }} {
	return &{{- .DbType -}}{tableName: t}
}

func (x *{{ $QueryType }}) WithTable(t string) *{{- $QueryType }} {
	return &{{- $QueryType -}}{tableName: t}
}

func (x *{{- .QueryType -}}) Unsafe() *{{- .UnsafeType }} {
	return &{{ .UnsafeType }}{tableName: x.tableName}
}

{{ range .QueryFields }}
type {{ .OpsTypeName }} struct {
	column string
	tableName string
}

func  (x *{{ .OpsTypeName }}) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

{{if .Op.Eq }}
func  (x *{{ .OpsTypeName }}) Eq(v {{.InputType}}) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}
{{end}}

{{if .Op.Neq }}
func  (x *{{ .OpsTypeName }}) Neq(v {{.InputType}}) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Neq(v)
}
{{end}}


{{if .Op.Gt }}
func  (x *{{ .OpsTypeName }}) Gt(v {{.InputType}}) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt(v)
}
{{end}}

{{if .Op.Gte }}
func  (x *{{ .OpsTypeName }}) Gte(v {{.InputType}}) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gte(v)
}
{{end}}

{{if .Op.Lt }}
func  (x *{{ .OpsTypeName }}) Lt(v {{.InputType}}) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lt(v)
}
{{end}}

{{if .Op.Lte }}
func  (x *{{ .OpsTypeName }}) Lte(v {{.InputType}}) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lte(v)
}
{{end}}

{{if .Op.In }}
func  (x *{{ .OpsTypeName }}) In(v []{{.InputType}}) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).In(v)
}
{{end}}

{{if .Op.NotIn }}
func  (x *{{ .OpsTypeName }}) NotIn(v []{{.InputType}}) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotIn(v)
}
{{end}}

{{if .Op.IsNull }}
func  (x *{{ .OpsTypeName }}) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNull()
}
{{end}}


{{if .Op.IsNotEmpty }}
func  (x *{{ .OpsTypeName }}) IsNotEmpty() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt("")
}
{{end}}

{{if .Op.IsNotNull }}
func  (x *{{ .OpsTypeName }}) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNotNull()
}
{{end}}

{{if .Op.InNetworkPrefix }}
func  (x *{{ .OpsTypeName }}) InNetworkPrefix(cidr netip.Prefix) exp.RangeExpression {
    start, end := xpq.NetworkRange(cidr)
	return exp.NewIdentifierExpression("", x.tableName, x.column).Between(exp.NewRangeVal(start.String(), end.String()))
}
{{end}}


{{if .Op.Between }}
func  (x *{{ .OpsTypeName }}) Between(start {{.InputType}}, end {{.InputType}}) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Between(exp.NewRangeVal(start, end))
}
{{end}}

{{if .Op.NotBetween }}
func  (x *{{ .OpsTypeName }}) NotBetween(start {{.InputType}}, end {{.InputType}}) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotBetween(exp.NewRangeVal(start, end))
}
{{end}}

{{if .Op.ArrayOverlap }}
// Overlaps checks if the field contains ANY items in the arg.
// [a, b] && [a] = true, [a, b] && [a, c] = true
func  (x *{{ .OpsTypeName }}) Overlaps(items ...{{.InputType}}) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? && ?)", idExp, xpq.Array[{{.InputType}}](items))
}
{{end}}

{{if .Op.ArrayNotOverlap }}
// UnsafeNotOverlaps checks if the field contains NONE items in the arg. It will likely not use an index for this scan.
// NOT ([a, b] && [a]) = false, NOT ([a, b] && [a, c]) = false, NOT ([a, b] && [c]) = true
func  (x *{{ .OpsTypeName }}) UnsafeNotOverlaps(items ...{{.InputType}}) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("NOT (? && ?)", idExp, xpq.Array[{{.InputType}}](items))
}
{{end}}

{{if .Op.ArrayContains }}
// Contains checks if the field contains ALL items in the arg.
// [a, b] @> [a] = true, [a, b] @> [a, c] = false
func  (x *{{ .OpsTypeName }}) Contains(items ...{{.InputType}}) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? @> ?)", idExp, xpq.Array[{{.InputType}}](items))
}
{{end}}

{{if .Op.ArrayNotContains }}
// UnsafeNotContains checks if the ANY of the ARG is not in the field. It will likely not use an index for this scan.
// NOT ([a, b] @> [a]) = false, NOT ([a, b] @> [a, c]) = true, NOT ([a, b] @> [c]) = true
func  (x *{{ .OpsTypeName }}) UnsafeNotContains(items ...{{.InputType}}) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("NOT (? @> ?)", idExp, xpq.Array[{{.InputType}}](items))
}
{{end}}

{{if .Op.ArrayIsContained }}
func  (x *{{ .OpsTypeName }}) IsContainedBy(items ...{{.InputType}}) exp.Expression{
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? <@ ?)", idExp, xpq.Array[{{.InputType}}](items))
}
{{end}}

{{if .Op.ObjectContains }}
func  (x *{{ .OpsTypeName }}) ObjectContains(obj interface{}) (exp.Expression, error) {
	var err error
	var data []byte

	pm, ok := obj.(proto.Message)
	if ok {
		data, err = protojson.Marshal(pm)
	} else {
		data, err = json.Marshal(obj)
	}
	if err != nil {
		return nil, err
	}

	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? @> ?::jsonb)", idExp, string(data)), nil
}
{{end}}

{{if .Op.ObjectPathExists }}
func  (x *{{ .OpsTypeName }}) ObjectPathExists(path string) (exp.Expression) {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("@?"), path)
}
{{end}}

{{if .Op.ObjectPath }}
func  (x *{{ .OpsTypeName }}) ObjectPath(path string) (exp.Expression) {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("? @@ ?", idExp, path)
}
{{end}}

{{if .Op.ObjectKeyExists }}
func  (x *{{ .OpsTypeName }}) ObjectKeyExists(key string) (exp.Expression) {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("? \\? ?", idExp, key)
}
{{end}}

{{if .Op.ObjectAnyKeyExists }}
func  (x *{{ .OpsTypeName }}) ObjectAnyKeyExists(keys ...string) (exp.Expression) {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("?|"), xpq.StringArray(keys))
}
{{end}}

{{if .Op.ObjectAllKeyExists }}
func  (x *{{ .OpsTypeName }}) ObjectAllKeyExists(keys ...string) (exp.Expression) {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("?&"), xpq.StringArray(keys))
}
{{end}}

func (x *{{ $QueryType }}) {{ .Field.GoName -}}() *{{ .OpsTypeName }} {
	return &{{- .OpsTypeName -}}{tableName: x.tableName, column: "pb$" + "{{- .ColName -}}"}
}
{{ end }}

{{ range .UnsafeFields }}
{{ if .DB -}}

type {{ .QueryTypeName }} struct {
	column string
	tableName string
}

func (x *{{ $UnsafeType }}) {{ .GoName -}}() *{{ .QueryTypeName }} {
	return &{{- .QueryTypeName -}}{tableName: x.tableName, column: "pb$" + "{{- .DB.Name -}}"}
}

func  (x *{{ .QueryTypeName }}) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

{{- end }}
{{ end }}

func (x *{{ $ColumnType }}) WithTable(t string) *{{- $ColumnType }} {
	return &{{- $ColumnType -}}{tableName: t}
}

{{ range .ColumnFields }}
{{ if .DB -}}
func (x *{{ $ColumnType }}) {{ .GoName -}}() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "{{- .DB.Name -}}")
}
{{- end }}
{{ end }}
