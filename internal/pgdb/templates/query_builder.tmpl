
{{ $UnsafeType := .UnsafeType }}
{{ $ColumnType := .ColumnType }}
{{ $QueryType := .QueryType }}

type {{ .DbType }} struct {
}

type {{ .QueryType }} struct {
	tableName string
}

type {{ .UnsafeType }} struct {
	tableName string
}

type {{ .ColumnType }} struct {
	tableName string
}

func (x *{{ .ReceiverType -}}) DB() *{{- .DbType}} {
	return &{{- .DbType -}}{}
}

func (x *{{- .DbType -}}) Query() *{{- .QueryType }} {
	return &{{- .QueryType -}}{}
}

func (x *{{- .DbType -}}) Columns() *{{- .ColumnType }} {
	return &{{- .ColumnType -}}{}
}

func (x *{{ $QueryType }}) WithTable(t string) *{{- $QueryType }} {
	return &{{- $QueryType -}}{tableName: t}
}

func (x *{{- .QueryType -}}) Unsafe() *{{- .UnsafeType }} {
	return &{{ .UnsafeType }}{tableName: x.tableName}
}

{{ range .QueryFields }}
type {{ .OpsTypeName }} struct {
	tableName string
}

{{if .Op.Eq }}
func  (x *{{ .OpsTypeName }}) Eq(v {{.InputType}}) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, "{{- .ColName -}}").Eq(v)
}
{{end}}

{{if .Op.Neq }}
func  (x *{{ .OpsTypeName }}) Neq(v {{.InputType}}) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, "{{- .ColName -}}").Neq(v)
}
{{end}}


{{if .Op.Gt }}
func  (x *{{ .OpsTypeName }}) Gt(v {{.InputType}}) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, "{{- .ColName -}}").Gt(v)
}
{{end}}

{{if .Op.Gte }}
func  (x *{{ .OpsTypeName }}) Gte(v {{.InputType}}) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, "{{- .ColName -}}").Gte(v)
}
{{end}}

{{if .Op.Lt }}
func  (x *{{ .OpsTypeName }}) Lt(v {{.InputType}}) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, "{{- .ColName -}}").Lt(v)
}
{{end}}

{{if .Op.Lte }}
func  (x *{{ .OpsTypeName }}) Lte(v {{.InputType}}) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, "{{- .ColName -}}").Lte(v)
}
{{end}}

{{if .Op.In }}
func  (x *{{ .OpsTypeName }}) In(v []{{.InputType}}) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, "{{- .ColName -}}").In(v)
}
{{end}}

{{if .Op.NotIn }}
func  (x *{{ .OpsTypeName }}) NotIn(v []{{.InputType}}) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, "{{- .ColName -}}").NotIn(v)
}
{{end}}

{{if .Op.IsNull }}
func  (x *{{ .OpsTypeName }}) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, "{{- .ColName -}}").IsNull()
}
{{end}}

{{if .Op.IsNotNull }}
func  (x *{{ .OpsTypeName }}) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, "{{- .ColName -}}").IsNotNull()
}
{{end}}

{{if .Op.Between }}
func  (x *{{ .OpsTypeName }}) Between(start {{.InputType}}, end {{.InputType}}) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, "{{- .ColName -}}").Between(exp.NewRangeVal(start, end))
}
{{end}}

{{if .Op.NotBetween }}
func  (x *{{ .OpsTypeName }}) NotBetween(start {{.InputType}}, end {{.InputType}}) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, "{{- .ColName -}}").NotBetween(exp.NewRangeVal(start, end))
}
{{end}}

{{if .Op.ObjectContains }}
func  (x *{{ .OpsTypeName }}) ObjectContains(obj interface{}) (exp.Expression, error) {
	var err error
	var data []byte

	pm, ok := obj.(proto.Message)
	if ok {
		data, err = protojson.Marshal(pm)
	} else {
		data, err = json.Marshal(obj)
	}
	if err != nil {
		return nil, err
	}

	idExp := exp.NewIdentifierExpression("", x.tableName, "{{- .ColName -}}")
	return exp.NewLiteralExpression("(? @> ?::jsonb)", idExp, string(data)), nil
}
{{end}}

{{if .Op.ObjectPathExists }}
func  (x *{{ .OpsTypeName }}) ObjectPathExists(path string) (exp.Expression) {
	idExp := exp.NewIdentifierExpression("", x.tableName, "{{- .ColName -}}")
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("@?"), path)
}
{{end}}

{{if .Op.ObjectPath }}
func  (x *{{ .OpsTypeName }}) ObjectPath(path string) (exp.Expression) {
	idExp := exp.NewIdentifierExpression("", x.tableName, "{{- .ColName -}}")
	return exp.NewLiteralExpression("? @@ ?", idExp, path)
}
{{end}}

{{if .Op.ObjectKeyExists }}
func  (x *{{ .OpsTypeName }}) ObjectKeyExists(key string) (exp.Expression) {
	idExp := exp.NewIdentifierExpression("", x.tableName, "{{- .ColName -}}")
	return exp.NewLiteralExpression("? \\? ?", idExp, key)
}
{{end}}

{{if .Op.ObjectAnyKeyExists }}
func  (x *{{ .OpsTypeName }}) ObjectAnyKeyExists(keys ...string) (exp.Expression) {
	idExp := exp.NewIdentifierExpression("", x.tableName, "{{- .ColName -}}")
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("?|"), xpq.StringArray(keys))
}
{{end}}

{{if .Op.ObjectAllKeyExists }}
func  (x *{{ .OpsTypeName }}) ObjectAllKeyExists(keys ...string) (exp.Expression) {
	idExp := exp.NewIdentifierExpression("", x.tableName, "{{- .ColName -}}")
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("?&"), xpq.StringArray(keys))
}
{{end}}


func (x *{{ $QueryType }}) {{ .Field.GoName -}}() *{{ .OpsTypeName }} {
	return &{{- .OpsTypeName -}}{tableName: x.tableName}
}
{{ end }}

{{ range .UnsafeFields }}
func (x *{{ $UnsafeType }}) {{ .GoName -}}() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "{{- .DB.Name -}}")
}
{{ end }}

func (x *{{ $ColumnType }}) WithTable(t string) *{{- $ColumnType }} {
	return &{{- $ColumnType -}}{tableName: t}
}

{{ range .ColumnFields }}
func (x *{{ $ColumnType }}) {{ .GoName -}}() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "{{- .DB.Name -}}")
}
{{ end }}
