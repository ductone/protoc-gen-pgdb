
type {{.Type}} struct{}

var (
    instance{{.Type}} pgdb_v1.Descriptor = &{{.Type}}{}
)

func (d *{{.ReceiverType}}) TableName() string {
    return "{{.TableName}}"
}

func (d *{{.ReceiverType}}) Fields(opts ...pgdb_v1.DescriptorFieldOptionFunc) []*pgdb_v1.Column {
  df := pgdb_v1.NewDescriptorFieldOption(opts)
  _ = df
  rv := []*pgdb_v1.Column{
  {{ range .Fields }}
    {{- if .DB -}}
      {
        Name: df.ColumnName("{{ .DB.Name }}"),
        Type: "{{ .DB.Type }}",
        Nullable: {{ .DB.Nullable }},
        OverrideExpression: "{{ .DB.OverrideExpression }}",
      },
    {{- end -}}
  {{ end }}
  }

  {{ range .NestedFields }}
    rv = append(rv, (({{- .TypeName -}})(nil)).DBReflect().Descriptor().Fields(df.Nested("{{ .Prefix }}")...)...)
  {{ end }}
  return rv
}

func (d *{{.ReceiverType}}) DataField() *pgdb_v1.Column {
  return &pgdb_v1.Column{Name: "pb_data", Type: "bytea"}
}

func (d *{{.ReceiverType}}) SearchField() *pgdb_v1.Column {
  return &pgdb_v1.Column{Name: "fts_data", Type: "tsvector"}
}

func (d *{{.ReceiverType}}) IndexPrimaryKey(opts ...pgdb_v1.IndexOptionsFunc) *pgdb_v1.Index {
  io := pgdb_v1.NewIndexOptions(opts)
  _ = io

  {{ $NilReturn := true }}
  {{ range .Indexes }}
    {{- if .DB -}}
      {{- if .DB.IsPrimary -}}
      {{ $NilReturn = false }}
      return &pgdb_v1.Index{
        Name: io.IndexName("{{ .DB.Name }}"),
        Method: pgdb_v1.MessageOptions_Index_{{- .DB.Method.String -}},
        IsPrimary: {{ .DB.IsPrimary }},
        IsUnique: {{ .DB.IsUnique }},
        IsDropped: {{ .DB.IsDropped }},
        Columns: []string{ {{- range .DB.Columns -}} io.ColumnName("{{- . -}}"), {{- end -}} },
        OverrideExpression: "{{ .DB.OverrideExpression }}",
      }
      {{- end -}}
    {{- end -}}
  {{ end }}

{{ if $NilReturn  }}
  return nil
{{ end }}
}


func (d *{{.ReceiverType}}) Indexes(opts ...pgdb_v1.IndexOptionsFunc) []*pgdb_v1.Index {
  io := pgdb_v1.NewIndexOptions(opts)
  _ = io
  rv := []*pgdb_v1.Index{
  {{ range .Indexes }}
    {{- if .DB -}}
    {
      Name: io.IndexName("{{ .DB.Name }}"),
      Method: pgdb_v1.MessageOptions_Index_{{- .DB.Method.String -}},
      IsPrimary: {{ .DB.IsPrimary }},
      IsUnique: {{ .DB.IsUnique }},
      IsDropped: {{ .DB.IsDropped }},
      Columns: []string{ {{- range .DB.Columns -}} io.ColumnName("{{- . -}}"), {{- end -}} },
      OverrideExpression: "{{ .DB.OverrideExpression }}",
    },
    {{- end -}}
  {{ end }}
  }

  {{ range .NestedFields }}
    rv = append(rv, (({{- .TypeName -}})(nil)).DBReflect().Descriptor().Indexes(io.Nested("{{ .Prefix }}")...)...)
  {{ end }}
  return rv
}
