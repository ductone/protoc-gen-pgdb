
type {{.Type}} struct{}

var (
    instance{{.Type}} pgdb_v1.Descriptor = &{{.Type}}{}
)

func (d *{{.ReceiverType}}) TableName() string {
    return "{{.TableName}}"
}

func (d *{{.ReceiverType}}) Fields(opts ...pgdb_v1.DescriptorFieldOptionFunc) []*pgdb_v1.Column {
  rv := []*pgdb_v1.Column{
  {{ range .Fields }}
    {{- if .DB -}}
      {
        Name: "{{ .DB.Name }}",
        Type: "{{ .DB.Type }}",
        Nullable: {{ .DB.Nullable }},
        OverrideExpression: "{{ .DB.OverrideExpression }}",
      },
    {{- end -}}
  {{ end }}
  }

  {{ range .NestedFieldNames }}
    rv = append(rv, m.{{- . -}}.Fields()...)
  {{ end }}
  return rv
}

func (d *{{.ReceiverType}}) DataField() *pgdb_v1.Column {
  return &pgdb_v1.Column{Name: "pb_data", Type: "bytea"}
}

func (d *{{.ReceiverType}}) SearchField() *pgdb_v1.Column {
  return &pgdb_v1.Column{Name: "fts_data", Type: "tsvector"}
}

func (d *{{.ReceiverType}}) Indexes() []*pgdb_v1.Index {
  rv := []*pgdb_v1.Index{
  {{ range .Indexes }}
    {{- if .DB -}}
    {
      Name: "{{ .DB.Name }}",
      Method: pgdb_v1.MessageOptions_Index_{{- .DB.Method.String -}},
      IsPrimary: {{ .DB.IsPrimary }},
      IsUnique: {{ .DB.IsUnique }},
      IsDropped: {{ .DB.IsDropped }},
      Columns: []string{ {{- range .DB.Columns -}} "{{- . -}}", {{- end -}} },
      OverrideExpression: "{{ .DB.OverrideExpression }}",
    },
    {{- end -}}
  {{ end }}
  }

  {{ range .NestedFieldNames }}
    rv = append(rv, m.{{- . -}}.Indexes()...)
  {{ end }}
  return rv
}
