type {{.Type}} struct{
  dialect pgdb_v1.Dialect
}

var (
    instance{{.Type}} pgdb_v1.Descriptor = &{{.Type}}{}
    instance{{.Type}}V17 pgdb_v1.Descriptor = &{{.Type}}{dialect: pgdb_v1.DialectV17}
)

func (d *{{.ReceiverType}}) Dialect() pgdb_v1.Dialect {
    return pgdb_v1.DialectOrDefault(d.dialect)
}

func (d *{{.ReceiverType}}) TableName() string {
    return "{{.TableName}}"
}

func (d *{{.ReceiverType}}) IsPartitioned() bool {
    return {{.IsPartitioned}}
}

func (d *{{.ReceiverType}}) IsPartitionedByCreatedAt() bool {
    return {{.IsPartitionedByCreatedAt}}
}

func (d *{{.ReceiverType}}) GetPartitionedByKsuidFieldName() string {
    return "{{.PartitionedByKsuidFieldName}}"
}

func (d *{{.ReceiverType}}) GetPartitionDateRange() pgdb_v1.MessageOptions_PartitionedByDateRange {
    return {{.PartitionDateRange}}
}

func (d *{{.ReceiverType}}) Fields(opts ...pgdb_v1.DescriptorFieldOptionFunc) []*pgdb_v1.Column {
  df := pgdb_v1.NewDescriptorFieldOption(opts)
  _ = df

  rv := make([]*pgdb_v1.Column, 0)
  {{ range .Fields }}
    {{ if .ExcludeNested }}
    if !df.IsNested {
    {{ end }}

    {{ if .DB }}
      {{ if .V17FieldOverrides }}
        {{ $collationVar := printf "col%sCollation" .DB.Name }}
        {{ $expVar := printf "col%sOverrideExpression" .DB.Name }}
        {{ $collationVar }} := "{{.DB.Collation}}"
        {{ $expVar }} := "{{ .DB.OverrideExpression }}"
        {{ if not .V17FieldOverrides.Disabled }}
        switch d.Dialect() {
        case pgdb_v1.DialectV17:
          {{ if .V17FieldOverrides.Collation }}{{ $collationVar }} = {{ printf "%q" .V17FieldOverrides.Collation }}{{ end }}
          {{ if .V17FieldOverrides.ClearOverrideExpression }}{{ $expVar }} = ""{{ end }}
        default:
        }
        {{ end }}
        {{ if .V17FieldOverrides.Disabled }}if d.Dialect() != pgdb_v1.DialectV17 { {{ end }}
        rv = append(rv, &pgdb_v1.Column{
        Name: df.ColumnName("{{ .DB.Name }}"),
        Type: "{{ .DB.Type }}",
        Nullable: df.Nullable({{ .DB.Nullable }}),
        OverrideExpression: {{ $expVar }},
        Default: "{{ .DB.Default }}",
        Collation: {{ $collationVar }},
        })
        {{ if .V17FieldOverrides.Disabled }} } {{ end }}
      {{ else }}
        rv = append(rv, &pgdb_v1.Column{
        Name: df.ColumnName("{{ .DB.Name }}"),
        Type: "{{ .DB.Type }}",
        Nullable: df.Nullable({{ .DB.Nullable }}),
        OverrideExpression: "{{ .DB.OverrideExpression }}",
        Default: "{{ .DB.Default }}",
        Collation: "{{ .DB.Collation }}",
        })
      {{ end }}
    {{ end }}
    {{ if .ExcludeNested }}
    }
    {{ end }}

  {{ end }}

  {{ range .NestedFields }}
    rv = append(rv, (({{- .TypeName -}})(nil)).DBReflect(d.Dialect()).Descriptor().Fields(df.Nested("{{ .Prefix }}")...)...)
  {{ end }}
  return rv
}

func (d *{{.ReceiverType}}) PKSKField() *pgdb_v1.Column {
    var collation string
    switch d.Dialect() {
    case pgdb_v1.DialectV17:
      collation = "C"
    default:
    }
	return &pgdb_v1.Column{
      Table: "{{.TableName}}",
			Name:  "pb$pksk",
			Type:  "varchar",
            Collation: collation,
		}
}

func (d *{{.ReceiverType}}) DataField() *pgdb_v1.Column {
  return &pgdb_v1.Column{Table: "{{.TableName}}", Name: "pb$pb_data", Type: "bytea"}
}

func (d *{{.ReceiverType}}) SearchField() *pgdb_v1.Column {
  return &pgdb_v1.Column{Table: "{{.TableName}}", Name: "pb$fts_data", Type: "tsvector"}
}

func (d *{{.ReceiverType}}) VersioningField() *pgdb_v1.Column {
  return &pgdb_v1.Column{Table: "{{.TableName}}", Name: "pb${{- .VersioningField -}}", Type: "timestamptz"}
}

func (d *{{.ReceiverType}}) TenantField() *pgdb_v1.Column {
  var collation string
  switch d.Dialect() {
  case pgdb_v1.DialectV17:
  collation = "C"
  default:
  }
  return &pgdb_v1.Column{
      Table: "{{.TableName}}",
      Name: "pb$tenant_id",
      Type: "varchar",
      Collation: collation,
  }
}

func (d *{{.ReceiverType}}) IndexPrimaryKey(opts ...pgdb_v1.IndexOptionsFunc) *pgdb_v1.Index {
  io := pgdb_v1.NewIndexOptions(opts)
  _ = io

  {{ $NilReturn := true }}
  {{ range .Indexes }}
    {{- if .DB -}}
      {{- if .DB.IsPrimary -}}
      {{ $NilReturn = false }}
      return &pgdb_v1.Index{
        Name: io.IndexName("{{ .DB.Name }}"),
        Method: pgdb_v1.MessageOptions_Index_{{- .DB.Method.String -}},
        IsPrimary: {{ .DB.IsPrimary }},
        IsUnique: {{ .DB.IsUnique }},
        IsDropped: {{ .DB.IsDropped }},
        Columns: []string{ {{- range .DB.Columns -}} io.ColumnName("{{- . -}}"), {{- end -}} },
        OverrideExpression: "{{ .DB.OverrideExpression }}",
      }
      {{- end -}}
    {{- end -}}
  {{ end }}

{{ if $NilReturn  }}
  return nil
{{ end }}
}


func (d *{{.ReceiverType}}) Indexes(opts ...pgdb_v1.IndexOptionsFunc) []*pgdb_v1.Index {
  io := pgdb_v1.NewIndexOptions(opts)
  _ = io
  rv := make([]*pgdb_v1.Index, 0)
  {{ range .Indexes }}
    {{ if .ExcludeNested }}
    if !io.IsNested {
    {{ end }}
    {{ if .DB }}
    rv = append(rv, &pgdb_v1.Index{
      Name: io.IndexName("{{ .DB.Name }}"),
      Method: pgdb_v1.MessageOptions_Index_{{- .DB.Method.String -}},
      IsPrimary: {{ .DB.IsPrimary }},
      IsUnique: {{ .DB.IsUnique }},
      IsDropped: {{ .DB.IsDropped }},
      Columns: []string{ {{- range .DB.Columns -}} io.ColumnName("{{- . -}}"), {{- end -}} },
      OverrideExpression: "{{ .DB.OverrideExpression }}",
      WherePredicate: "{{ .DB.WherePredicate }}",
    })
    {{ end }}
    {{ if .ExcludeNested }}
    }
    {{ end }}

  {{ end }}

  return rv
}

func (d *{{.ReceiverType}}) Statistics(opts ...pgdb_v1.StatisticOptionsFunc) []*pgdb_v1.Statistic {
  io := pgdb_v1.NewStatisticOption(opts)
  _ = io
  rv := make([]*pgdb_v1.Statistic, 0)
  {{ range .Statistics }}
    {{ if .ExcludeNested }}
    if !io.IsNested {
    {{ end }}
    rv = append(rv, &pgdb_v1.Statistic{
      Name: io.StatsName("{{ .DB.Name }}"),
      IsDropped: {{ .DB.IsDropped }},
      Kinds: []pgdb_v1.MessageOptions_Stat_StatsKind{ {{- range .DB.Kinds -}} pgdb_v1.MessageOptions_Stat_StatsKind({{- .Number -}}), {{- end -}} },
      Columns: []string{ {{- range .DB.Columns -}} io.ColumnName("{{- . -}}"), {{- end -}} },
    })
    {{ if .ExcludeNested }}
    }
    {{ end }}

  {{ end }}

  return rv
}
