// Code generated by protoc-gen-pgdb 0.1.0 from models/animals/v1/animals.proto. DO NOT EDIT
package v1

import (
	"encoding/json"
	"strings"

	"time"

	"github.com/doug-martin/goqu/v9/exp"
	pgdb_v1 "github.com/ductone/protoc-gen-pgdb/pgdb/v1"
	"github.com/ductone/protoc-gen-pgdb/pgdb/v1/xpq"
	"github.com/jackc/pgx/v5/pgtype"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
)

type pgdbDescriptorPet struct {
	dialect pgdb_v1.Dialect
}

var (
	instancepgdbDescriptorPet    pgdb_v1.Descriptor = &pgdbDescriptorPet{}
	instancepgdbDescriptorPetV17 pgdb_v1.Descriptor = &pgdbDescriptorPet{dialect: pgdb_v1.DialectV17}
)

func (d *pgdbDescriptorPet) Dialect() pgdb_v1.Dialect {
	return pgdb_v1.DialectOrDefault(d.dialect)
}

func (d *pgdbDescriptorPet) TableName() string {
	return "pb_pet_models_animals_v1_8a3723d5"
}

func (d *pgdbDescriptorPet) IsPartitioned() bool {
	return false
}

func (d *pgdbDescriptorPet) IsPartitionedByCreatedAt() bool {
	return false
}

func (d *pgdbDescriptorPet) GetPartitionedByKsuidFieldName() string {
	return ""
}

func (d *pgdbDescriptorPet) GetPartitionDateRange() pgdb_v1.MessageOptions_PartitionedByDateRange {
	return pgdb_v1.MessageOptions_PARTITIONED_BY_DATE_RANGE_UNSPECIFIED
}

func (d *pgdbDescriptorPet) Fields(opts ...pgdb_v1.DescriptorFieldOptionFunc) []*pgdb_v1.Column {
	df := pgdb_v1.NewDescriptorFieldOption(opts)
	_ = df

	rv := make([]*pgdb_v1.Column, 0)

	if !df.IsNested {

		coltenant_idCollation := ""
		coltenant_idOverrideExpression := ""

		switch d.Dialect() {
		case pgdb_v1.DialectV17:
			coltenant_idCollation = "C"

		default:
		}

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("tenant_id"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: coltenant_idOverrideExpression,
			Default:            "",
			Collation:          coltenant_idCollation,
		})

	}

	if !df.IsNested {

		colpkskCollation := ""
		colpkskOverrideExpression := "varchar GENERATED ALWAYS AS (pb$pk || '|' || pb$sk) STORED"

		switch d.Dialect() {
		case pgdb_v1.DialectV17:
			colpkskCollation = "C"
			colpkskOverrideExpression = ""
		default:
		}

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pksk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: colpkskOverrideExpression,
			Default:            "",
			Collation:          colpkskCollation,
		})

	}

	if !df.IsNested {

		colpkCollation := ""
		colpkOverrideExpression := ""

		switch d.Dialect() {
		case pgdb_v1.DialectV17:
			colpkCollation = "C"

		default:
		}

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: colpkOverrideExpression,
			Default:            "",
			Collation:          colpkCollation,
		})

	}

	if !df.IsNested {

		colskCollation := ""
		colskOverrideExpression := ""

		switch d.Dialect() {
		case pgdb_v1.DialectV17:
			colskCollation = "C"

		default:
		}

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("sk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: colskOverrideExpression,
			Default:            "",
			Collation:          colskCollation,
		})

	}

	if !df.IsNested {

		colpkskv2Collation := "C"
		colpkskv2OverrideExpression := ""

		if d.Dialect() != pgdb_v1.DialectV17 {
			rv = append(rv, &pgdb_v1.Column{
				Name:               df.ColumnName("pkskv2"),
				Type:               "varchar",
				Nullable:           df.Nullable(true),
				OverrideExpression: colpkskv2OverrideExpression,
				Default:            "",
				Collation:          colpkskv2Collation,
			})
		}

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("fts_data"),
			Type:               "tsvector",
			Nullable:           df.Nullable(true),
			OverrideExpression: "",
			Default:            "",
			Collation:          "",
		})

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pb_data"),
			Type:               "bytea",
			Nullable:           df.Nullable(false),
			OverrideExpression: "",
			Default:            "",
			Collation:          "",
		})

	}

	colidCollation := ""
	colidOverrideExpression := ""

	switch d.Dialect() {
	case pgdb_v1.DialectV17:
		colidCollation = "C"

	default:
	}

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("id"),
		Type:               "text",
		Nullable:           df.Nullable(false),
		OverrideExpression: colidOverrideExpression,
		Default:            "''",
		Collation:          colidCollation,
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("created_at"),
		Type:               "timestamptz",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("updated_at"),
		Type:               "timestamptz",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("deleted_at"),
		Type:               "timestamptz",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("display_name"),
		Type:               "text",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "''",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("description"),
		Type:               "text",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "''",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("system_builtin"),
		Type:               "bool",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "false",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("elapsed"),
		Type:               "interval",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("profile"),
		Type:               "jsonb",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("cuteness"),
		Type:               "float4",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "0.0",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("price"),
		Type:               "float8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "0.0",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("14"),
		Type:               "bool",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "false",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("extra_profiles"),
		Type:               "_jsonb",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	colfield_with_v17_collation_onlyCollation := ""
	colfield_with_v17_collation_onlyOverrideExpression := ""

	switch d.Dialect() {
	case pgdb_v1.DialectV17:
		colfield_with_v17_collation_onlyCollation = "C"

	default:
	}

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("field_with_v17_collation_only"),
		Type:               "text",
		Nullable:           df.Nullable(false),
		OverrideExpression: colfield_with_v17_collation_onlyOverrideExpression,
		Default:            "''",
		Collation:          colfield_with_v17_collation_onlyCollation,
	})

	return rv
}

func (d *pgdbDescriptorPet) PKSKField() *pgdb_v1.Column {
	var collation string
	switch d.Dialect() {
	case pgdb_v1.DialectV17:
		collation = "C"
	default:
	}
	return &pgdb_v1.Column{
		Table:     "pb_pet_models_animals_v1_8a3723d5",
		Name:      "pb$pksk",
		Type:      "varchar",
		Collation: collation,
	}
}

func (d *pgdbDescriptorPet) DataField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Table: "pb_pet_models_animals_v1_8a3723d5", Name: "pb$pb_data", Type: "bytea"}
}

func (d *pgdbDescriptorPet) SearchField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Table: "pb_pet_models_animals_v1_8a3723d5", Name: "pb$fts_data", Type: "tsvector"}
}

func (d *pgdbDescriptorPet) VersioningField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Table: "pb_pet_models_animals_v1_8a3723d5", Name: "pb$updated_at", Type: "timestamptz"}
}

func (d *pgdbDescriptorPet) TenantField() *pgdb_v1.Column {
	var collation string
	switch d.Dialect() {
	case pgdb_v1.DialectV17:
		collation = "C"
	default:
	}
	return &pgdb_v1.Column{
		Table:     "pb_pet_models_animals_v1_8a3723d5",
		Name:      "pb$tenant_id",
		Type:      "varchar",
		Collation: collation,
	}
}

func (d *pgdbDescriptorPet) IndexPrimaryKey(opts ...pgdb_v1.IndexOptionsFunc) *pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io

	return &pgdb_v1.Index{
		Name:               io.IndexName("pksk_pet_models_animals_v1_4fc115ea"),
		Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
		IsPrimary:          true,
		IsUnique:           true,
		IsDropped:          false,
		Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pksk")},
		OverrideExpression: "",
	}

}

func (d *pgdbDescriptorPet) Indexes(opts ...pgdb_v1.IndexOptionsFunc) []*pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io
	rv := make([]*pgdb_v1.Index, 0)

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("pksk_pet_models_animals_v1_4fc115ea"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
			IsPrimary:          true,
			IsUnique:           true,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pksk")},
			OverrideExpression: "",
			WherePredicate:     "",
		})

	}

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("pksk_split_pet_models_animals_v1_157fa894"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
			IsPrimary:          false,
			IsUnique:           false,
			IsDropped:          true,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pk"), io.ColumnName("sk")},
			OverrideExpression: "",
			WherePredicate:     "",
		})

	}

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("pksk_split2_pet_models_animals_v1_e8761e9e"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
			IsPrimary:          false,
			IsUnique:           false,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pk"), io.ColumnName("sk")},
			OverrideExpression: "",
			WherePredicate:     "",
		})

	}

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("fts_data_pet_models_animals_v1_6d64344b"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE_GIN,
			IsPrimary:          false,
			IsUnique:           false,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("fts_data")},
			OverrideExpression: "",
			WherePredicate:     "",
		})

	}

	rv = append(rv, &pgdb_v1.Index{
		Name:               io.IndexName("profile_pet_models_animals_v1_6b04a2a2"),
		Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE_GIN,
		IsPrimary:          false,
		IsUnique:           false,
		IsDropped:          false,
		Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("profile")},
		OverrideExpression: "",
		WherePredicate:     "",
	})

	return rv
}

func (d *pgdbDescriptorPet) Statistics(opts ...pgdb_v1.StatisticOptionsFunc) []*pgdb_v1.Statistic {
	io := pgdb_v1.NewStatisticOption(opts)
	_ = io
	rv := make([]*pgdb_v1.Statistic, 0)

	return rv
}

type pgdbMessagePet struct {
	self    *Pet
	dialect pgdb_v1.Dialect
}

func (dbr *Pet) DBReflect(dialect pgdb_v1.Dialect) pgdb_v1.Message {
	return &pgdbMessagePet{
		self:    dbr,
		dialect: dialect,
	}
}

func (m *pgdbMessagePet) Descriptor() pgdb_v1.Descriptor {
	switch m.Dialect() {
	case pgdb_v1.DialectV17:
		return instancepgdbDescriptorPetV17
	default:
		return instancepgdbDescriptorPet
	}
}

func (m *pgdbMessagePet) Record(opts ...pgdb_v1.RecordOptionsFunc) (exp.Record, error) {
	ro := pgdb_v1.NewRecordOptions(opts)
	_ = ro
	nullExp := exp.NewLiteralExpression("NULL")
	_ = nullExp

	var sb strings.Builder

	rv := exp.Record{}

	if !ro.IsNested {

		cfv0 := strings.ReplaceAll(string(m.self.GetTenantId()), "\u0000", "")

		if ro.Nulled {
			rv[ro.ColumnName("tenant_id")] = nullExp
		} else {
			rv[ro.ColumnName("tenant_id")] = cfv0
		}

	}

	if !ro.IsNested {

	}

	if !ro.IsNested {

		sb.Reset()

		_, _ = sb.WriteString("models_animals_v1_pet")

		_, _ = sb.WriteString(":")

		_, _ = sb.WriteString(m.self.GetTenantId())

		_, _ = sb.WriteString(":")

		_, _ = sb.WriteString(m.self.GetId())

		cfv2 := sb.String()

		if ro.Nulled {
			rv[ro.ColumnName("pk")] = nullExp
		} else {
			rv[ro.ColumnName("pk")] = cfv2
		}

	}

	if !ro.IsNested {

		sb.Reset()

		_, _ = sb.WriteString("example")

		cfv3 := sb.String()

		if ro.Nulled {
			rv[ro.ColumnName("sk")] = nullExp
		} else {
			rv[ro.ColumnName("sk")] = cfv3
		}

	}

	if !ro.IsNested {

		if m.Dialect() != pgdb_v1.DialectV17 {

		}

	}

	if !ro.IsNested {

		cfv5tmp := []*pgdb_v1.SearchContent{

			{
				Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_EXACT,
				Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_UNSPECIFIED,
				Value:  m.self.GetId(),
			},

			{
				Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_ENGLISH,
				Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_HIGH,
				Value:  m.self.GetDisplayName(),
			},

			{
				Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_ENGLISH,
				Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_UNSPECIFIED,
				Value:  m.self.GetDescription(),
			},
		}

		cfv5 := pgdb_v1.FullTextSearchVectors(cfv5tmp)

		if ro.Nulled {
			rv[ro.ColumnName("fts_data")] = nullExp
		} else {
			rv[ro.ColumnName("fts_data")] = cfv5
		}

	}

	if !ro.IsNested {

		cfv6, err := proto.Marshal(m.self)
		if err != nil {
			return nil, err
		}

		if ro.Nulled {
			rv[ro.ColumnName("pb_data")] = nullExp
		} else {
			rv[ro.ColumnName("pb_data")] = cfv6
		}

	}

	v1 := strings.ReplaceAll(string(m.self.GetId()), "\u0000", "")

	if ro.Nulled {
		rv[ro.ColumnName("id")] = nullExp
	} else {
		rv[ro.ColumnName("id")] = v1
	}

	var v2 *time.Time
	if m.self.GetCreatedAt().IsValid() {
		v2tmp := m.self.GetCreatedAt().AsTime()
		v2 = &v2tmp
	}

	if ro.Nulled {
		rv[ro.ColumnName("created_at")] = nullExp
	} else {
		rv[ro.ColumnName("created_at")] = v2
	}

	var v3 *time.Time
	if m.self.GetUpdatedAt().IsValid() {
		v3tmp := m.self.GetUpdatedAt().AsTime()
		v3 = &v3tmp
	}

	if ro.Nulled {
		rv[ro.ColumnName("updated_at")] = nullExp
	} else {
		rv[ro.ColumnName("updated_at")] = v3
	}

	var v4 *time.Time
	if m.self.GetDeletedAt().IsValid() {
		v4tmp := m.self.GetDeletedAt().AsTime()
		v4 = &v4tmp
	}

	if ro.Nulled {
		rv[ro.ColumnName("deleted_at")] = nullExp
	} else {
		rv[ro.ColumnName("deleted_at")] = v4
	}

	v5 := strings.ReplaceAll(string(m.self.GetDisplayName()), "\u0000", "")

	if ro.Nulled {
		rv[ro.ColumnName("display_name")] = nullExp
	} else {
		rv[ro.ColumnName("display_name")] = v5
	}

	v6 := strings.ReplaceAll(string(m.self.GetDescription()), "\u0000", "")

	if ro.Nulled {
		rv[ro.ColumnName("description")] = nullExp
	} else {
		rv[ro.ColumnName("description")] = v6
	}

	v7 := bool(m.self.GetSystemBuiltin())

	if ro.Nulled {
		rv[ro.ColumnName("system_builtin")] = nullExp
	} else {
		rv[ro.ColumnName("system_builtin")] = v7
	}

	v8 := &pgtype.Interval{}
	if m.self.GetElapsed().IsValid() {
		v8.Valid = true
		v8.Microseconds = int64(m.self.GetElapsed().AsDuration()) / 1000
	}

	if ro.Nulled {
		rv[ro.ColumnName("elapsed")] = nullExp
	} else {
		rv[ro.ColumnName("elapsed")] = v8
	}

	v9tmp, err := pgdb_v1.MarshalProtoJSON(m.self.GetProfile())
	if err != nil {
		return nil, err
	}
	v9 := exp.NewLiteralExpression("?::jsonb", string(v9tmp))

	if ro.Nulled {
		rv[ro.ColumnName("profile")] = nullExp
	} else {
		rv[ro.ColumnName("profile")] = v9
	}

	v10 := float32(m.self.GetCuteness())

	if ro.Nulled {
		rv[ro.ColumnName("cuteness")] = nullExp
	} else {
		rv[ro.ColumnName("cuteness")] = v10
	}

	v11 := float64(m.self.GetPrice())

	if ro.Nulled {
		rv[ro.ColumnName("price")] = nullExp
	} else {
		rv[ro.ColumnName("price")] = v11
	}

	v12 := bool(m.self.GetVeryLongNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaame())

	if ro.Nulled {
		rv[ro.ColumnName("14")] = nullExp
	} else {
		rv[ro.ColumnName("14")] = v12
	}

	v13 := make(xpq.Array[string], 0, len(m.self.GetExtraProfiles()))
	for _, v13arrTmp := range m.self.GetExtraProfiles() {
		v13tmp, err := pgdb_v1.MarshalProtoJSON(v13arrTmp)
		if err != nil {
			return nil, err
		}
		v13 = append(v13, string(v13tmp))
	}

	if ro.Nulled {
		rv[ro.ColumnName("extra_profiles")] = nullExp
	} else {
		rv[ro.ColumnName("extra_profiles")] = v13
	}

	v14 := strings.ReplaceAll(string(m.self.GetFieldWithV17CollationOnly()), "\u0000", "")

	if ro.Nulled {
		rv[ro.ColumnName("field_with_v17_collation_only")] = nullExp
	} else {
		rv[ro.ColumnName("field_with_v17_collation_only")] = v14
	}

	return rv, nil
}

func (m *pgdbMessagePet) SearchData(opts ...pgdb_v1.RecordOptionsFunc) []*pgdb_v1.SearchContent {
	rv := []*pgdb_v1.SearchContent{

		{
			Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_EXACT,
			Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_UNSPECIFIED,
			Value:  m.self.GetId(),
		},

		{
			Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_ENGLISH,
			Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_HIGH,
			Value:  m.self.GetDisplayName(),
		},

		{
			Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_ENGLISH,
			Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_UNSPECIFIED,
			Value:  m.self.GetDescription(),
		},
	}

	return rv
}

func (m *pgdbMessagePet) Dialect() pgdb_v1.Dialect {
	return pgdb_v1.DialectOrDefault(m.dialect)
}

type PetDB struct {
	tableName string
}

type PetDBQueryBuilder struct {
	tableName string
}

type PetDBQueryUnsafe struct {
	tableName string
}

type PetDBColumns struct {
	tableName string
}

func (x *Pet) DB() *PetDB {
	return &PetDB{tableName: x.DBReflect(pgdb_v1.DialectUnspecified).Descriptor().TableName()}
}

func (x *PetDB) TableName() string {
	return x.tableName
}

func (x *PetDB) Query() *PetDBQueryBuilder {
	return &PetDBQueryBuilder{tableName: x.tableName}
}

func (x *PetDB) Columns() *PetDBColumns {
	return &PetDBColumns{tableName: x.tableName}
}

func (x *PetDB) WithTable(t string) *PetDB {
	return &PetDB{tableName: t}
}

func (x *PetDBQueryBuilder) WithTable(t string) *PetDBQueryBuilder {
	return &PetDBQueryBuilder{tableName: t}
}

func (x *PetDBQueryBuilder) Unsafe() *PetDBQueryUnsafe {
	return &PetDBQueryUnsafe{tableName: x.tableName}
}

type PetTenantIdSafeOperators struct {
	column    string
	tableName string
}

func (x *PetTenantIdSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *PetTenantIdSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *PetTenantIdSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt(v)
}

func (x *PetTenantIdSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gte(v)
}

func (x *PetTenantIdSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lt(v)
}

func (x *PetTenantIdSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lte(v)
}

func (x *PetTenantIdSafeOperators) In(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("FALSE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).In(v)
}

func (x *PetTenantIdSafeOperators) NotIn(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("TRUE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotIn(v)
}

func (x *PetTenantIdSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNull()
}

func (x *PetTenantIdSafeOperators) IsNotEmpty() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt("")
}

func (x *PetTenantIdSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNotNull()
}

func (x *PetTenantIdSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Between(exp.NewRangeVal(start, end))
}

func (x *PetTenantIdSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotBetween(exp.NewRangeVal(start, end))
}

func (x *PetDBQueryBuilder) TenantId() *PetTenantIdSafeOperators {
	return &PetTenantIdSafeOperators{tableName: x.tableName, column: "pb$" + "tenant_id"}
}

type PetPKSKSafeOperators struct {
	column    string
	tableName string
}

func (x *PetPKSKSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *PetPKSKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *PetPKSKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt(v)
}

func (x *PetPKSKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gte(v)
}

func (x *PetPKSKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lt(v)
}

func (x *PetPKSKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lte(v)
}

func (x *PetPKSKSafeOperators) In(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("FALSE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).In(v)
}

func (x *PetPKSKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("TRUE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotIn(v)
}

func (x *PetPKSKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNull()
}

func (x *PetPKSKSafeOperators) IsNotEmpty() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt("")
}

func (x *PetPKSKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNotNull()
}

func (x *PetPKSKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Between(exp.NewRangeVal(start, end))
}

func (x *PetPKSKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotBetween(exp.NewRangeVal(start, end))
}

func (x *PetDBQueryBuilder) PKSK() *PetPKSKSafeOperators {
	return &PetPKSKSafeOperators{tableName: x.tableName, column: "pb$" + "pksk"}
}

type PetPKSafeOperators struct {
	column    string
	tableName string
}

func (x *PetPKSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *PetPKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *PetPKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt(v)
}

func (x *PetPKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gte(v)
}

func (x *PetPKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lt(v)
}

func (x *PetPKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lte(v)
}

func (x *PetPKSafeOperators) In(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("FALSE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).In(v)
}

func (x *PetPKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("TRUE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotIn(v)
}

func (x *PetPKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNull()
}

func (x *PetPKSafeOperators) IsNotEmpty() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt("")
}

func (x *PetPKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNotNull()
}

func (x *PetPKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Between(exp.NewRangeVal(start, end))
}

func (x *PetPKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotBetween(exp.NewRangeVal(start, end))
}

func (x *PetDBQueryBuilder) PK() *PetPKSafeOperators {
	return &PetPKSafeOperators{tableName: x.tableName, column: "pb$" + "pk"}
}

type PetSKSafeOperators struct {
	column    string
	tableName string
}

func (x *PetSKSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *PetSKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *PetSKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt(v)
}

func (x *PetSKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gte(v)
}

func (x *PetSKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lt(v)
}

func (x *PetSKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lte(v)
}

func (x *PetSKSafeOperators) In(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("FALSE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).In(v)
}

func (x *PetSKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("TRUE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotIn(v)
}

func (x *PetSKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNull()
}

func (x *PetSKSafeOperators) IsNotEmpty() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt("")
}

func (x *PetSKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNotNull()
}

func (x *PetSKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Between(exp.NewRangeVal(start, end))
}

func (x *PetSKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotBetween(exp.NewRangeVal(start, end))
}

func (x *PetDBQueryBuilder) SK() *PetSKSafeOperators {
	return &PetSKSafeOperators{tableName: x.tableName, column: "pb$" + "sk"}
}

type PetFTSDataSafeOperators struct {
	column    string
	tableName string
}

func (x *PetFTSDataSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *PetFTSDataSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *PetDBQueryBuilder) FTSData() *PetFTSDataSafeOperators {
	return &PetFTSDataSafeOperators{tableName: x.tableName, column: "pb$" + "fts_data"}
}

type PetProfileSafeOperators struct {
	column    string
	tableName string
}

func (x *PetProfileSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *PetProfileSafeOperators) Eq(v any) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *PetProfileSafeOperators) ObjectContainsRaw(obj exp.Expression) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? @> ?)", idExp, obj)
}

func (x *PetProfileSafeOperators) ObjectContains(obj interface{}) (exp.Expression, error) {
	var err error
	var data []byte

	pm, ok := obj.(proto.Message)
	if ok {
		data, err = protojson.Marshal(pm)
	} else {
		data, err = json.Marshal(obj)
	}
	if err != nil {
		return nil, err
	}

	return x.ObjectContainsRaw(exp.NewLiteralExpression("?::jsonb", string(data))), nil
}

func (x *PetProfileSafeOperators) ObjectPathExistsRaw(path exp.Expression) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("@?"), path)
}
func (x *PetProfileSafeOperators) ObjectPathExists(path string) exp.Expression {
	return x.ObjectPathExistsRaw(exp.NewLiteralExpression("?", path))
}

func (x *PetProfileSafeOperators) ObjectPathRaw(path exp.Expression) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("? @@ ?", idExp, exp.NewLiteralExpression("?"), path)
}
func (x *PetProfileSafeOperators) ObjectPath(path string) exp.Expression {
	return x.ObjectPathRaw(exp.NewLiteralExpression("?", path))
}

func (x *PetProfileSafeOperators) ObjectKeyExistsRaw(key exp.Expression) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("? ? ?", idExp, exp.NewLiteralExpression("?"), key)
}
func (x *PetProfileSafeOperators) ObjectKeyExists(key string) exp.Expression {
	return x.ObjectKeyExistsRaw(exp.NewLiteralExpression("?", key))
}

func (x *PetProfileSafeOperators) ObjectAnyKeyExistsRaw(keys exp.Expression) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("?|"), keys)
}
func (x *PetProfileSafeOperators) ObjectAnyKeyExists(keys ...string) exp.Expression {
	return x.ObjectAnyKeyExistsRaw(exp.NewLiteralExpression("?", xpq.StringArray(keys)))
}

func (x *PetProfileSafeOperators) ObjectAllKeyExistsRaw(keys exp.Expression) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("?&"), keys)
}
func (x *PetProfileSafeOperators) ObjectAllKeyExists(keys ...string) exp.Expression {
	return x.ObjectAllKeyExistsRaw(exp.NewLiteralExpression("?", xpq.StringArray(keys)))
}

func (x *PetDBQueryBuilder) Profile() *PetProfileSafeOperators {
	return &PetProfileSafeOperators{tableName: x.tableName, column: "pb$" + "profile"}
}

type PetTenantIdQueryType struct {
	column    string
	tableName string
}

func (x *PetDBQueryUnsafe) TenantId() *PetTenantIdQueryType {
	return &PetTenantIdQueryType{tableName: x.tableName, column: "pb$" + "tenant_id"}
}

func (x *PetTenantIdQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type PetPKSKQueryType struct {
	column    string
	tableName string
}

func (x *PetDBQueryUnsafe) PKSK() *PetPKSKQueryType {
	return &PetPKSKQueryType{tableName: x.tableName, column: "pb$" + "pksk"}
}

func (x *PetPKSKQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type PetPKQueryType struct {
	column    string
	tableName string
}

func (x *PetDBQueryUnsafe) PK() *PetPKQueryType {
	return &PetPKQueryType{tableName: x.tableName, column: "pb$" + "pk"}
}

func (x *PetPKQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type PetSKQueryType struct {
	column    string
	tableName string
}

func (x *PetDBQueryUnsafe) SK() *PetSKQueryType {
	return &PetSKQueryType{tableName: x.tableName, column: "pb$" + "sk"}
}

func (x *PetSKQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type PetFTSDataQueryType struct {
	column    string
	tableName string
}

func (x *PetDBQueryUnsafe) FTSData() *PetFTSDataQueryType {
	return &PetFTSDataQueryType{tableName: x.tableName, column: "pb$" + "fts_data"}
}

func (x *PetFTSDataQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type PetPBDataQueryType struct {
	column    string
	tableName string
}

func (x *PetDBQueryUnsafe) PBData() *PetPBDataQueryType {
	return &PetPBDataQueryType{tableName: x.tableName, column: "pb$" + "pb_data"}
}

func (x *PetPBDataQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type PetIdQueryType struct {
	column    string
	tableName string
}

func (x *PetDBQueryUnsafe) Id() *PetIdQueryType {
	return &PetIdQueryType{tableName: x.tableName, column: "pb$" + "id"}
}

func (x *PetIdQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type PetCreatedAtQueryType struct {
	column    string
	tableName string
}

func (x *PetDBQueryUnsafe) CreatedAt() *PetCreatedAtQueryType {
	return &PetCreatedAtQueryType{tableName: x.tableName, column: "pb$" + "created_at"}
}

func (x *PetCreatedAtQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type PetUpdatedAtQueryType struct {
	column    string
	tableName string
}

func (x *PetDBQueryUnsafe) UpdatedAt() *PetUpdatedAtQueryType {
	return &PetUpdatedAtQueryType{tableName: x.tableName, column: "pb$" + "updated_at"}
}

func (x *PetUpdatedAtQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type PetDeletedAtQueryType struct {
	column    string
	tableName string
}

func (x *PetDBQueryUnsafe) DeletedAt() *PetDeletedAtQueryType {
	return &PetDeletedAtQueryType{tableName: x.tableName, column: "pb$" + "deleted_at"}
}

func (x *PetDeletedAtQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type PetDisplayNameQueryType struct {
	column    string
	tableName string
}

func (x *PetDBQueryUnsafe) DisplayName() *PetDisplayNameQueryType {
	return &PetDisplayNameQueryType{tableName: x.tableName, column: "pb$" + "display_name"}
}

func (x *PetDisplayNameQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type PetDescriptionQueryType struct {
	column    string
	tableName string
}

func (x *PetDBQueryUnsafe) Description() *PetDescriptionQueryType {
	return &PetDescriptionQueryType{tableName: x.tableName, column: "pb$" + "description"}
}

func (x *PetDescriptionQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type PetSystemBuiltinQueryType struct {
	column    string
	tableName string
}

func (x *PetDBQueryUnsafe) SystemBuiltin() *PetSystemBuiltinQueryType {
	return &PetSystemBuiltinQueryType{tableName: x.tableName, column: "pb$" + "system_builtin"}
}

func (x *PetSystemBuiltinQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type PetElapsedQueryType struct {
	column    string
	tableName string
}

func (x *PetDBQueryUnsafe) Elapsed() *PetElapsedQueryType {
	return &PetElapsedQueryType{tableName: x.tableName, column: "pb$" + "elapsed"}
}

func (x *PetElapsedQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type PetProfileQueryType struct {
	column    string
	tableName string
}

func (x *PetDBQueryUnsafe) Profile() *PetProfileQueryType {
	return &PetProfileQueryType{tableName: x.tableName, column: "pb$" + "profile"}
}

func (x *PetProfileQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type PetCutenessQueryType struct {
	column    string
	tableName string
}

func (x *PetDBQueryUnsafe) Cuteness() *PetCutenessQueryType {
	return &PetCutenessQueryType{tableName: x.tableName, column: "pb$" + "cuteness"}
}

func (x *PetCutenessQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type PetPriceQueryType struct {
	column    string
	tableName string
}

func (x *PetDBQueryUnsafe) Price() *PetPriceQueryType {
	return &PetPriceQueryType{tableName: x.tableName, column: "pb$" + "price"}
}

func (x *PetPriceQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type PetVeryLongNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaameQueryType struct {
	column    string
	tableName string
}

func (x *PetDBQueryUnsafe) VeryLongNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaame() *PetVeryLongNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaameQueryType {
	return &PetVeryLongNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaameQueryType{tableName: x.tableName, column: "pb$" + "14"}
}

func (x *PetVeryLongNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaameQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type PetExtraProfilesQueryType struct {
	column    string
	tableName string
}

func (x *PetDBQueryUnsafe) ExtraProfiles() *PetExtraProfilesQueryType {
	return &PetExtraProfilesQueryType{tableName: x.tableName, column: "pb$" + "extra_profiles"}
}

func (x *PetExtraProfilesQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type PetFieldWithV17CollationOnlyQueryType struct {
	column    string
	tableName string
}

func (x *PetDBQueryUnsafe) FieldWithV17CollationOnly() *PetFieldWithV17CollationOnlyQueryType {
	return &PetFieldWithV17CollationOnlyQueryType{tableName: x.tableName, column: "pb$" + "field_with_v17_collation_only"}
}

func (x *PetFieldWithV17CollationOnlyQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *PetDBColumns) WithTable(t string) *PetDBColumns {
	return &PetDBColumns{tableName: t}
}

func (x *PetDBColumns) TenantId() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "tenant_id")
}

func (x *PetDBColumns) PKSK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pksk")
}

func (x *PetDBColumns) PK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pk")
}

func (x *PetDBColumns) SK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "sk")
}

func (x *PetDBColumns) FTSData() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "fts_data")
}

func (x *PetDBColumns) PBData() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pb_data")
}

func (x *PetDBColumns) Id() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "id")
}

func (x *PetDBColumns) CreatedAt() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "created_at")
}

func (x *PetDBColumns) UpdatedAt() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "updated_at")
}

func (x *PetDBColumns) DeletedAt() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "deleted_at")
}

func (x *PetDBColumns) DisplayName() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "display_name")
}

func (x *PetDBColumns) Description() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "description")
}

func (x *PetDBColumns) SystemBuiltin() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "system_builtin")
}

func (x *PetDBColumns) Elapsed() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "elapsed")
}

func (x *PetDBColumns) Profile() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "profile")
}

func (x *PetDBColumns) Cuteness() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "cuteness")
}

func (x *PetDBColumns) Price() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "price")
}

func (x *PetDBColumns) VeryLongNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaame() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "14")
}

func (x *PetDBColumns) ExtraProfiles() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "extra_profiles")
}

func (x *PetDBColumns) FieldWithV17CollationOnly() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "field_with_v17_collation_only")
}

type pgdbDescriptorScalarValue struct {
	dialect pgdb_v1.Dialect
}

var (
	instancepgdbDescriptorScalarValue    pgdb_v1.Descriptor = &pgdbDescriptorScalarValue{}
	instancepgdbDescriptorScalarValueV17 pgdb_v1.Descriptor = &pgdbDescriptorScalarValue{dialect: pgdb_v1.DialectV17}
)

func (d *pgdbDescriptorScalarValue) Dialect() pgdb_v1.Dialect {
	return pgdb_v1.DialectOrDefault(d.dialect)
}

func (d *pgdbDescriptorScalarValue) TableName() string {
	return "pb_scalar_value_models_animals_v1_35025835"
}

func (d *pgdbDescriptorScalarValue) IsPartitioned() bool {
	return false
}

func (d *pgdbDescriptorScalarValue) IsPartitionedByCreatedAt() bool {
	return false
}

func (d *pgdbDescriptorScalarValue) GetPartitionedByKsuidFieldName() string {
	return ""
}

func (d *pgdbDescriptorScalarValue) GetPartitionDateRange() pgdb_v1.MessageOptions_PartitionedByDateRange {
	return pgdb_v1.MessageOptions_PARTITIONED_BY_DATE_RANGE_UNSPECIFIED
}

func (d *pgdbDescriptorScalarValue) Fields(opts ...pgdb_v1.DescriptorFieldOptionFunc) []*pgdb_v1.Column {
	df := pgdb_v1.NewDescriptorFieldOption(opts)
	_ = df

	rv := make([]*pgdb_v1.Column, 0)

	if !df.IsNested {

		coltenant_idCollation := ""
		coltenant_idOverrideExpression := ""

		switch d.Dialect() {
		case pgdb_v1.DialectV17:
			coltenant_idCollation = "C"

		default:
		}

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("tenant_id"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: coltenant_idOverrideExpression,
			Default:            "",
			Collation:          coltenant_idCollation,
		})

	}

	if !df.IsNested {

		colpkskCollation := ""
		colpkskOverrideExpression := "varchar GENERATED ALWAYS AS (pb$pk || '|' || pb$sk) STORED"

		switch d.Dialect() {
		case pgdb_v1.DialectV17:
			colpkskCollation = "C"
			colpkskOverrideExpression = ""
		default:
		}

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pksk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: colpkskOverrideExpression,
			Default:            "",
			Collation:          colpkskCollation,
		})

	}

	if !df.IsNested {

		colpkCollation := ""
		colpkOverrideExpression := ""

		switch d.Dialect() {
		case pgdb_v1.DialectV17:
			colpkCollation = "C"

		default:
		}

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: colpkOverrideExpression,
			Default:            "",
			Collation:          colpkCollation,
		})

	}

	if !df.IsNested {

		colskCollation := ""
		colskOverrideExpression := ""

		switch d.Dialect() {
		case pgdb_v1.DialectV17:
			colskCollation = "C"

		default:
		}

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("sk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: colskOverrideExpression,
			Default:            "",
			Collation:          colskCollation,
		})

	}

	if !df.IsNested {

		colpkskv2Collation := "C"
		colpkskv2OverrideExpression := ""

		if d.Dialect() != pgdb_v1.DialectV17 {
			rv = append(rv, &pgdb_v1.Column{
				Name:               df.ColumnName("pkskv2"),
				Type:               "varchar",
				Nullable:           df.Nullable(true),
				OverrideExpression: colpkskv2OverrideExpression,
				Default:            "",
				Collation:          colpkskv2Collation,
			})
		}

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("fts_data"),
			Type:               "tsvector",
			Nullable:           df.Nullable(true),
			OverrideExpression: "",
			Default:            "",
			Collation:          "",
		})

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pb_data"),
			Type:               "bytea",
			Nullable:           df.Nullable(false),
			OverrideExpression: "",
			Default:            "",
			Collation:          "",
		})

	}

	colidCollation := ""
	colidOverrideExpression := ""

	switch d.Dialect() {
	case pgdb_v1.DialectV17:
		colidCollation = "C"

	default:
	}

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("id"),
		Type:               "text",
		Nullable:           df.Nullable(false),
		OverrideExpression: colidOverrideExpression,
		Default:            "''",
		Collation:          colidCollation,
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("double"),
		Type:               "float8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "0.0",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("float"),
		Type:               "float4",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "0.0",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("int_32"),
		Type:               "int4",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "0",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("int_64"),
		Type:               "int8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "0",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("uint_32"),
		Type:               "int8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "0",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("uint_64"),
		Type:               "numeric",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "0",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("sint_32"),
		Type:               "int4",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "0",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("sint_64"),
		Type:               "int8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "0",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("fixed_32"),
		Type:               "int8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "0",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("fixed_64"),
		Type:               "numeric",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "0",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("sfixed_32"),
		Type:               "int4",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "0",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("sfixed_64"),
		Type:               "int8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "0",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("bool"),
		Type:               "bool",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "false",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("string"),
		Type:               "text",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "''",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("bytes"),
		Type:               "bytea",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_double"),
		Type:               "_float8",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_float"),
		Type:               "_float4",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_int32"),
		Type:               "_int4",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_int64"),
		Type:               "_int8",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_uint32"),
		Type:               "_int8",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_uint64"),
		Type:               "_numeric",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_sint32"),
		Type:               "_int4",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_sint64"),
		Type:               "_int8",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_fixed32"),
		Type:               "_int8",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_fixed64"),
		Type:               "_numeric",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_sfixed32"),
		Type:               "_int4",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_sfixed64"),
		Type:               "_int8",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_bool"),
		Type:               "_bool",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_string"),
		Type:               "_text",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_bytes"),
		Type:               "_bytea",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_enum"),
		Type:               "_int4",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("string_map"),
		Type:               "jsonb",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("created_at"),
		Type:               "timestamptz",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("str_ptr"),
		Type:               "text",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("bool_ptr"),
		Type:               "bool",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	return rv
}

func (d *pgdbDescriptorScalarValue) PKSKField() *pgdb_v1.Column {
	var collation string
	switch d.Dialect() {
	case pgdb_v1.DialectV17:
		collation = "C"
	default:
	}
	return &pgdb_v1.Column{
		Table:     "pb_scalar_value_models_animals_v1_35025835",
		Name:      "pb$pksk",
		Type:      "varchar",
		Collation: collation,
	}
}

func (d *pgdbDescriptorScalarValue) DataField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Table: "pb_scalar_value_models_animals_v1_35025835", Name: "pb$pb_data", Type: "bytea"}
}

func (d *pgdbDescriptorScalarValue) SearchField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Table: "pb_scalar_value_models_animals_v1_35025835", Name: "pb$fts_data", Type: "tsvector"}
}

func (d *pgdbDescriptorScalarValue) VersioningField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Table: "pb_scalar_value_models_animals_v1_35025835", Name: "pb$created_at", Type: "timestamptz"}
}

func (d *pgdbDescriptorScalarValue) TenantField() *pgdb_v1.Column {
	var collation string
	switch d.Dialect() {
	case pgdb_v1.DialectV17:
		collation = "C"
	default:
	}
	return &pgdb_v1.Column{
		Table:     "pb_scalar_value_models_animals_v1_35025835",
		Name:      "pb$tenant_id",
		Type:      "varchar",
		Collation: collation,
	}
}

func (d *pgdbDescriptorScalarValue) IndexPrimaryKey(opts ...pgdb_v1.IndexOptionsFunc) *pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io

	return &pgdb_v1.Index{
		Name:               io.IndexName("pksk_scalar_value_models_animals_v1_19369260"),
		Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
		IsPrimary:          true,
		IsUnique:           true,
		IsDropped:          false,
		Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pksk")},
		OverrideExpression: "",
	}

}

func (d *pgdbDescriptorScalarValue) Indexes(opts ...pgdb_v1.IndexOptionsFunc) []*pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io
	rv := make([]*pgdb_v1.Index, 0)

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("pksk_scalar_value_models_animals_v1_19369260"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
			IsPrimary:          true,
			IsUnique:           true,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pksk")},
			OverrideExpression: "",
			WherePredicate:     "",
		})

	}

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("pksk_split_scalar_value_models_animals_bedd2051"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
			IsPrimary:          false,
			IsUnique:           false,
			IsDropped:          true,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pk"), io.ColumnName("sk")},
			OverrideExpression: "",
			WherePredicate:     "",
		})

	}

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("pksk_split2_scalar_value_models_animals_12c49864"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
			IsPrimary:          false,
			IsUnique:           false,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pk"), io.ColumnName("sk")},
			OverrideExpression: "",
			WherePredicate:     "",
		})

	}

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("fts_data_scalar_value_models_animals_v1_6f51bd7b"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE_GIN,
			IsPrimary:          false,
			IsUnique:           false,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("fts_data")},
			OverrideExpression: "",
			WherePredicate:     "",
		})

	}

	rv = append(rv, &pgdb_v1.Index{
		Name:               io.IndexName("repeated_sfixed32_scalar_value_models_a_4e825cd3"),
		Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_GIN,
		IsPrimary:          false,
		IsUnique:           false,
		IsDropped:          false,
		Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("repeated_sfixed32"), io.ColumnName("repeated_sfixed64"), io.ColumnName("repeated_double"), io.ColumnName("repeated_bytes"), io.ColumnName("string_map")},
		OverrideExpression: "",
		WherePredicate:     "",
	})

	return rv
}

func (d *pgdbDescriptorScalarValue) Statistics(opts ...pgdb_v1.StatisticOptionsFunc) []*pgdb_v1.Statistic {
	io := pgdb_v1.NewStatisticOption(opts)
	_ = io
	rv := make([]*pgdb_v1.Statistic, 0)

	return rv
}

type pgdbMessageScalarValue struct {
	self    *ScalarValue
	dialect pgdb_v1.Dialect
}

func (dbr *ScalarValue) DBReflect(dialect pgdb_v1.Dialect) pgdb_v1.Message {
	return &pgdbMessageScalarValue{
		self:    dbr,
		dialect: dialect,
	}
}

func (m *pgdbMessageScalarValue) Descriptor() pgdb_v1.Descriptor {
	switch m.Dialect() {
	case pgdb_v1.DialectV17:
		return instancepgdbDescriptorScalarValueV17
	default:
		return instancepgdbDescriptorScalarValue
	}
}

func (m *pgdbMessageScalarValue) Record(opts ...pgdb_v1.RecordOptionsFunc) (exp.Record, error) {
	ro := pgdb_v1.NewRecordOptions(opts)
	_ = ro
	nullExp := exp.NewLiteralExpression("NULL")
	_ = nullExp

	var sb strings.Builder

	rv := exp.Record{}

	if !ro.IsNested {

		cfv0 := strings.ReplaceAll(string(m.self.GetTenantId()), "\u0000", "")

		if ro.Nulled {
			rv[ro.ColumnName("tenant_id")] = nullExp
		} else {
			rv[ro.ColumnName("tenant_id")] = cfv0
		}

	}

	if !ro.IsNested {

	}

	if !ro.IsNested {

		sb.Reset()

		_, _ = sb.WriteString("models_animals_v1_scalar_value")

		_, _ = sb.WriteString(":")

		_, _ = sb.WriteString(m.self.GetTenantId())

		cfv2 := sb.String()

		if ro.Nulled {
			rv[ro.ColumnName("pk")] = nullExp
		} else {
			rv[ro.ColumnName("pk")] = cfv2
		}

	}

	if !ro.IsNested {

		sb.Reset()

		_, _ = sb.WriteString(m.self.GetId())

		cfv3 := sb.String()

		if ro.Nulled {
			rv[ro.ColumnName("sk")] = nullExp
		} else {
			rv[ro.ColumnName("sk")] = cfv3
		}

	}

	if !ro.IsNested {

		if m.Dialect() != pgdb_v1.DialectV17 {

		}

	}

	if !ro.IsNested {

		cfv5tmp := []*pgdb_v1.SearchContent{

			{
				Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_ENGLISH,
				Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_HIGH,
				Value:  m.self.GetString(),
			},

			{
				Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_ENGLISH,
				Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_HIGH,
				Value:  m.self.GetRepeatedString(),
			},
		}

		cfv5 := pgdb_v1.FullTextSearchVectors(cfv5tmp)

		if ro.Nulled {
			rv[ro.ColumnName("fts_data")] = nullExp
		} else {
			rv[ro.ColumnName("fts_data")] = cfv5
		}

	}

	if !ro.IsNested {

		cfv6, err := proto.Marshal(m.self)
		if err != nil {
			return nil, err
		}

		if ro.Nulled {
			rv[ro.ColumnName("pb_data")] = nullExp
		} else {
			rv[ro.ColumnName("pb_data")] = cfv6
		}

	}

	v1 := strings.ReplaceAll(string(m.self.GetId()), "\u0000", "")

	if ro.Nulled {
		rv[ro.ColumnName("id")] = nullExp
	} else {
		rv[ro.ColumnName("id")] = v1
	}

	v2 := float64(m.self.GetDouble())

	if ro.Nulled {
		rv[ro.ColumnName("double")] = nullExp
	} else {
		rv[ro.ColumnName("double")] = v2
	}

	v3 := float32(m.self.GetFloat())

	if ro.Nulled {
		rv[ro.ColumnName("float")] = nullExp
	} else {
		rv[ro.ColumnName("float")] = v3
	}

	v4 := int32(m.self.GetInt32())

	if ro.Nulled {
		rv[ro.ColumnName("int_32")] = nullExp
	} else {
		rv[ro.ColumnName("int_32")] = v4
	}

	v5 := int64(m.self.GetInt64())

	if ro.Nulled {
		rv[ro.ColumnName("int_64")] = nullExp
	} else {
		rv[ro.ColumnName("int_64")] = v5
	}

	v6 := uint32(m.self.GetUint32())

	if ro.Nulled {
		rv[ro.ColumnName("uint_32")] = nullExp
	} else {
		rv[ro.ColumnName("uint_32")] = v6
	}

	v7 := uint64(m.self.GetUint64())

	if ro.Nulled {
		rv[ro.ColumnName("uint_64")] = nullExp
	} else {
		rv[ro.ColumnName("uint_64")] = v7
	}

	v8 := int32(m.self.GetSint32())

	if ro.Nulled {
		rv[ro.ColumnName("sint_32")] = nullExp
	} else {
		rv[ro.ColumnName("sint_32")] = v8
	}

	v9 := int64(m.self.GetSint64())

	if ro.Nulled {
		rv[ro.ColumnName("sint_64")] = nullExp
	} else {
		rv[ro.ColumnName("sint_64")] = v9
	}

	v10 := uint32(m.self.GetFixed32())

	if ro.Nulled {
		rv[ro.ColumnName("fixed_32")] = nullExp
	} else {
		rv[ro.ColumnName("fixed_32")] = v10
	}

	v11 := uint64(m.self.GetFixed64())

	if ro.Nulled {
		rv[ro.ColumnName("fixed_64")] = nullExp
	} else {
		rv[ro.ColumnName("fixed_64")] = v11
	}

	v12 := int32(m.self.GetSfixed32())

	if ro.Nulled {
		rv[ro.ColumnName("sfixed_32")] = nullExp
	} else {
		rv[ro.ColumnName("sfixed_32")] = v12
	}

	v13 := int64(m.self.GetSfixed64())

	if ro.Nulled {
		rv[ro.ColumnName("sfixed_64")] = nullExp
	} else {
		rv[ro.ColumnName("sfixed_64")] = v13
	}

	v14 := bool(m.self.GetBool())

	if ro.Nulled {
		rv[ro.ColumnName("bool")] = nullExp
	} else {
		rv[ro.ColumnName("bool")] = v14
	}

	v15 := strings.ReplaceAll(string(m.self.GetString()), "\u0000", "")

	if ro.Nulled {
		rv[ro.ColumnName("string")] = nullExp
	} else {
		rv[ro.ColumnName("string")] = v15
	}

	v16 := []byte(m.self.GetBytes())

	if ro.Nulled {
		rv[ro.ColumnName("bytes")] = nullExp
	} else {
		rv[ro.ColumnName("bytes")] = v16
	}

	v17 := make(xpq.Array[float64], 0, len(m.self.GetRepeatedDouble()))
	for _, v17arrTmp := range m.self.GetRepeatedDouble() {

		v17 = append(v17, float64(v17arrTmp))

	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_double")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_double")] = v17
	}

	v18 := make(xpq.Array[float32], 0, len(m.self.GetRepeatedFloat()))
	for _, v18arrTmp := range m.self.GetRepeatedFloat() {

		v18 = append(v18, float32(v18arrTmp))

	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_float")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_float")] = v18
	}

	v19 := make(xpq.Array[int32], 0, len(m.self.GetRepeatedInt32()))
	for _, v19arrTmp := range m.self.GetRepeatedInt32() {

		v19 = append(v19, int32(v19arrTmp))

	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_int32")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_int32")] = v19
	}

	v20 := make(xpq.Array[int64], 0, len(m.self.GetRepeatedInt64()))
	for _, v20arrTmp := range m.self.GetRepeatedInt64() {

		v20 = append(v20, int64(v20arrTmp))

	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_int64")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_int64")] = v20
	}

	v21 := make(xpq.Array[uint32], 0, len(m.self.GetRepeatedUint32()))
	for _, v21arrTmp := range m.self.GetRepeatedUint32() {

		v21 = append(v21, uint32(v21arrTmp))

	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_uint32")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_uint32")] = v21
	}

	v22 := make(xpq.Array[uint64], 0, len(m.self.GetRepeatedUint64()))
	for _, v22arrTmp := range m.self.GetRepeatedUint64() {

		v22 = append(v22, uint64(v22arrTmp))

	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_uint64")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_uint64")] = v22
	}

	v23 := make(xpq.Array[int32], 0, len(m.self.GetRepeatedSint32()))
	for _, v23arrTmp := range m.self.GetRepeatedSint32() {

		v23 = append(v23, int32(v23arrTmp))

	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_sint32")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_sint32")] = v23
	}

	v24 := make(xpq.Array[int64], 0, len(m.self.GetRepeatedSint64()))
	for _, v24arrTmp := range m.self.GetRepeatedSint64() {

		v24 = append(v24, int64(v24arrTmp))

	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_sint64")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_sint64")] = v24
	}

	v25 := make(xpq.Array[uint32], 0, len(m.self.GetRepeatedFixed32()))
	for _, v25arrTmp := range m.self.GetRepeatedFixed32() {

		v25 = append(v25, uint32(v25arrTmp))

	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_fixed32")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_fixed32")] = v25
	}

	v26 := make(xpq.Array[uint64], 0, len(m.self.GetRepeatedFixed64()))
	for _, v26arrTmp := range m.self.GetRepeatedFixed64() {

		v26 = append(v26, uint64(v26arrTmp))

	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_fixed64")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_fixed64")] = v26
	}

	v27 := make(xpq.Array[int32], 0, len(m.self.GetRepeatedSfixed32()))
	for _, v27arrTmp := range m.self.GetRepeatedSfixed32() {

		v27 = append(v27, int32(v27arrTmp))

	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_sfixed32")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_sfixed32")] = v27
	}

	v28 := make(xpq.Array[int64], 0, len(m.self.GetRepeatedSfixed64()))
	for _, v28arrTmp := range m.self.GetRepeatedSfixed64() {

		v28 = append(v28, int64(v28arrTmp))

	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_sfixed64")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_sfixed64")] = v28
	}

	v29 := make(xpq.Array[bool], 0, len(m.self.GetRepeatedBool()))
	for _, v29arrTmp := range m.self.GetRepeatedBool() {

		v29 = append(v29, bool(v29arrTmp))

	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_bool")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_bool")] = v29
	}

	v30 := make(xpq.Array[string], 0, len(m.self.GetRepeatedString()))
	for _, v30arrTmp := range m.self.GetRepeatedString() {

		v30 = append(v30, strings.ReplaceAll(string(v30arrTmp), "\u0000", ""))

	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_string")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_string")] = v30
	}

	v31 := make(xpq.Array[[]byte], 0, len(m.self.GetRepeatedBytes()))
	for _, v31arrTmp := range m.self.GetRepeatedBytes() {

		v31 = append(v31, []byte(v31arrTmp))

	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_bytes")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_bytes")] = v31
	}

	v32 := make(xpq.Array[int32], 0, len(m.self.GetRepeatedEnum()))
	for _, v32arrTmp := range m.self.GetRepeatedEnum() {

		v32 = append(v32, int32(v32arrTmp))

	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_enum")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_enum")] = v32
	}

	v33tmp, err := pgdb_v1.MarshalJSON(m.self.GetStringMap())
	if err != nil {
		return nil, err
	}
	v33 := exp.NewLiteralExpression("?::jsonb", string(v33tmp))

	if ro.Nulled {
		rv[ro.ColumnName("string_map")] = nullExp
	} else {
		rv[ro.ColumnName("string_map")] = v33
	}

	var v34 *time.Time
	if m.self.GetCreatedAt().IsValid() {
		v34tmp := m.self.GetCreatedAt().AsTime()
		v34 = &v34tmp
	}

	if ro.Nulled {
		rv[ro.ColumnName("created_at")] = nullExp
	} else {
		rv[ro.ColumnName("created_at")] = v34
	}

	var v35 exp.LiteralExpression

	if m.self.GetStrPtr() != nil {

		v35 = exp.NewLiteralExpression("?", strings.ReplaceAll(m.self.GetStrPtr().GetValue(), "\u0000", ""))

	} else {
		v35 = exp.NewLiteralExpression("NULL")
	}

	if ro.Nulled {
		rv[ro.ColumnName("str_ptr")] = nullExp
	} else {
		rv[ro.ColumnName("str_ptr")] = v35
	}

	var v36 exp.LiteralExpression

	if m.self.GetBoolPtr() != nil {

		v36 = exp.NewLiteralExpression("?", m.self.GetBoolPtr().GetValue())

	} else {
		v36 = exp.NewLiteralExpression("NULL")
	}

	if ro.Nulled {
		rv[ro.ColumnName("bool_ptr")] = nullExp
	} else {
		rv[ro.ColumnName("bool_ptr")] = v36
	}

	return rv, nil
}

func (m *pgdbMessageScalarValue) SearchData(opts ...pgdb_v1.RecordOptionsFunc) []*pgdb_v1.SearchContent {
	rv := []*pgdb_v1.SearchContent{

		{
			Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_ENGLISH,
			Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_HIGH,
			Value:  m.self.GetString(),
		},

		{
			Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_ENGLISH,
			Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_HIGH,
			Value:  m.self.GetRepeatedString(),
		},
	}

	return rv
}

func (m *pgdbMessageScalarValue) Dialect() pgdb_v1.Dialect {
	return pgdb_v1.DialectOrDefault(m.dialect)
}

type ScalarValueDB struct {
	tableName string
}

type ScalarValueDBQueryBuilder struct {
	tableName string
}

type ScalarValueDBQueryUnsafe struct {
	tableName string
}

type ScalarValueDBColumns struct {
	tableName string
}

func (x *ScalarValue) DB() *ScalarValueDB {
	return &ScalarValueDB{tableName: x.DBReflect(pgdb_v1.DialectUnspecified).Descriptor().TableName()}
}

func (x *ScalarValueDB) TableName() string {
	return x.tableName
}

func (x *ScalarValueDB) Query() *ScalarValueDBQueryBuilder {
	return &ScalarValueDBQueryBuilder{tableName: x.tableName}
}

func (x *ScalarValueDB) Columns() *ScalarValueDBColumns {
	return &ScalarValueDBColumns{tableName: x.tableName}
}

func (x *ScalarValueDB) WithTable(t string) *ScalarValueDB {
	return &ScalarValueDB{tableName: t}
}

func (x *ScalarValueDBQueryBuilder) WithTable(t string) *ScalarValueDBQueryBuilder {
	return &ScalarValueDBQueryBuilder{tableName: t}
}

func (x *ScalarValueDBQueryBuilder) Unsafe() *ScalarValueDBQueryUnsafe {
	return &ScalarValueDBQueryUnsafe{tableName: x.tableName}
}

type ScalarValueTenantIdSafeOperators struct {
	column    string
	tableName string
}

func (x *ScalarValueTenantIdSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *ScalarValueTenantIdSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *ScalarValueTenantIdSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt(v)
}

func (x *ScalarValueTenantIdSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gte(v)
}

func (x *ScalarValueTenantIdSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lt(v)
}

func (x *ScalarValueTenantIdSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lte(v)
}

func (x *ScalarValueTenantIdSafeOperators) In(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("FALSE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).In(v)
}

func (x *ScalarValueTenantIdSafeOperators) NotIn(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("TRUE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotIn(v)
}

func (x *ScalarValueTenantIdSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNull()
}

func (x *ScalarValueTenantIdSafeOperators) IsNotEmpty() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt("")
}

func (x *ScalarValueTenantIdSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNotNull()
}

func (x *ScalarValueTenantIdSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Between(exp.NewRangeVal(start, end))
}

func (x *ScalarValueTenantIdSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotBetween(exp.NewRangeVal(start, end))
}

func (x *ScalarValueDBQueryBuilder) TenantId() *ScalarValueTenantIdSafeOperators {
	return &ScalarValueTenantIdSafeOperators{tableName: x.tableName, column: "pb$" + "tenant_id"}
}

type ScalarValuePKSKSafeOperators struct {
	column    string
	tableName string
}

func (x *ScalarValuePKSKSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *ScalarValuePKSKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *ScalarValuePKSKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt(v)
}

func (x *ScalarValuePKSKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gte(v)
}

func (x *ScalarValuePKSKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lt(v)
}

func (x *ScalarValuePKSKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lte(v)
}

func (x *ScalarValuePKSKSafeOperators) In(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("FALSE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).In(v)
}

func (x *ScalarValuePKSKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("TRUE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotIn(v)
}

func (x *ScalarValuePKSKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNull()
}

func (x *ScalarValuePKSKSafeOperators) IsNotEmpty() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt("")
}

func (x *ScalarValuePKSKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNotNull()
}

func (x *ScalarValuePKSKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Between(exp.NewRangeVal(start, end))
}

func (x *ScalarValuePKSKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotBetween(exp.NewRangeVal(start, end))
}

func (x *ScalarValueDBQueryBuilder) PKSK() *ScalarValuePKSKSafeOperators {
	return &ScalarValuePKSKSafeOperators{tableName: x.tableName, column: "pb$" + "pksk"}
}

type ScalarValuePKSafeOperators struct {
	column    string
	tableName string
}

func (x *ScalarValuePKSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *ScalarValuePKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *ScalarValuePKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt(v)
}

func (x *ScalarValuePKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gte(v)
}

func (x *ScalarValuePKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lt(v)
}

func (x *ScalarValuePKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lte(v)
}

func (x *ScalarValuePKSafeOperators) In(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("FALSE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).In(v)
}

func (x *ScalarValuePKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("TRUE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotIn(v)
}

func (x *ScalarValuePKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNull()
}

func (x *ScalarValuePKSafeOperators) IsNotEmpty() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt("")
}

func (x *ScalarValuePKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNotNull()
}

func (x *ScalarValuePKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Between(exp.NewRangeVal(start, end))
}

func (x *ScalarValuePKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotBetween(exp.NewRangeVal(start, end))
}

func (x *ScalarValueDBQueryBuilder) PK() *ScalarValuePKSafeOperators {
	return &ScalarValuePKSafeOperators{tableName: x.tableName, column: "pb$" + "pk"}
}

type ScalarValueSKSafeOperators struct {
	column    string
	tableName string
}

func (x *ScalarValueSKSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *ScalarValueSKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *ScalarValueSKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt(v)
}

func (x *ScalarValueSKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gte(v)
}

func (x *ScalarValueSKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lt(v)
}

func (x *ScalarValueSKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lte(v)
}

func (x *ScalarValueSKSafeOperators) In(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("FALSE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).In(v)
}

func (x *ScalarValueSKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("TRUE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotIn(v)
}

func (x *ScalarValueSKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNull()
}

func (x *ScalarValueSKSafeOperators) IsNotEmpty() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt("")
}

func (x *ScalarValueSKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNotNull()
}

func (x *ScalarValueSKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Between(exp.NewRangeVal(start, end))
}

func (x *ScalarValueSKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotBetween(exp.NewRangeVal(start, end))
}

func (x *ScalarValueDBQueryBuilder) SK() *ScalarValueSKSafeOperators {
	return &ScalarValueSKSafeOperators{tableName: x.tableName, column: "pb$" + "sk"}
}

type ScalarValueFTSDataSafeOperators struct {
	column    string
	tableName string
}

func (x *ScalarValueFTSDataSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *ScalarValueFTSDataSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *ScalarValueDBQueryBuilder) FTSData() *ScalarValueFTSDataSafeOperators {
	return &ScalarValueFTSDataSafeOperators{tableName: x.tableName, column: "pb$" + "fts_data"}
}

type ScalarValueRepeatedDoubleSafeOperators struct {
	column    string
	tableName string
}

func (x *ScalarValueRepeatedDoubleSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *ScalarValueRepeatedDoubleSafeOperators) Eq(v float64) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

// Overlaps checks if the field contains ANY items in the arg.
// [a, b] && [a] = true, [a, b] && [a, c] = true
func (x *ScalarValueRepeatedDoubleSafeOperators) Overlaps(items ...float64) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? && ?)", idExp, xpq.Array[float64](items))
}

// UnsafeNotOverlaps checks if the field contains NONE items in the arg. It will likely not use an index for this scan.
// NOT ([a, b] && [a]) = false, NOT ([a, b] && [a, c]) = false, NOT ([a, b] && [c]) = true
func (x *ScalarValueRepeatedDoubleSafeOperators) UnsafeNotOverlaps(items ...float64) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("NOT (? && ?)", idExp, xpq.Array[float64](items))
}

// Contains checks if the field contains ALL items in the arg.
// [a, b] @> [a] = true, [a, b] @> [a, c] = false
func (x *ScalarValueRepeatedDoubleSafeOperators) Contains(items ...float64) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? @> ?)", idExp, xpq.Array[float64](items))
}

// UnsafeNotContains checks if the ANY of the ARG is not in the field. It will likely not use an index for this scan.
// NOT ([a, b] @> [a]) = false, NOT ([a, b] @> [a, c]) = true, NOT ([a, b] @> [c]) = true
func (x *ScalarValueRepeatedDoubleSafeOperators) UnsafeNotContains(items ...float64) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("NOT (? @> ?)", idExp, xpq.Array[float64](items))
}

func (x *ScalarValueRepeatedDoubleSafeOperators) IsContainedBy(items ...float64) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? <@ ?)", idExp, xpq.Array[float64](items))
}

func (x *ScalarValueDBQueryBuilder) RepeatedDouble() *ScalarValueRepeatedDoubleSafeOperators {
	return &ScalarValueRepeatedDoubleSafeOperators{tableName: x.tableName, column: "pb$" + "repeated_double"}
}

type ScalarValueRepeatedSfixed32SafeOperators struct {
	column    string
	tableName string
}

func (x *ScalarValueRepeatedSfixed32SafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *ScalarValueRepeatedSfixed32SafeOperators) Eq(v int32) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

// Overlaps checks if the field contains ANY items in the arg.
// [a, b] && [a] = true, [a, b] && [a, c] = true
func (x *ScalarValueRepeatedSfixed32SafeOperators) Overlaps(items ...int32) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? && ?)", idExp, xpq.Array[int32](items))
}

// UnsafeNotOverlaps checks if the field contains NONE items in the arg. It will likely not use an index for this scan.
// NOT ([a, b] && [a]) = false, NOT ([a, b] && [a, c]) = false, NOT ([a, b] && [c]) = true
func (x *ScalarValueRepeatedSfixed32SafeOperators) UnsafeNotOverlaps(items ...int32) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("NOT (? && ?)", idExp, xpq.Array[int32](items))
}

// Contains checks if the field contains ALL items in the arg.
// [a, b] @> [a] = true, [a, b] @> [a, c] = false
func (x *ScalarValueRepeatedSfixed32SafeOperators) Contains(items ...int32) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? @> ?)", idExp, xpq.Array[int32](items))
}

// UnsafeNotContains checks if the ANY of the ARG is not in the field. It will likely not use an index for this scan.
// NOT ([a, b] @> [a]) = false, NOT ([a, b] @> [a, c]) = true, NOT ([a, b] @> [c]) = true
func (x *ScalarValueRepeatedSfixed32SafeOperators) UnsafeNotContains(items ...int32) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("NOT (? @> ?)", idExp, xpq.Array[int32](items))
}

func (x *ScalarValueRepeatedSfixed32SafeOperators) IsContainedBy(items ...int32) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? <@ ?)", idExp, xpq.Array[int32](items))
}

func (x *ScalarValueDBQueryBuilder) RepeatedSfixed32() *ScalarValueRepeatedSfixed32SafeOperators {
	return &ScalarValueRepeatedSfixed32SafeOperators{tableName: x.tableName, column: "pb$" + "repeated_sfixed32"}
}

type ScalarValueRepeatedSfixed64SafeOperators struct {
	column    string
	tableName string
}

func (x *ScalarValueRepeatedSfixed64SafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *ScalarValueRepeatedSfixed64SafeOperators) Eq(v int64) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

// Overlaps checks if the field contains ANY items in the arg.
// [a, b] && [a] = true, [a, b] && [a, c] = true
func (x *ScalarValueRepeatedSfixed64SafeOperators) Overlaps(items ...int64) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? && ?)", idExp, xpq.Array[int64](items))
}

// UnsafeNotOverlaps checks if the field contains NONE items in the arg. It will likely not use an index for this scan.
// NOT ([a, b] && [a]) = false, NOT ([a, b] && [a, c]) = false, NOT ([a, b] && [c]) = true
func (x *ScalarValueRepeatedSfixed64SafeOperators) UnsafeNotOverlaps(items ...int64) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("NOT (? && ?)", idExp, xpq.Array[int64](items))
}

// Contains checks if the field contains ALL items in the arg.
// [a, b] @> [a] = true, [a, b] @> [a, c] = false
func (x *ScalarValueRepeatedSfixed64SafeOperators) Contains(items ...int64) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? @> ?)", idExp, xpq.Array[int64](items))
}

// UnsafeNotContains checks if the ANY of the ARG is not in the field. It will likely not use an index for this scan.
// NOT ([a, b] @> [a]) = false, NOT ([a, b] @> [a, c]) = true, NOT ([a, b] @> [c]) = true
func (x *ScalarValueRepeatedSfixed64SafeOperators) UnsafeNotContains(items ...int64) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("NOT (? @> ?)", idExp, xpq.Array[int64](items))
}

func (x *ScalarValueRepeatedSfixed64SafeOperators) IsContainedBy(items ...int64) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? <@ ?)", idExp, xpq.Array[int64](items))
}

func (x *ScalarValueDBQueryBuilder) RepeatedSfixed64() *ScalarValueRepeatedSfixed64SafeOperators {
	return &ScalarValueRepeatedSfixed64SafeOperators{tableName: x.tableName, column: "pb$" + "repeated_sfixed64"}
}

type ScalarValueRepeatedBytesSafeOperators struct {
	column    string
	tableName string
}

func (x *ScalarValueRepeatedBytesSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *ScalarValueRepeatedBytesSafeOperators) Eq(v []byte) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

// Overlaps checks if the field contains ANY items in the arg.
// [a, b] && [a] = true, [a, b] && [a, c] = true
func (x *ScalarValueRepeatedBytesSafeOperators) Overlaps(items ...[]byte) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? && ?)", idExp, xpq.Array[[]byte](items))
}

// UnsafeNotOverlaps checks if the field contains NONE items in the arg. It will likely not use an index for this scan.
// NOT ([a, b] && [a]) = false, NOT ([a, b] && [a, c]) = false, NOT ([a, b] && [c]) = true
func (x *ScalarValueRepeatedBytesSafeOperators) UnsafeNotOverlaps(items ...[]byte) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("NOT (? && ?)", idExp, xpq.Array[[]byte](items))
}

// Contains checks if the field contains ALL items in the arg.
// [a, b] @> [a] = true, [a, b] @> [a, c] = false
func (x *ScalarValueRepeatedBytesSafeOperators) Contains(items ...[]byte) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? @> ?)", idExp, xpq.Array[[]byte](items))
}

// UnsafeNotContains checks if the ANY of the ARG is not in the field. It will likely not use an index for this scan.
// NOT ([a, b] @> [a]) = false, NOT ([a, b] @> [a, c]) = true, NOT ([a, b] @> [c]) = true
func (x *ScalarValueRepeatedBytesSafeOperators) UnsafeNotContains(items ...[]byte) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("NOT (? @> ?)", idExp, xpq.Array[[]byte](items))
}

func (x *ScalarValueRepeatedBytesSafeOperators) IsContainedBy(items ...[]byte) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? <@ ?)", idExp, xpq.Array[[]byte](items))
}

func (x *ScalarValueDBQueryBuilder) RepeatedBytes() *ScalarValueRepeatedBytesSafeOperators {
	return &ScalarValueRepeatedBytesSafeOperators{tableName: x.tableName, column: "pb$" + "repeated_bytes"}
}

type ScalarValueStringMapSafeOperators struct {
	column    string
	tableName string
}

func (x *ScalarValueStringMapSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *ScalarValueStringMapSafeOperators) Eq(v any) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *ScalarValueStringMapSafeOperators) ObjectContainsRaw(obj exp.Expression) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? @> ?)", idExp, obj)
}

func (x *ScalarValueStringMapSafeOperators) ObjectContains(obj interface{}) (exp.Expression, error) {
	var err error
	var data []byte

	pm, ok := obj.(proto.Message)
	if ok {
		data, err = protojson.Marshal(pm)
	} else {
		data, err = json.Marshal(obj)
	}
	if err != nil {
		return nil, err
	}

	return x.ObjectContainsRaw(exp.NewLiteralExpression("?::jsonb", string(data))), nil
}

func (x *ScalarValueStringMapSafeOperators) ObjectPathExistsRaw(path exp.Expression) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("@?"), path)
}
func (x *ScalarValueStringMapSafeOperators) ObjectPathExists(path string) exp.Expression {
	return x.ObjectPathExistsRaw(exp.NewLiteralExpression("?", path))
}

func (x *ScalarValueStringMapSafeOperators) ObjectPathRaw(path exp.Expression) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("? @@ ?", idExp, exp.NewLiteralExpression("?"), path)
}
func (x *ScalarValueStringMapSafeOperators) ObjectPath(path string) exp.Expression {
	return x.ObjectPathRaw(exp.NewLiteralExpression("?", path))
}

func (x *ScalarValueStringMapSafeOperators) ObjectKeyExistsRaw(key exp.Expression) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("? ? ?", idExp, exp.NewLiteralExpression("?"), key)
}
func (x *ScalarValueStringMapSafeOperators) ObjectKeyExists(key string) exp.Expression {
	return x.ObjectKeyExistsRaw(exp.NewLiteralExpression("?", key))
}

func (x *ScalarValueStringMapSafeOperators) ObjectAnyKeyExistsRaw(keys exp.Expression) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("?|"), keys)
}
func (x *ScalarValueStringMapSafeOperators) ObjectAnyKeyExists(keys ...string) exp.Expression {
	return x.ObjectAnyKeyExistsRaw(exp.NewLiteralExpression("?", xpq.StringArray(keys)))
}

func (x *ScalarValueStringMapSafeOperators) ObjectAllKeyExistsRaw(keys exp.Expression) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.column)
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("?&"), keys)
}
func (x *ScalarValueStringMapSafeOperators) ObjectAllKeyExists(keys ...string) exp.Expression {
	return x.ObjectAllKeyExistsRaw(exp.NewLiteralExpression("?", xpq.StringArray(keys)))
}

func (x *ScalarValueDBQueryBuilder) StringMap() *ScalarValueStringMapSafeOperators {
	return &ScalarValueStringMapSafeOperators{tableName: x.tableName, column: "pb$" + "string_map"}
}

type ScalarValueTenantIdQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) TenantId() *ScalarValueTenantIdQueryType {
	return &ScalarValueTenantIdQueryType{tableName: x.tableName, column: "pb$" + "tenant_id"}
}

func (x *ScalarValueTenantIdQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValuePKSKQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) PKSK() *ScalarValuePKSKQueryType {
	return &ScalarValuePKSKQueryType{tableName: x.tableName, column: "pb$" + "pksk"}
}

func (x *ScalarValuePKSKQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValuePKQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) PK() *ScalarValuePKQueryType {
	return &ScalarValuePKQueryType{tableName: x.tableName, column: "pb$" + "pk"}
}

func (x *ScalarValuePKQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueSKQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) SK() *ScalarValueSKQueryType {
	return &ScalarValueSKQueryType{tableName: x.tableName, column: "pb$" + "sk"}
}

func (x *ScalarValueSKQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueFTSDataQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) FTSData() *ScalarValueFTSDataQueryType {
	return &ScalarValueFTSDataQueryType{tableName: x.tableName, column: "pb$" + "fts_data"}
}

func (x *ScalarValueFTSDataQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValuePBDataQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) PBData() *ScalarValuePBDataQueryType {
	return &ScalarValuePBDataQueryType{tableName: x.tableName, column: "pb$" + "pb_data"}
}

func (x *ScalarValuePBDataQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueIdQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) Id() *ScalarValueIdQueryType {
	return &ScalarValueIdQueryType{tableName: x.tableName, column: "pb$" + "id"}
}

func (x *ScalarValueIdQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueDoubleQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) Double() *ScalarValueDoubleQueryType {
	return &ScalarValueDoubleQueryType{tableName: x.tableName, column: "pb$" + "double"}
}

func (x *ScalarValueDoubleQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueFloatQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) Float() *ScalarValueFloatQueryType {
	return &ScalarValueFloatQueryType{tableName: x.tableName, column: "pb$" + "float"}
}

func (x *ScalarValueFloatQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueInt32QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) Int32() *ScalarValueInt32QueryType {
	return &ScalarValueInt32QueryType{tableName: x.tableName, column: "pb$" + "int_32"}
}

func (x *ScalarValueInt32QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueInt64QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) Int64() *ScalarValueInt64QueryType {
	return &ScalarValueInt64QueryType{tableName: x.tableName, column: "pb$" + "int_64"}
}

func (x *ScalarValueInt64QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueUint32QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) Uint32() *ScalarValueUint32QueryType {
	return &ScalarValueUint32QueryType{tableName: x.tableName, column: "pb$" + "uint_32"}
}

func (x *ScalarValueUint32QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueUint64QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) Uint64() *ScalarValueUint64QueryType {
	return &ScalarValueUint64QueryType{tableName: x.tableName, column: "pb$" + "uint_64"}
}

func (x *ScalarValueUint64QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueSint32QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) Sint32() *ScalarValueSint32QueryType {
	return &ScalarValueSint32QueryType{tableName: x.tableName, column: "pb$" + "sint_32"}
}

func (x *ScalarValueSint32QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueSint64QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) Sint64() *ScalarValueSint64QueryType {
	return &ScalarValueSint64QueryType{tableName: x.tableName, column: "pb$" + "sint_64"}
}

func (x *ScalarValueSint64QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueFixed32QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) Fixed32() *ScalarValueFixed32QueryType {
	return &ScalarValueFixed32QueryType{tableName: x.tableName, column: "pb$" + "fixed_32"}
}

func (x *ScalarValueFixed32QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueFixed64QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) Fixed64() *ScalarValueFixed64QueryType {
	return &ScalarValueFixed64QueryType{tableName: x.tableName, column: "pb$" + "fixed_64"}
}

func (x *ScalarValueFixed64QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueSfixed32QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) Sfixed32() *ScalarValueSfixed32QueryType {
	return &ScalarValueSfixed32QueryType{tableName: x.tableName, column: "pb$" + "sfixed_32"}
}

func (x *ScalarValueSfixed32QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueSfixed64QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) Sfixed64() *ScalarValueSfixed64QueryType {
	return &ScalarValueSfixed64QueryType{tableName: x.tableName, column: "pb$" + "sfixed_64"}
}

func (x *ScalarValueSfixed64QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueBoolQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) Bool() *ScalarValueBoolQueryType {
	return &ScalarValueBoolQueryType{tableName: x.tableName, column: "pb$" + "bool"}
}

func (x *ScalarValueBoolQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueString_QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) String_() *ScalarValueString_QueryType {
	return &ScalarValueString_QueryType{tableName: x.tableName, column: "pb$" + "string"}
}

func (x *ScalarValueString_QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueBytesQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) Bytes() *ScalarValueBytesQueryType {
	return &ScalarValueBytesQueryType{tableName: x.tableName, column: "pb$" + "bytes"}
}

func (x *ScalarValueBytesQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueRepeatedDoubleQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) RepeatedDouble() *ScalarValueRepeatedDoubleQueryType {
	return &ScalarValueRepeatedDoubleQueryType{tableName: x.tableName, column: "pb$" + "repeated_double"}
}

func (x *ScalarValueRepeatedDoubleQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueRepeatedFloatQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) RepeatedFloat() *ScalarValueRepeatedFloatQueryType {
	return &ScalarValueRepeatedFloatQueryType{tableName: x.tableName, column: "pb$" + "repeated_float"}
}

func (x *ScalarValueRepeatedFloatQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueRepeatedInt32QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) RepeatedInt32() *ScalarValueRepeatedInt32QueryType {
	return &ScalarValueRepeatedInt32QueryType{tableName: x.tableName, column: "pb$" + "repeated_int32"}
}

func (x *ScalarValueRepeatedInt32QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueRepeatedInt64QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) RepeatedInt64() *ScalarValueRepeatedInt64QueryType {
	return &ScalarValueRepeatedInt64QueryType{tableName: x.tableName, column: "pb$" + "repeated_int64"}
}

func (x *ScalarValueRepeatedInt64QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueRepeatedUint32QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) RepeatedUint32() *ScalarValueRepeatedUint32QueryType {
	return &ScalarValueRepeatedUint32QueryType{tableName: x.tableName, column: "pb$" + "repeated_uint32"}
}

func (x *ScalarValueRepeatedUint32QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueRepeatedUint64QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) RepeatedUint64() *ScalarValueRepeatedUint64QueryType {
	return &ScalarValueRepeatedUint64QueryType{tableName: x.tableName, column: "pb$" + "repeated_uint64"}
}

func (x *ScalarValueRepeatedUint64QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueRepeatedSint32QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) RepeatedSint32() *ScalarValueRepeatedSint32QueryType {
	return &ScalarValueRepeatedSint32QueryType{tableName: x.tableName, column: "pb$" + "repeated_sint32"}
}

func (x *ScalarValueRepeatedSint32QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueRepeatedSint64QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) RepeatedSint64() *ScalarValueRepeatedSint64QueryType {
	return &ScalarValueRepeatedSint64QueryType{tableName: x.tableName, column: "pb$" + "repeated_sint64"}
}

func (x *ScalarValueRepeatedSint64QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueRepeatedFixed32QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) RepeatedFixed32() *ScalarValueRepeatedFixed32QueryType {
	return &ScalarValueRepeatedFixed32QueryType{tableName: x.tableName, column: "pb$" + "repeated_fixed32"}
}

func (x *ScalarValueRepeatedFixed32QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueRepeatedFixed64QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) RepeatedFixed64() *ScalarValueRepeatedFixed64QueryType {
	return &ScalarValueRepeatedFixed64QueryType{tableName: x.tableName, column: "pb$" + "repeated_fixed64"}
}

func (x *ScalarValueRepeatedFixed64QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueRepeatedSfixed32QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) RepeatedSfixed32() *ScalarValueRepeatedSfixed32QueryType {
	return &ScalarValueRepeatedSfixed32QueryType{tableName: x.tableName, column: "pb$" + "repeated_sfixed32"}
}

func (x *ScalarValueRepeatedSfixed32QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueRepeatedSfixed64QueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) RepeatedSfixed64() *ScalarValueRepeatedSfixed64QueryType {
	return &ScalarValueRepeatedSfixed64QueryType{tableName: x.tableName, column: "pb$" + "repeated_sfixed64"}
}

func (x *ScalarValueRepeatedSfixed64QueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueRepeatedBoolQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) RepeatedBool() *ScalarValueRepeatedBoolQueryType {
	return &ScalarValueRepeatedBoolQueryType{tableName: x.tableName, column: "pb$" + "repeated_bool"}
}

func (x *ScalarValueRepeatedBoolQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueRepeatedStringQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) RepeatedString() *ScalarValueRepeatedStringQueryType {
	return &ScalarValueRepeatedStringQueryType{tableName: x.tableName, column: "pb$" + "repeated_string"}
}

func (x *ScalarValueRepeatedStringQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueRepeatedBytesQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) RepeatedBytes() *ScalarValueRepeatedBytesQueryType {
	return &ScalarValueRepeatedBytesQueryType{tableName: x.tableName, column: "pb$" + "repeated_bytes"}
}

func (x *ScalarValueRepeatedBytesQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueRepeatedEnumQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) RepeatedEnum() *ScalarValueRepeatedEnumQueryType {
	return &ScalarValueRepeatedEnumQueryType{tableName: x.tableName, column: "pb$" + "repeated_enum"}
}

func (x *ScalarValueRepeatedEnumQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueStringMapQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) StringMap() *ScalarValueStringMapQueryType {
	return &ScalarValueStringMapQueryType{tableName: x.tableName, column: "pb$" + "string_map"}
}

func (x *ScalarValueStringMapQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueCreatedAtQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) CreatedAt() *ScalarValueCreatedAtQueryType {
	return &ScalarValueCreatedAtQueryType{tableName: x.tableName, column: "pb$" + "created_at"}
}

func (x *ScalarValueCreatedAtQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueStrPtrQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) StrPtr() *ScalarValueStrPtrQueryType {
	return &ScalarValueStrPtrQueryType{tableName: x.tableName, column: "pb$" + "str_ptr"}
}

func (x *ScalarValueStrPtrQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type ScalarValueBoolPtrQueryType struct {
	column    string
	tableName string
}

func (x *ScalarValueDBQueryUnsafe) BoolPtr() *ScalarValueBoolPtrQueryType {
	return &ScalarValueBoolPtrQueryType{tableName: x.tableName, column: "pb$" + "bool_ptr"}
}

func (x *ScalarValueBoolPtrQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *ScalarValueDBColumns) WithTable(t string) *ScalarValueDBColumns {
	return &ScalarValueDBColumns{tableName: t}
}

func (x *ScalarValueDBColumns) TenantId() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "tenant_id")
}

func (x *ScalarValueDBColumns) PKSK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pksk")
}

func (x *ScalarValueDBColumns) PK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pk")
}

func (x *ScalarValueDBColumns) SK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "sk")
}

func (x *ScalarValueDBColumns) FTSData() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "fts_data")
}

func (x *ScalarValueDBColumns) PBData() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pb_data")
}

func (x *ScalarValueDBColumns) Id() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "id")
}

func (x *ScalarValueDBColumns) Double() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "double")
}

func (x *ScalarValueDBColumns) Float() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "float")
}

func (x *ScalarValueDBColumns) Int32() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "int_32")
}

func (x *ScalarValueDBColumns) Int64() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "int_64")
}

func (x *ScalarValueDBColumns) Uint32() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "uint_32")
}

func (x *ScalarValueDBColumns) Uint64() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "uint_64")
}

func (x *ScalarValueDBColumns) Sint32() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "sint_32")
}

func (x *ScalarValueDBColumns) Sint64() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "sint_64")
}

func (x *ScalarValueDBColumns) Fixed32() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "fixed_32")
}

func (x *ScalarValueDBColumns) Fixed64() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "fixed_64")
}

func (x *ScalarValueDBColumns) Sfixed32() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "sfixed_32")
}

func (x *ScalarValueDBColumns) Sfixed64() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "sfixed_64")
}

func (x *ScalarValueDBColumns) Bool() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "bool")
}

func (x *ScalarValueDBColumns) String_() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "string")
}

func (x *ScalarValueDBColumns) Bytes() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "bytes")
}

func (x *ScalarValueDBColumns) RepeatedDouble() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_double")
}

func (x *ScalarValueDBColumns) RepeatedFloat() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_float")
}

func (x *ScalarValueDBColumns) RepeatedInt32() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_int32")
}

func (x *ScalarValueDBColumns) RepeatedInt64() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_int64")
}

func (x *ScalarValueDBColumns) RepeatedUint32() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_uint32")
}

func (x *ScalarValueDBColumns) RepeatedUint64() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_uint64")
}

func (x *ScalarValueDBColumns) RepeatedSint32() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_sint32")
}

func (x *ScalarValueDBColumns) RepeatedSint64() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_sint64")
}

func (x *ScalarValueDBColumns) RepeatedFixed32() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_fixed32")
}

func (x *ScalarValueDBColumns) RepeatedFixed64() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_fixed64")
}

func (x *ScalarValueDBColumns) RepeatedSfixed32() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_sfixed32")
}

func (x *ScalarValueDBColumns) RepeatedSfixed64() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_sfixed64")
}

func (x *ScalarValueDBColumns) RepeatedBool() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_bool")
}

func (x *ScalarValueDBColumns) RepeatedString() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_string")
}

func (x *ScalarValueDBColumns) RepeatedBytes() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_bytes")
}

func (x *ScalarValueDBColumns) RepeatedEnum() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_enum")
}

func (x *ScalarValueDBColumns) StringMap() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "string_map")
}

func (x *ScalarValueDBColumns) CreatedAt() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "created_at")
}

func (x *ScalarValueDBColumns) StrPtr() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "str_ptr")
}

func (x *ScalarValueDBColumns) BoolPtr() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "bool_ptr")
}

type pgdbDescriptorEBook struct {
	dialect pgdb_v1.Dialect
}

var (
	instancepgdbDescriptorEBook    pgdb_v1.Descriptor = &pgdbDescriptorEBook{}
	instancepgdbDescriptorEBookV17 pgdb_v1.Descriptor = &pgdbDescriptorEBook{dialect: pgdb_v1.DialectV17}
)

func (d *pgdbDescriptorEBook) Dialect() pgdb_v1.Dialect {
	return pgdb_v1.DialectOrDefault(d.dialect)
}

func (d *pgdbDescriptorEBook) TableName() string {
	return "pb_e_book_models_animals_v1_a344683d"
}

func (d *pgdbDescriptorEBook) IsPartitioned() bool {
	return false
}

func (d *pgdbDescriptorEBook) IsPartitionedByCreatedAt() bool {
	return false
}

func (d *pgdbDescriptorEBook) GetPartitionedByKsuidFieldName() string {
	return ""
}

func (d *pgdbDescriptorEBook) GetPartitionDateRange() pgdb_v1.MessageOptions_PartitionedByDateRange {
	return pgdb_v1.MessageOptions_PARTITIONED_BY_DATE_RANGE_UNSPECIFIED
}

func (d *pgdbDescriptorEBook) Fields(opts ...pgdb_v1.DescriptorFieldOptionFunc) []*pgdb_v1.Column {
	df := pgdb_v1.NewDescriptorFieldOption(opts)
	_ = df

	rv := make([]*pgdb_v1.Column, 0)

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("size"),
		Type:               "int8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "0",
		Collation:          "",
	})

	return rv
}

func (d *pgdbDescriptorEBook) PKSKField() *pgdb_v1.Column {
	var collation string
	switch d.Dialect() {
	case pgdb_v1.DialectV17:
		collation = "C"
	default:
	}
	return &pgdb_v1.Column{
		Table:     "pb_e_book_models_animals_v1_a344683d",
		Name:      "pb$pksk",
		Type:      "varchar",
		Collation: collation,
	}
}

func (d *pgdbDescriptorEBook) DataField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Table: "pb_e_book_models_animals_v1_a344683d", Name: "pb$pb_data", Type: "bytea"}
}

func (d *pgdbDescriptorEBook) SearchField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Table: "pb_e_book_models_animals_v1_a344683d", Name: "pb$fts_data", Type: "tsvector"}
}

func (d *pgdbDescriptorEBook) VersioningField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Table: "pb_e_book_models_animals_v1_a344683d", Name: "pb$", Type: "timestamptz"}
}

func (d *pgdbDescriptorEBook) TenantField() *pgdb_v1.Column {
	var collation string
	switch d.Dialect() {
	case pgdb_v1.DialectV17:
		collation = "C"
	default:
	}
	return &pgdb_v1.Column{
		Table:     "pb_e_book_models_animals_v1_a344683d",
		Name:      "pb$tenant_id",
		Type:      "varchar",
		Collation: collation,
	}
}

func (d *pgdbDescriptorEBook) IndexPrimaryKey(opts ...pgdb_v1.IndexOptionsFunc) *pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io

	return nil

}

func (d *pgdbDescriptorEBook) Indexes(opts ...pgdb_v1.IndexOptionsFunc) []*pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io
	rv := make([]*pgdb_v1.Index, 0)

	return rv
}

func (d *pgdbDescriptorEBook) Statistics(opts ...pgdb_v1.StatisticOptionsFunc) []*pgdb_v1.Statistic {
	io := pgdb_v1.NewStatisticOption(opts)
	_ = io
	rv := make([]*pgdb_v1.Statistic, 0)

	return rv
}

type pgdbMessageEBook struct {
	self    *EBook
	dialect pgdb_v1.Dialect
}

func (dbr *EBook) DBReflect(dialect pgdb_v1.Dialect) pgdb_v1.Message {
	return &pgdbMessageEBook{
		self:    dbr,
		dialect: dialect,
	}
}

func (m *pgdbMessageEBook) Descriptor() pgdb_v1.Descriptor {
	switch m.Dialect() {
	case pgdb_v1.DialectV17:
		return instancepgdbDescriptorEBookV17
	default:
		return instancepgdbDescriptorEBook
	}
}

func (m *pgdbMessageEBook) Record(opts ...pgdb_v1.RecordOptionsFunc) (exp.Record, error) {
	ro := pgdb_v1.NewRecordOptions(opts)
	_ = ro
	nullExp := exp.NewLiteralExpression("NULL")
	_ = nullExp

	rv := exp.Record{}

	v1 := int64(m.self.GetSize())

	if ro.Nulled {
		rv[ro.ColumnName("size")] = nullExp
	} else {
		rv[ro.ColumnName("size")] = v1
	}

	return rv, nil
}

func (m *pgdbMessageEBook) SearchData(opts ...pgdb_v1.RecordOptionsFunc) []*pgdb_v1.SearchContent {
	rv := []*pgdb_v1.SearchContent{}

	return rv
}

func (m *pgdbMessageEBook) Dialect() pgdb_v1.Dialect {
	return pgdb_v1.DialectOrDefault(m.dialect)
}

type EBookDB struct {
	tableName string
}

type EBookDBQueryBuilder struct {
	tableName string
}

type EBookDBQueryUnsafe struct {
	tableName string
}

type EBookDBColumns struct {
	tableName string
}

func (x *EBook) DB() *EBookDB {
	return &EBookDB{tableName: x.DBReflect(pgdb_v1.DialectUnspecified).Descriptor().TableName()}
}

func (x *EBookDB) TableName() string {
	return x.tableName
}

func (x *EBookDB) Query() *EBookDBQueryBuilder {
	return &EBookDBQueryBuilder{tableName: x.tableName}
}

func (x *EBookDB) Columns() *EBookDBColumns {
	return &EBookDBColumns{tableName: x.tableName}
}

func (x *EBookDB) WithTable(t string) *EBookDB {
	return &EBookDB{tableName: t}
}

func (x *EBookDBQueryBuilder) WithTable(t string) *EBookDBQueryBuilder {
	return &EBookDBQueryBuilder{tableName: t}
}

func (x *EBookDBQueryBuilder) Unsafe() *EBookDBQueryUnsafe {
	return &EBookDBQueryUnsafe{tableName: x.tableName}
}

type EBookSizeQueryType struct {
	column    string
	tableName string
}

func (x *EBookDBQueryUnsafe) Size() *EBookSizeQueryType {
	return &EBookSizeQueryType{tableName: x.tableName, column: "pb$" + "size"}
}

func (x *EBookSizeQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *EBookDBColumns) WithTable(t string) *EBookDBColumns {
	return &EBookDBColumns{tableName: t}
}

func (x *EBookDBColumns) Size() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "size")
}

type pgdbDescriptorPaperBook struct {
	dialect pgdb_v1.Dialect
}

var (
	instancepgdbDescriptorPaperBook    pgdb_v1.Descriptor = &pgdbDescriptorPaperBook{}
	instancepgdbDescriptorPaperBookV17 pgdb_v1.Descriptor = &pgdbDescriptorPaperBook{dialect: pgdb_v1.DialectV17}
)

func (d *pgdbDescriptorPaperBook) Dialect() pgdb_v1.Dialect {
	return pgdb_v1.DialectOrDefault(d.dialect)
}

func (d *pgdbDescriptorPaperBook) TableName() string {
	return "pb_paper_book_models_animals_v1_ba82559d"
}

func (d *pgdbDescriptorPaperBook) IsPartitioned() bool {
	return false
}

func (d *pgdbDescriptorPaperBook) IsPartitionedByCreatedAt() bool {
	return false
}

func (d *pgdbDescriptorPaperBook) GetPartitionedByKsuidFieldName() string {
	return ""
}

func (d *pgdbDescriptorPaperBook) GetPartitionDateRange() pgdb_v1.MessageOptions_PartitionedByDateRange {
	return pgdb_v1.MessageOptions_PARTITIONED_BY_DATE_RANGE_UNSPECIFIED
}

func (d *pgdbDescriptorPaperBook) Fields(opts ...pgdb_v1.DescriptorFieldOptionFunc) []*pgdb_v1.Column {
	df := pgdb_v1.NewDescriptorFieldOption(opts)
	_ = df

	rv := make([]*pgdb_v1.Column, 0)

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("pages"),
		Type:               "int4",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "0",
		Collation:          "",
	})

	return rv
}

func (d *pgdbDescriptorPaperBook) PKSKField() *pgdb_v1.Column {
	var collation string
	switch d.Dialect() {
	case pgdb_v1.DialectV17:
		collation = "C"
	default:
	}
	return &pgdb_v1.Column{
		Table:     "pb_paper_book_models_animals_v1_ba82559d",
		Name:      "pb$pksk",
		Type:      "varchar",
		Collation: collation,
	}
}

func (d *pgdbDescriptorPaperBook) DataField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Table: "pb_paper_book_models_animals_v1_ba82559d", Name: "pb$pb_data", Type: "bytea"}
}

func (d *pgdbDescriptorPaperBook) SearchField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Table: "pb_paper_book_models_animals_v1_ba82559d", Name: "pb$fts_data", Type: "tsvector"}
}

func (d *pgdbDescriptorPaperBook) VersioningField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Table: "pb_paper_book_models_animals_v1_ba82559d", Name: "pb$", Type: "timestamptz"}
}

func (d *pgdbDescriptorPaperBook) TenantField() *pgdb_v1.Column {
	var collation string
	switch d.Dialect() {
	case pgdb_v1.DialectV17:
		collation = "C"
	default:
	}
	return &pgdb_v1.Column{
		Table:     "pb_paper_book_models_animals_v1_ba82559d",
		Name:      "pb$tenant_id",
		Type:      "varchar",
		Collation: collation,
	}
}

func (d *pgdbDescriptorPaperBook) IndexPrimaryKey(opts ...pgdb_v1.IndexOptionsFunc) *pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io

	return nil

}

func (d *pgdbDescriptorPaperBook) Indexes(opts ...pgdb_v1.IndexOptionsFunc) []*pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io
	rv := make([]*pgdb_v1.Index, 0)

	return rv
}

func (d *pgdbDescriptorPaperBook) Statistics(opts ...pgdb_v1.StatisticOptionsFunc) []*pgdb_v1.Statistic {
	io := pgdb_v1.NewStatisticOption(opts)
	_ = io
	rv := make([]*pgdb_v1.Statistic, 0)

	return rv
}

type pgdbMessagePaperBook struct {
	self    *PaperBook
	dialect pgdb_v1.Dialect
}

func (dbr *PaperBook) DBReflect(dialect pgdb_v1.Dialect) pgdb_v1.Message {
	return &pgdbMessagePaperBook{
		self:    dbr,
		dialect: dialect,
	}
}

func (m *pgdbMessagePaperBook) Descriptor() pgdb_v1.Descriptor {
	switch m.Dialect() {
	case pgdb_v1.DialectV17:
		return instancepgdbDescriptorPaperBookV17
	default:
		return instancepgdbDescriptorPaperBook
	}
}

func (m *pgdbMessagePaperBook) Record(opts ...pgdb_v1.RecordOptionsFunc) (exp.Record, error) {
	ro := pgdb_v1.NewRecordOptions(opts)
	_ = ro
	nullExp := exp.NewLiteralExpression("NULL")
	_ = nullExp

	rv := exp.Record{}

	v1 := int32(m.self.GetPages())

	if ro.Nulled {
		rv[ro.ColumnName("pages")] = nullExp
	} else {
		rv[ro.ColumnName("pages")] = v1
	}

	return rv, nil
}

func (m *pgdbMessagePaperBook) SearchData(opts ...pgdb_v1.RecordOptionsFunc) []*pgdb_v1.SearchContent {
	rv := []*pgdb_v1.SearchContent{}

	return rv
}

func (m *pgdbMessagePaperBook) Dialect() pgdb_v1.Dialect {
	return pgdb_v1.DialectOrDefault(m.dialect)
}

type PaperBookDB struct {
	tableName string
}

type PaperBookDBQueryBuilder struct {
	tableName string
}

type PaperBookDBQueryUnsafe struct {
	tableName string
}

type PaperBookDBColumns struct {
	tableName string
}

func (x *PaperBook) DB() *PaperBookDB {
	return &PaperBookDB{tableName: x.DBReflect(pgdb_v1.DialectUnspecified).Descriptor().TableName()}
}

func (x *PaperBookDB) TableName() string {
	return x.tableName
}

func (x *PaperBookDB) Query() *PaperBookDBQueryBuilder {
	return &PaperBookDBQueryBuilder{tableName: x.tableName}
}

func (x *PaperBookDB) Columns() *PaperBookDBColumns {
	return &PaperBookDBColumns{tableName: x.tableName}
}

func (x *PaperBookDB) WithTable(t string) *PaperBookDB {
	return &PaperBookDB{tableName: t}
}

func (x *PaperBookDBQueryBuilder) WithTable(t string) *PaperBookDBQueryBuilder {
	return &PaperBookDBQueryBuilder{tableName: t}
}

func (x *PaperBookDBQueryBuilder) Unsafe() *PaperBookDBQueryUnsafe {
	return &PaperBookDBQueryUnsafe{tableName: x.tableName}
}

type PaperBookPagesQueryType struct {
	column    string
	tableName string
}

func (x *PaperBookDBQueryUnsafe) Pages() *PaperBookPagesQueryType {
	return &PaperBookPagesQueryType{tableName: x.tableName, column: "pb$" + "pages"}
}

func (x *PaperBookPagesQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *PaperBookDBColumns) WithTable(t string) *PaperBookDBColumns {
	return &PaperBookDBColumns{tableName: t}
}

func (x *PaperBookDBColumns) Pages() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pages")
}

type pgdbDescriptorBook struct {
	dialect pgdb_v1.Dialect
}

var (
	instancepgdbDescriptorBook    pgdb_v1.Descriptor = &pgdbDescriptorBook{}
	instancepgdbDescriptorBookV17 pgdb_v1.Descriptor = &pgdbDescriptorBook{dialect: pgdb_v1.DialectV17}
)

func (d *pgdbDescriptorBook) Dialect() pgdb_v1.Dialect {
	return pgdb_v1.DialectOrDefault(d.dialect)
}

func (d *pgdbDescriptorBook) TableName() string {
	return "pb_book_models_animals_v1_d871ffce"
}

func (d *pgdbDescriptorBook) IsPartitioned() bool {
	return false
}

func (d *pgdbDescriptorBook) IsPartitionedByCreatedAt() bool {
	return false
}

func (d *pgdbDescriptorBook) GetPartitionedByKsuidFieldName() string {
	return ""
}

func (d *pgdbDescriptorBook) GetPartitionDateRange() pgdb_v1.MessageOptions_PartitionedByDateRange {
	return pgdb_v1.MessageOptions_PARTITIONED_BY_DATE_RANGE_UNSPECIFIED
}

func (d *pgdbDescriptorBook) Fields(opts ...pgdb_v1.DescriptorFieldOptionFunc) []*pgdb_v1.Column {
	df := pgdb_v1.NewDescriptorFieldOption(opts)
	_ = df

	rv := make([]*pgdb_v1.Column, 0)

	if !df.IsNested {

		coltenant_idCollation := ""
		coltenant_idOverrideExpression := ""

		switch d.Dialect() {
		case pgdb_v1.DialectV17:
			coltenant_idCollation = "C"

		default:
		}

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("tenant_id"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: coltenant_idOverrideExpression,
			Default:            "",
			Collation:          coltenant_idCollation,
		})

	}

	if !df.IsNested {

		colpkskCollation := ""
		colpkskOverrideExpression := "varchar GENERATED ALWAYS AS (pb$pk || '|' || pb$sk) STORED"

		switch d.Dialect() {
		case pgdb_v1.DialectV17:
			colpkskCollation = "C"
			colpkskOverrideExpression = ""
		default:
		}

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pksk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: colpkskOverrideExpression,
			Default:            "",
			Collation:          colpkskCollation,
		})

	}

	if !df.IsNested {

		colpkCollation := ""
		colpkOverrideExpression := ""

		switch d.Dialect() {
		case pgdb_v1.DialectV17:
			colpkCollation = "C"

		default:
		}

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: colpkOverrideExpression,
			Default:            "",
			Collation:          colpkCollation,
		})

	}

	if !df.IsNested {

		colskCollation := ""
		colskOverrideExpression := ""

		switch d.Dialect() {
		case pgdb_v1.DialectV17:
			colskCollation = "C"

		default:
		}

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("sk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: colskOverrideExpression,
			Default:            "",
			Collation:          colskCollation,
		})

	}

	if !df.IsNested {

		colpkskv2Collation := "C"
		colpkskv2OverrideExpression := ""

		if d.Dialect() != pgdb_v1.DialectV17 {
			rv = append(rv, &pgdb_v1.Column{
				Name:               df.ColumnName("pkskv2"),
				Type:               "varchar",
				Nullable:           df.Nullable(true),
				OverrideExpression: colpkskv2OverrideExpression,
				Default:            "",
				Collation:          colpkskv2Collation,
			})
		}

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("fts_data"),
			Type:               "tsvector",
			Nullable:           df.Nullable(true),
			OverrideExpression: "",
			Default:            "",
			Collation:          "",
		})

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pb_data"),
			Type:               "bytea",
			Nullable:           df.Nullable(false),
			OverrideExpression: "",
			Default:            "",
			Collation:          "",
		})

	}

	colidCollation := ""
	colidOverrideExpression := ""

	switch d.Dialect() {
	case pgdb_v1.DialectV17:
		colidCollation = "C"

	default:
	}

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("id"),
		Type:               "text",
		Nullable:           df.Nullable(false),
		OverrideExpression: colidOverrideExpression,
		Default:            "''",
		Collation:          colidCollation,
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("created_at"),
		Type:               "timestamptz",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("medium_oneof"),
		Type:               "int4",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "0",
		Collation:          "",
	})

	rv = append(rv, ((*PaperBook)(nil)).DBReflect(d.Dialect()).Descriptor().Fields(df.Nested("50$")...)...)

	rv = append(rv, ((*EBook)(nil)).DBReflect(d.Dialect()).Descriptor().Fields(df.Nested("51$")...)...)

	rv = append(rv, ((*Newspaper)(nil)).DBReflect(d.Dialect()).Descriptor().Fields(df.Nested("52$")...)...)

	return rv
}

func (d *pgdbDescriptorBook) PKSKField() *pgdb_v1.Column {
	var collation string
	switch d.Dialect() {
	case pgdb_v1.DialectV17:
		collation = "C"
	default:
	}
	return &pgdb_v1.Column{
		Table:     "pb_book_models_animals_v1_d871ffce",
		Name:      "pb$pksk",
		Type:      "varchar",
		Collation: collation,
	}
}

func (d *pgdbDescriptorBook) DataField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Table: "pb_book_models_animals_v1_d871ffce", Name: "pb$pb_data", Type: "bytea"}
}

func (d *pgdbDescriptorBook) SearchField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Table: "pb_book_models_animals_v1_d871ffce", Name: "pb$fts_data", Type: "tsvector"}
}

func (d *pgdbDescriptorBook) VersioningField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Table: "pb_book_models_animals_v1_d871ffce", Name: "pb$created_at", Type: "timestamptz"}
}

func (d *pgdbDescriptorBook) TenantField() *pgdb_v1.Column {
	var collation string
	switch d.Dialect() {
	case pgdb_v1.DialectV17:
		collation = "C"
	default:
	}
	return &pgdb_v1.Column{
		Table:     "pb_book_models_animals_v1_d871ffce",
		Name:      "pb$tenant_id",
		Type:      "varchar",
		Collation: collation,
	}
}

func (d *pgdbDescriptorBook) IndexPrimaryKey(opts ...pgdb_v1.IndexOptionsFunc) *pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io

	return &pgdb_v1.Index{
		Name:               io.IndexName("pksk_book_models_animals_v1_a25b591a"),
		Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
		IsPrimary:          true,
		IsUnique:           true,
		IsDropped:          false,
		Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pksk")},
		OverrideExpression: "",
	}

}

func (d *pgdbDescriptorBook) Indexes(opts ...pgdb_v1.IndexOptionsFunc) []*pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io
	rv := make([]*pgdb_v1.Index, 0)

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("pksk_book_models_animals_v1_a25b591a"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
			IsPrimary:          true,
			IsUnique:           true,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pksk")},
			OverrideExpression: "",
			WherePredicate:     "",
		})

	}

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("pksk_split_book_models_animals_v1_fc6b6e89"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
			IsPrimary:          false,
			IsUnique:           false,
			IsDropped:          true,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pk"), io.ColumnName("sk")},
			OverrideExpression: "",
			WherePredicate:     "",
		})

	}

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("pksk_split2_book_models_animals_v1_735e1efd"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
			IsPrimary:          false,
			IsUnique:           false,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pk"), io.ColumnName("sk")},
			OverrideExpression: "",
			WherePredicate:     "",
		})

	}

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("fts_data_book_models_animals_v1_6cf7b95a"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE_GIN,
			IsPrimary:          false,
			IsUnique:           false,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("fts_data")},
			OverrideExpression: "",
			WherePredicate:     "",
		})

	}

	return rv
}

func (d *pgdbDescriptorBook) Statistics(opts ...pgdb_v1.StatisticOptionsFunc) []*pgdb_v1.Statistic {
	io := pgdb_v1.NewStatisticOption(opts)
	_ = io
	rv := make([]*pgdb_v1.Statistic, 0)

	return rv
}

type BookMediumType int32

var BookMedium = struct {
	Paper BookMediumType
	Ebook BookMediumType
	News  BookMediumType
}{
	Paper: 50,
	Ebook: 51,
	News:  52,
}

type pgdbMessageBook struct {
	self    *Book
	dialect pgdb_v1.Dialect
}

func (dbr *Book) DBReflect(dialect pgdb_v1.Dialect) pgdb_v1.Message {
	return &pgdbMessageBook{
		self:    dbr,
		dialect: dialect,
	}
}

func (m *pgdbMessageBook) Descriptor() pgdb_v1.Descriptor {
	switch m.Dialect() {
	case pgdb_v1.DialectV17:
		return instancepgdbDescriptorBookV17
	default:
		return instancepgdbDescriptorBook
	}
}

func (m *pgdbMessageBook) Record(opts ...pgdb_v1.RecordOptionsFunc) (exp.Record, error) {
	ro := pgdb_v1.NewRecordOptions(opts)
	_ = ro
	nullExp := exp.NewLiteralExpression("NULL")
	_ = nullExp

	var sb strings.Builder

	rv := exp.Record{}

	if !ro.IsNested {

		cfv0 := strings.ReplaceAll(string(m.self.GetTenantId()), "\u0000", "")

		if ro.Nulled {
			rv[ro.ColumnName("tenant_id")] = nullExp
		} else {
			rv[ro.ColumnName("tenant_id")] = cfv0
		}

	}

	if !ro.IsNested {

	}

	if !ro.IsNested {

		sb.Reset()

		_, _ = sb.WriteString("models_animals_v1_book")

		_, _ = sb.WriteString(":")

		_, _ = sb.WriteString(m.self.GetTenantId())

		_, _ = sb.WriteString(":")

		_, _ = sb.WriteString(m.self.GetId())

		cfv2 := sb.String()

		if ro.Nulled {
			rv[ro.ColumnName("pk")] = nullExp
		} else {
			rv[ro.ColumnName("pk")] = cfv2
		}

	}

	if !ro.IsNested {

		sb.Reset()

		_, _ = sb.WriteString("example")

		cfv3 := sb.String()

		if ro.Nulled {
			rv[ro.ColumnName("sk")] = nullExp
		} else {
			rv[ro.ColumnName("sk")] = cfv3
		}

	}

	if !ro.IsNested {

		if m.Dialect() != pgdb_v1.DialectV17 {

		}

	}

	if !ro.IsNested {

		cfv5tmp := []*pgdb_v1.SearchContent{

			{
				Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_EXACT,
				Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_UNSPECIFIED,
				Value:  m.self.GetId(),
			},
		}

		cfv5tmp = append(cfv5tmp, m.self.GetPaper().DBReflect(m.Dialect()).SearchData()...)

		cfv5tmp = append(cfv5tmp, m.self.GetEbook().DBReflect(m.Dialect()).SearchData()...)

		cfv5tmp = append(cfv5tmp, m.self.GetNews().DBReflect(m.Dialect()).SearchData()...)

		cfv5 := pgdb_v1.FullTextSearchVectors(cfv5tmp)

		if ro.Nulled {
			rv[ro.ColumnName("fts_data")] = nullExp
		} else {
			rv[ro.ColumnName("fts_data")] = cfv5
		}

	}

	if !ro.IsNested {

		cfv6, err := proto.Marshal(m.self)
		if err != nil {
			return nil, err
		}

		if ro.Nulled {
			rv[ro.ColumnName("pb_data")] = nullExp
		} else {
			rv[ro.ColumnName("pb_data")] = cfv6
		}

	}

	v1 := strings.ReplaceAll(string(m.self.GetId()), "\u0000", "")

	if ro.Nulled {
		rv[ro.ColumnName("id")] = nullExp
	} else {
		rv[ro.ColumnName("id")] = v1
	}

	var v2 *time.Time
	if m.self.GetCreatedAt().IsValid() {
		v2tmp := m.self.GetCreatedAt().AsTime()
		v2 = &v2tmp
	}

	if ro.Nulled {
		rv[ro.ColumnName("created_at")] = nullExp
	} else {
		rv[ro.ColumnName("created_at")] = v2
	}

	v3tmp := m.self.GetPaper()
	v3opts := ro.Nested("50$")
	if v3tmp == nil {
		v3opts = append(v3opts, pgdb_v1.RecordOptionNulled(true))
	}

	v3, err := pgdb_v1.MarshalNestedMsgRecord(v3tmp.DBReflect(m.Dialect()), v3opts...)
	if err != nil {
		return nil, err
	}

	for k, v := range v3 {
		if ro.Nulled {
			rv[k] = nullExp
		} else {
			rv[k] = v
		}
	}

	v4tmp := m.self.GetEbook()
	v4opts := ro.Nested("51$")
	if v4tmp == nil {
		v4opts = append(v4opts, pgdb_v1.RecordOptionNulled(true))
	}

	v4, err := pgdb_v1.MarshalNestedMsgRecord(v4tmp.DBReflect(m.Dialect()), v4opts...)
	if err != nil {
		return nil, err
	}

	for k, v := range v4 {
		if ro.Nulled {
			rv[k] = nullExp
		} else {
			rv[k] = v
		}
	}

	v5tmp := m.self.GetNews()
	v5opts := ro.Nested("52$")
	if v5tmp == nil {
		v5opts = append(v5opts, pgdb_v1.RecordOptionNulled(true))
	}

	v5, err := pgdb_v1.MarshalNestedMsgRecord(v5tmp.DBReflect(m.Dialect()), v5opts...)
	if err != nil {
		return nil, err
	}

	for k, v := range v5 {
		if ro.Nulled {
			rv[k] = nullExp
		} else {
			rv[k] = v
		}
	}

	oneof1 := uint32(m.self.WhichMedium())

	if ro.Nulled {
		rv[ro.ColumnName("medium_oneof")] = nullExp
	} else {
		rv[ro.ColumnName("medium_oneof")] = oneof1
	}

	return rv, nil
}

func (m *pgdbMessageBook) SearchData(opts ...pgdb_v1.RecordOptionsFunc) []*pgdb_v1.SearchContent {
	rv := []*pgdb_v1.SearchContent{

		{
			Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_EXACT,
			Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_UNSPECIFIED,
			Value:  m.self.GetId(),
		},
	}

	rv = append(rv, m.self.GetPaper().DBReflect(m.Dialect()).SearchData()...)

	rv = append(rv, m.self.GetEbook().DBReflect(m.Dialect()).SearchData()...)

	rv = append(rv, m.self.GetNews().DBReflect(m.Dialect()).SearchData()...)

	return rv
}

func (m *pgdbMessageBook) Dialect() pgdb_v1.Dialect {
	return pgdb_v1.DialectOrDefault(m.dialect)
}

type BookDB struct {
	tableName string
}

type BookDBQueryBuilder struct {
	tableName string
}

type BookDBQueryUnsafe struct {
	tableName string
}

type BookDBColumns struct {
	tableName string
}

func (x *Book) DB() *BookDB {
	return &BookDB{tableName: x.DBReflect(pgdb_v1.DialectUnspecified).Descriptor().TableName()}
}

func (x *BookDB) TableName() string {
	return x.tableName
}

func (x *BookDB) Query() *BookDBQueryBuilder {
	return &BookDBQueryBuilder{tableName: x.tableName}
}

func (x *BookDB) Columns() *BookDBColumns {
	return &BookDBColumns{tableName: x.tableName}
}

func (x *BookDB) WithTable(t string) *BookDB {
	return &BookDB{tableName: t}
}

func (x *BookDBQueryBuilder) WithTable(t string) *BookDBQueryBuilder {
	return &BookDBQueryBuilder{tableName: t}
}

func (x *BookDBQueryBuilder) Unsafe() *BookDBQueryUnsafe {
	return &BookDBQueryUnsafe{tableName: x.tableName}
}

type BookTenantIdSafeOperators struct {
	column    string
	tableName string
}

func (x *BookTenantIdSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *BookTenantIdSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *BookTenantIdSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt(v)
}

func (x *BookTenantIdSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gte(v)
}

func (x *BookTenantIdSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lt(v)
}

func (x *BookTenantIdSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lte(v)
}

func (x *BookTenantIdSafeOperators) In(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("FALSE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).In(v)
}

func (x *BookTenantIdSafeOperators) NotIn(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("TRUE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotIn(v)
}

func (x *BookTenantIdSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNull()
}

func (x *BookTenantIdSafeOperators) IsNotEmpty() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt("")
}

func (x *BookTenantIdSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNotNull()
}

func (x *BookTenantIdSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Between(exp.NewRangeVal(start, end))
}

func (x *BookTenantIdSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotBetween(exp.NewRangeVal(start, end))
}

func (x *BookDBQueryBuilder) TenantId() *BookTenantIdSafeOperators {
	return &BookTenantIdSafeOperators{tableName: x.tableName, column: "pb$" + "tenant_id"}
}

type BookPKSKSafeOperators struct {
	column    string
	tableName string
}

func (x *BookPKSKSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *BookPKSKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *BookPKSKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt(v)
}

func (x *BookPKSKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gte(v)
}

func (x *BookPKSKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lt(v)
}

func (x *BookPKSKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lte(v)
}

func (x *BookPKSKSafeOperators) In(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("FALSE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).In(v)
}

func (x *BookPKSKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("TRUE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotIn(v)
}

func (x *BookPKSKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNull()
}

func (x *BookPKSKSafeOperators) IsNotEmpty() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt("")
}

func (x *BookPKSKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNotNull()
}

func (x *BookPKSKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Between(exp.NewRangeVal(start, end))
}

func (x *BookPKSKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotBetween(exp.NewRangeVal(start, end))
}

func (x *BookDBQueryBuilder) PKSK() *BookPKSKSafeOperators {
	return &BookPKSKSafeOperators{tableName: x.tableName, column: "pb$" + "pksk"}
}

type BookPKSafeOperators struct {
	column    string
	tableName string
}

func (x *BookPKSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *BookPKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *BookPKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt(v)
}

func (x *BookPKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gte(v)
}

func (x *BookPKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lt(v)
}

func (x *BookPKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lte(v)
}

func (x *BookPKSafeOperators) In(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("FALSE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).In(v)
}

func (x *BookPKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("TRUE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotIn(v)
}

func (x *BookPKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNull()
}

func (x *BookPKSafeOperators) IsNotEmpty() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt("")
}

func (x *BookPKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNotNull()
}

func (x *BookPKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Between(exp.NewRangeVal(start, end))
}

func (x *BookPKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotBetween(exp.NewRangeVal(start, end))
}

func (x *BookDBQueryBuilder) PK() *BookPKSafeOperators {
	return &BookPKSafeOperators{tableName: x.tableName, column: "pb$" + "pk"}
}

type BookSKSafeOperators struct {
	column    string
	tableName string
}

func (x *BookSKSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *BookSKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *BookSKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt(v)
}

func (x *BookSKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gte(v)
}

func (x *BookSKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lt(v)
}

func (x *BookSKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lte(v)
}

func (x *BookSKSafeOperators) In(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("FALSE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).In(v)
}

func (x *BookSKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("TRUE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotIn(v)
}

func (x *BookSKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNull()
}

func (x *BookSKSafeOperators) IsNotEmpty() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt("")
}

func (x *BookSKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNotNull()
}

func (x *BookSKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Between(exp.NewRangeVal(start, end))
}

func (x *BookSKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotBetween(exp.NewRangeVal(start, end))
}

func (x *BookDBQueryBuilder) SK() *BookSKSafeOperators {
	return &BookSKSafeOperators{tableName: x.tableName, column: "pb$" + "sk"}
}

type BookFTSDataSafeOperators struct {
	column    string
	tableName string
}

func (x *BookFTSDataSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *BookFTSDataSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *BookDBQueryBuilder) FTSData() *BookFTSDataSafeOperators {
	return &BookFTSDataSafeOperators{tableName: x.tableName, column: "pb$" + "fts_data"}
}

type BookTenantIdQueryType struct {
	column    string
	tableName string
}

func (x *BookDBQueryUnsafe) TenantId() *BookTenantIdQueryType {
	return &BookTenantIdQueryType{tableName: x.tableName, column: "pb$" + "tenant_id"}
}

func (x *BookTenantIdQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type BookPKSKQueryType struct {
	column    string
	tableName string
}

func (x *BookDBQueryUnsafe) PKSK() *BookPKSKQueryType {
	return &BookPKSKQueryType{tableName: x.tableName, column: "pb$" + "pksk"}
}

func (x *BookPKSKQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type BookPKQueryType struct {
	column    string
	tableName string
}

func (x *BookDBQueryUnsafe) PK() *BookPKQueryType {
	return &BookPKQueryType{tableName: x.tableName, column: "pb$" + "pk"}
}

func (x *BookPKQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type BookSKQueryType struct {
	column    string
	tableName string
}

func (x *BookDBQueryUnsafe) SK() *BookSKQueryType {
	return &BookSKQueryType{tableName: x.tableName, column: "pb$" + "sk"}
}

func (x *BookSKQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type BookFTSDataQueryType struct {
	column    string
	tableName string
}

func (x *BookDBQueryUnsafe) FTSData() *BookFTSDataQueryType {
	return &BookFTSDataQueryType{tableName: x.tableName, column: "pb$" + "fts_data"}
}

func (x *BookFTSDataQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type BookPBDataQueryType struct {
	column    string
	tableName string
}

func (x *BookDBQueryUnsafe) PBData() *BookPBDataQueryType {
	return &BookPBDataQueryType{tableName: x.tableName, column: "pb$" + "pb_data"}
}

func (x *BookPBDataQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type BookIdQueryType struct {
	column    string
	tableName string
}

func (x *BookDBQueryUnsafe) Id() *BookIdQueryType {
	return &BookIdQueryType{tableName: x.tableName, column: "pb$" + "id"}
}

func (x *BookIdQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type BookCreatedAtQueryType struct {
	column    string
	tableName string
}

func (x *BookDBQueryUnsafe) CreatedAt() *BookCreatedAtQueryType {
	return &BookCreatedAtQueryType{tableName: x.tableName, column: "pb$" + "created_at"}
}

func (x *BookCreatedAtQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type BookMediumQueryType struct {
	column    string
	tableName string
}

func (x *BookDBQueryUnsafe) Medium() *BookMediumQueryType {
	return &BookMediumQueryType{tableName: x.tableName, column: "pb$" + "medium_oneof"}
}

func (x *BookMediumQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *BookDBColumns) WithTable(t string) *BookDBColumns {
	return &BookDBColumns{tableName: t}
}

func (x *BookDBColumns) TenantId() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "tenant_id")
}

func (x *BookDBColumns) PKSK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pksk")
}

func (x *BookDBColumns) PK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pk")
}

func (x *BookDBColumns) SK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "sk")
}

func (x *BookDBColumns) FTSData() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "fts_data")
}

func (x *BookDBColumns) PBData() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pb_data")
}

func (x *BookDBColumns) Id() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "id")
}

func (x *BookDBColumns) CreatedAt() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "created_at")
}

func (x *BookDBColumns) Medium() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "medium_oneof")
}

type pgdbDescriptorNewspaper struct {
	dialect pgdb_v1.Dialect
}

var (
	instancepgdbDescriptorNewspaper    pgdb_v1.Descriptor = &pgdbDescriptorNewspaper{}
	instancepgdbDescriptorNewspaperV17 pgdb_v1.Descriptor = &pgdbDescriptorNewspaper{dialect: pgdb_v1.DialectV17}
)

func (d *pgdbDescriptorNewspaper) Dialect() pgdb_v1.Dialect {
	return pgdb_v1.DialectOrDefault(d.dialect)
}

func (d *pgdbDescriptorNewspaper) TableName() string {
	return "pb_newspaper_models_animals_v1_f52e04fd"
}

func (d *pgdbDescriptorNewspaper) IsPartitioned() bool {
	return false
}

func (d *pgdbDescriptorNewspaper) IsPartitionedByCreatedAt() bool {
	return false
}

func (d *pgdbDescriptorNewspaper) GetPartitionedByKsuidFieldName() string {
	return ""
}

func (d *pgdbDescriptorNewspaper) GetPartitionDateRange() pgdb_v1.MessageOptions_PartitionedByDateRange {
	return pgdb_v1.MessageOptions_PARTITIONED_BY_DATE_RANGE_UNSPECIFIED
}

func (d *pgdbDescriptorNewspaper) Fields(opts ...pgdb_v1.DescriptorFieldOptionFunc) []*pgdb_v1.Column {
	df := pgdb_v1.NewDescriptorFieldOption(opts)
	_ = df

	rv := make([]*pgdb_v1.Column, 0)

	if !df.IsNested {

		coltenant_idCollation := ""
		coltenant_idOverrideExpression := ""

		switch d.Dialect() {
		case pgdb_v1.DialectV17:
			coltenant_idCollation = "C"

		default:
		}

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("tenant_id"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: coltenant_idOverrideExpression,
			Default:            "",
			Collation:          coltenant_idCollation,
		})

	}

	if !df.IsNested {

		colpkskCollation := ""
		colpkskOverrideExpression := "varchar GENERATED ALWAYS AS (pb$pk || '|' || pb$sk) STORED"

		switch d.Dialect() {
		case pgdb_v1.DialectV17:
			colpkskCollation = "C"
			colpkskOverrideExpression = ""
		default:
		}

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pksk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: colpkskOverrideExpression,
			Default:            "",
			Collation:          colpkskCollation,
		})

	}

	if !df.IsNested {

		colpkCollation := ""
		colpkOverrideExpression := ""

		switch d.Dialect() {
		case pgdb_v1.DialectV17:
			colpkCollation = "C"

		default:
		}

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: colpkOverrideExpression,
			Default:            "",
			Collation:          colpkCollation,
		})

	}

	if !df.IsNested {

		colskCollation := ""
		colskOverrideExpression := ""

		switch d.Dialect() {
		case pgdb_v1.DialectV17:
			colskCollation = "C"

		default:
		}

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("sk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: colskOverrideExpression,
			Default:            "",
			Collation:          colskCollation,
		})

	}

	if !df.IsNested {

		colpkskv2Collation := "C"
		colpkskv2OverrideExpression := ""

		if d.Dialect() != pgdb_v1.DialectV17 {
			rv = append(rv, &pgdb_v1.Column{
				Name:               df.ColumnName("pkskv2"),
				Type:               "varchar",
				Nullable:           df.Nullable(true),
				OverrideExpression: colpkskv2OverrideExpression,
				Default:            "",
				Collation:          colpkskv2Collation,
			})
		}

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("fts_data"),
			Type:               "tsvector",
			Nullable:           df.Nullable(true),
			OverrideExpression: "",
			Default:            "",
			Collation:          "",
		})

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pb_data"),
			Type:               "bytea",
			Nullable:           df.Nullable(false),
			OverrideExpression: "",
			Default:            "",
			Collation:          "",
		})

	}

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("name"),
		Type:               "text",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
		Default:            "''",
		Collation:          "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("created_at"),
		Type:               "timestamptz",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
		Default:            "",
		Collation:          "",
	})

	return rv
}

func (d *pgdbDescriptorNewspaper) PKSKField() *pgdb_v1.Column {
	var collation string
	switch d.Dialect() {
	case pgdb_v1.DialectV17:
		collation = "C"
	default:
	}
	return &pgdb_v1.Column{
		Table:     "pb_newspaper_models_animals_v1_f52e04fd",
		Name:      "pb$pksk",
		Type:      "varchar",
		Collation: collation,
	}
}

func (d *pgdbDescriptorNewspaper) DataField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Table: "pb_newspaper_models_animals_v1_f52e04fd", Name: "pb$pb_data", Type: "bytea"}
}

func (d *pgdbDescriptorNewspaper) SearchField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Table: "pb_newspaper_models_animals_v1_f52e04fd", Name: "pb$fts_data", Type: "tsvector"}
}

func (d *pgdbDescriptorNewspaper) VersioningField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Table: "pb_newspaper_models_animals_v1_f52e04fd", Name: "pb$created_at", Type: "timestamptz"}
}

func (d *pgdbDescriptorNewspaper) TenantField() *pgdb_v1.Column {
	var collation string
	switch d.Dialect() {
	case pgdb_v1.DialectV17:
		collation = "C"
	default:
	}
	return &pgdb_v1.Column{
		Table:     "pb_newspaper_models_animals_v1_f52e04fd",
		Name:      "pb$tenant_id",
		Type:      "varchar",
		Collation: collation,
	}
}

func (d *pgdbDescriptorNewspaper) IndexPrimaryKey(opts ...pgdb_v1.IndexOptionsFunc) *pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io

	return &pgdb_v1.Index{
		Name:               io.IndexName("pksk_newspaper_models_animals_v1_b6316285"),
		Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
		IsPrimary:          true,
		IsUnique:           true,
		IsDropped:          false,
		Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pksk")},
		OverrideExpression: "",
	}

}

func (d *pgdbDescriptorNewspaper) Indexes(opts ...pgdb_v1.IndexOptionsFunc) []*pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io
	rv := make([]*pgdb_v1.Index, 0)

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("pksk_newspaper_models_animals_v1_b6316285"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
			IsPrimary:          true,
			IsUnique:           true,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pksk")},
			OverrideExpression: "",
			WherePredicate:     "",
		})

	}

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("pksk_split_newspaper_models_animals_v1_21637534"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
			IsPrimary:          false,
			IsUnique:           false,
			IsDropped:          true,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pk"), io.ColumnName("sk")},
			OverrideExpression: "",
			WherePredicate:     "",
		})

	}

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("pksk_split2_newspaper_models_animals_v1_ccc0a328"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
			IsPrimary:          false,
			IsUnique:           false,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pk"), io.ColumnName("sk")},
			OverrideExpression: "",
			WherePredicate:     "",
		})

	}

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("fts_data_newspaper_models_animals_v1_a1025ab6"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE_GIN,
			IsPrimary:          false,
			IsUnique:           false,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("fts_data")},
			OverrideExpression: "",
			WherePredicate:     "",
		})

	}

	return rv
}

func (d *pgdbDescriptorNewspaper) Statistics(opts ...pgdb_v1.StatisticOptionsFunc) []*pgdb_v1.Statistic {
	io := pgdb_v1.NewStatisticOption(opts)
	_ = io
	rv := make([]*pgdb_v1.Statistic, 0)

	return rv
}

type pgdbMessageNewspaper struct {
	self    *Newspaper
	dialect pgdb_v1.Dialect
}

func (dbr *Newspaper) DBReflect(dialect pgdb_v1.Dialect) pgdb_v1.Message {
	return &pgdbMessageNewspaper{
		self:    dbr,
		dialect: dialect,
	}
}

func (m *pgdbMessageNewspaper) Descriptor() pgdb_v1.Descriptor {
	switch m.Dialect() {
	case pgdb_v1.DialectV17:
		return instancepgdbDescriptorNewspaperV17
	default:
		return instancepgdbDescriptorNewspaper
	}
}

func (m *pgdbMessageNewspaper) Record(opts ...pgdb_v1.RecordOptionsFunc) (exp.Record, error) {
	ro := pgdb_v1.NewRecordOptions(opts)
	_ = ro
	nullExp := exp.NewLiteralExpression("NULL")
	_ = nullExp

	var sb strings.Builder

	rv := exp.Record{}

	if !ro.IsNested {

		cfv0 := strings.ReplaceAll(string(m.self.GetId()), "\u0000", "")

		if ro.Nulled {
			rv[ro.ColumnName("tenant_id")] = nullExp
		} else {
			rv[ro.ColumnName("tenant_id")] = cfv0
		}

	}

	if !ro.IsNested {

	}

	if !ro.IsNested {

		sb.Reset()

		_, _ = sb.WriteString("models_animals_v1_newspaper")

		_, _ = sb.WriteString(":")

		_, _ = sb.WriteString(m.self.GetId())

		cfv2 := sb.String()

		if ro.Nulled {
			rv[ro.ColumnName("pk")] = nullExp
		} else {
			rv[ro.ColumnName("pk")] = cfv2
		}

	}

	if !ro.IsNested {

		sb.Reset()

		_, _ = sb.WriteString("example")

		cfv3 := sb.String()

		if ro.Nulled {
			rv[ro.ColumnName("sk")] = nullExp
		} else {
			rv[ro.ColumnName("sk")] = cfv3
		}

	}

	if !ro.IsNested {

		if m.Dialect() != pgdb_v1.DialectV17 {

		}

	}

	if !ro.IsNested {

		cfv5 := exp.NewLiteralExpression("NULL")

		if ro.Nulled {
			rv[ro.ColumnName("fts_data")] = nullExp
		} else {
			rv[ro.ColumnName("fts_data")] = cfv5
		}

	}

	if !ro.IsNested {

		cfv6, err := proto.Marshal(m.self)
		if err != nil {
			return nil, err
		}

		if ro.Nulled {
			rv[ro.ColumnName("pb_data")] = nullExp
		} else {
			rv[ro.ColumnName("pb_data")] = cfv6
		}

	}

	v1 := strings.ReplaceAll(string(m.self.GetName()), "\u0000", "")

	if ro.Nulled {
		rv[ro.ColumnName("name")] = nullExp
	} else {
		rv[ro.ColumnName("name")] = v1
	}

	var v2 *time.Time
	if m.self.GetCreatedAt().IsValid() {
		v2tmp := m.self.GetCreatedAt().AsTime()
		v2 = &v2tmp
	}

	if ro.Nulled {
		rv[ro.ColumnName("created_at")] = nullExp
	} else {
		rv[ro.ColumnName("created_at")] = v2
	}

	return rv, nil
}

func (m *pgdbMessageNewspaper) SearchData(opts ...pgdb_v1.RecordOptionsFunc) []*pgdb_v1.SearchContent {
	rv := []*pgdb_v1.SearchContent{}

	return rv
}

func (m *pgdbMessageNewspaper) Dialect() pgdb_v1.Dialect {
	return pgdb_v1.DialectOrDefault(m.dialect)
}

type NewspaperDB struct {
	tableName string
}

type NewspaperDBQueryBuilder struct {
	tableName string
}

type NewspaperDBQueryUnsafe struct {
	tableName string
}

type NewspaperDBColumns struct {
	tableName string
}

func (x *Newspaper) DB() *NewspaperDB {
	return &NewspaperDB{tableName: x.DBReflect(pgdb_v1.DialectUnspecified).Descriptor().TableName()}
}

func (x *NewspaperDB) TableName() string {
	return x.tableName
}

func (x *NewspaperDB) Query() *NewspaperDBQueryBuilder {
	return &NewspaperDBQueryBuilder{tableName: x.tableName}
}

func (x *NewspaperDB) Columns() *NewspaperDBColumns {
	return &NewspaperDBColumns{tableName: x.tableName}
}

func (x *NewspaperDB) WithTable(t string) *NewspaperDB {
	return &NewspaperDB{tableName: t}
}

func (x *NewspaperDBQueryBuilder) WithTable(t string) *NewspaperDBQueryBuilder {
	return &NewspaperDBQueryBuilder{tableName: t}
}

func (x *NewspaperDBQueryBuilder) Unsafe() *NewspaperDBQueryUnsafe {
	return &NewspaperDBQueryUnsafe{tableName: x.tableName}
}

type NewspaperTenantIdSafeOperators struct {
	column    string
	tableName string
}

func (x *NewspaperTenantIdSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *NewspaperTenantIdSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *NewspaperTenantIdSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt(v)
}

func (x *NewspaperTenantIdSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gte(v)
}

func (x *NewspaperTenantIdSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lt(v)
}

func (x *NewspaperTenantIdSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lte(v)
}

func (x *NewspaperTenantIdSafeOperators) In(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("FALSE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).In(v)
}

func (x *NewspaperTenantIdSafeOperators) NotIn(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("TRUE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotIn(v)
}

func (x *NewspaperTenantIdSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNull()
}

func (x *NewspaperTenantIdSafeOperators) IsNotEmpty() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt("")
}

func (x *NewspaperTenantIdSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNotNull()
}

func (x *NewspaperTenantIdSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Between(exp.NewRangeVal(start, end))
}

func (x *NewspaperTenantIdSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotBetween(exp.NewRangeVal(start, end))
}

func (x *NewspaperDBQueryBuilder) TenantId() *NewspaperTenantIdSafeOperators {
	return &NewspaperTenantIdSafeOperators{tableName: x.tableName, column: "pb$" + "tenant_id"}
}

type NewspaperPKSKSafeOperators struct {
	column    string
	tableName string
}

func (x *NewspaperPKSKSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *NewspaperPKSKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *NewspaperPKSKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt(v)
}

func (x *NewspaperPKSKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gte(v)
}

func (x *NewspaperPKSKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lt(v)
}

func (x *NewspaperPKSKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lte(v)
}

func (x *NewspaperPKSKSafeOperators) In(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("FALSE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).In(v)
}

func (x *NewspaperPKSKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("TRUE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotIn(v)
}

func (x *NewspaperPKSKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNull()
}

func (x *NewspaperPKSKSafeOperators) IsNotEmpty() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt("")
}

func (x *NewspaperPKSKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNotNull()
}

func (x *NewspaperPKSKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Between(exp.NewRangeVal(start, end))
}

func (x *NewspaperPKSKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotBetween(exp.NewRangeVal(start, end))
}

func (x *NewspaperDBQueryBuilder) PKSK() *NewspaperPKSKSafeOperators {
	return &NewspaperPKSKSafeOperators{tableName: x.tableName, column: "pb$" + "pksk"}
}

type NewspaperPKSafeOperators struct {
	column    string
	tableName string
}

func (x *NewspaperPKSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *NewspaperPKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *NewspaperPKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt(v)
}

func (x *NewspaperPKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gte(v)
}

func (x *NewspaperPKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lt(v)
}

func (x *NewspaperPKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lte(v)
}

func (x *NewspaperPKSafeOperators) In(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("FALSE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).In(v)
}

func (x *NewspaperPKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("TRUE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotIn(v)
}

func (x *NewspaperPKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNull()
}

func (x *NewspaperPKSafeOperators) IsNotEmpty() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt("")
}

func (x *NewspaperPKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNotNull()
}

func (x *NewspaperPKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Between(exp.NewRangeVal(start, end))
}

func (x *NewspaperPKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotBetween(exp.NewRangeVal(start, end))
}

func (x *NewspaperDBQueryBuilder) PK() *NewspaperPKSafeOperators {
	return &NewspaperPKSafeOperators{tableName: x.tableName, column: "pb$" + "pk"}
}

type NewspaperSKSafeOperators struct {
	column    string
	tableName string
}

func (x *NewspaperSKSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *NewspaperSKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *NewspaperSKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt(v)
}

func (x *NewspaperSKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gte(v)
}

func (x *NewspaperSKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lt(v)
}

func (x *NewspaperSKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Lte(v)
}

func (x *NewspaperSKSafeOperators) In(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("FALSE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).In(v)
}

func (x *NewspaperSKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	if len(v) == 0 {
		return exp.NewBooleanExpression(exp.EqOp, exp.NewLiteralExpression("TRUE"), true)
	}
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotIn(v)
}

func (x *NewspaperSKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNull()
}

func (x *NewspaperSKSafeOperators) IsNotEmpty() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Gt("")
}

func (x *NewspaperSKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).IsNotNull()
}

func (x *NewspaperSKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Between(exp.NewRangeVal(start, end))
}

func (x *NewspaperSKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).NotBetween(exp.NewRangeVal(start, end))
}

func (x *NewspaperDBQueryBuilder) SK() *NewspaperSKSafeOperators {
	return &NewspaperSKSafeOperators{tableName: x.tableName, column: "pb$" + "sk"}
}

type NewspaperFTSDataSafeOperators struct {
	column    string
	tableName string
}

func (x *NewspaperFTSDataSafeOperators) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *NewspaperFTSDataSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column).Eq(v)
}

func (x *NewspaperDBQueryBuilder) FTSData() *NewspaperFTSDataSafeOperators {
	return &NewspaperFTSDataSafeOperators{tableName: x.tableName, column: "pb$" + "fts_data"}
}

type NewspaperTenantIdQueryType struct {
	column    string
	tableName string
}

func (x *NewspaperDBQueryUnsafe) TenantId() *NewspaperTenantIdQueryType {
	return &NewspaperTenantIdQueryType{tableName: x.tableName, column: "pb$" + "tenant_id"}
}

func (x *NewspaperTenantIdQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type NewspaperPKSKQueryType struct {
	column    string
	tableName string
}

func (x *NewspaperDBQueryUnsafe) PKSK() *NewspaperPKSKQueryType {
	return &NewspaperPKSKQueryType{tableName: x.tableName, column: "pb$" + "pksk"}
}

func (x *NewspaperPKSKQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type NewspaperPKQueryType struct {
	column    string
	tableName string
}

func (x *NewspaperDBQueryUnsafe) PK() *NewspaperPKQueryType {
	return &NewspaperPKQueryType{tableName: x.tableName, column: "pb$" + "pk"}
}

func (x *NewspaperPKQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type NewspaperSKQueryType struct {
	column    string
	tableName string
}

func (x *NewspaperDBQueryUnsafe) SK() *NewspaperSKQueryType {
	return &NewspaperSKQueryType{tableName: x.tableName, column: "pb$" + "sk"}
}

func (x *NewspaperSKQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type NewspaperFTSDataQueryType struct {
	column    string
	tableName string
}

func (x *NewspaperDBQueryUnsafe) FTSData() *NewspaperFTSDataQueryType {
	return &NewspaperFTSDataQueryType{tableName: x.tableName, column: "pb$" + "fts_data"}
}

func (x *NewspaperFTSDataQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type NewspaperPBDataQueryType struct {
	column    string
	tableName string
}

func (x *NewspaperDBQueryUnsafe) PBData() *NewspaperPBDataQueryType {
	return &NewspaperPBDataQueryType{tableName: x.tableName, column: "pb$" + "pb_data"}
}

func (x *NewspaperPBDataQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type NewspaperNameQueryType struct {
	column    string
	tableName string
}

func (x *NewspaperDBQueryUnsafe) Name() *NewspaperNameQueryType {
	return &NewspaperNameQueryType{tableName: x.tableName, column: "pb$" + "name"}
}

func (x *NewspaperNameQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

type NewspaperCreatedAtQueryType struct {
	column    string
	tableName string
}

func (x *NewspaperDBQueryUnsafe) CreatedAt() *NewspaperCreatedAtQueryType {
	return &NewspaperCreatedAtQueryType{tableName: x.tableName, column: "pb$" + "created_at"}
}

func (x *NewspaperCreatedAtQueryType) Identifier() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.column)
}

func (x *NewspaperDBColumns) WithTable(t string) *NewspaperDBColumns {
	return &NewspaperDBColumns{tableName: t}
}

func (x *NewspaperDBColumns) TenantId() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "tenant_id")
}

func (x *NewspaperDBColumns) PKSK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pksk")
}

func (x *NewspaperDBColumns) PK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pk")
}

func (x *NewspaperDBColumns) SK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "sk")
}

func (x *NewspaperDBColumns) FTSData() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "fts_data")
}

func (x *NewspaperDBColumns) PBData() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pb_data")
}

func (x *NewspaperDBColumns) Name() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "name")
}

func (x *NewspaperDBColumns) CreatedAt() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "created_at")
}
