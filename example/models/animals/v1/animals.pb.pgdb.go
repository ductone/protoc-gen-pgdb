// Code generated by protoc-gen-pgdb 0.1.0 from models/animals/v1/animals.proto. DO NOT EDIT
package v1

import (
	"encoding/json"
	"strings"

	"time"

	"github.com/doug-martin/goqu/v9/exp"
	pgdb_v1 "github.com/ductone/protoc-gen-pgdb/pgdb/v1"
	"github.com/ductone/protoc-gen-pgdb/pgdb/v1/xpq"
	"github.com/jackc/pgx/v5/pgtype"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
)

type pgdbDescriptorPet struct{}

var (
	instancepgdbDescriptorPet pgdb_v1.Descriptor = &pgdbDescriptorPet{}
)

func (d *pgdbDescriptorPet) TableName() string {
	return "pb_pet_models_animals_v1_8a3723d5"
}

func (d *pgdbDescriptorPet) Fields(opts ...pgdb_v1.DescriptorFieldOptionFunc) []*pgdb_v1.Column {
	df := pgdb_v1.NewDescriptorFieldOption(opts)
	_ = df

	rv := make([]*pgdb_v1.Column, 0)

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("tenant_id"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: "",
		})

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pksk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: "varchar GENERATED ALWAYS AS (pb$pk || '|' || pb$sk) STORED",
		})

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: "",
		})

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("sk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: "",
		})

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("fts_data"),
			Type:               "tsvector",
			Nullable:           df.Nullable(true),
			OverrideExpression: "",
		})

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pb_data"),
			Type:               "bytea",
			Nullable:           df.Nullable(false),
			OverrideExpression: "",
		})

	}

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("id"),
		Type:               "text",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("created_at"),
		Type:               "timestamptz",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("updated_at"),
		Type:               "timestamptz",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("deleted_at"),
		Type:               "timestamptz",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("display_name"),
		Type:               "text",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("description"),
		Type:               "text",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("system_builtin"),
		Type:               "bool",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("elapsed"),
		Type:               "interval",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("profile"),
		Type:               "jsonb",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("cuteness"),
		Type:               "float4",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("price"),
		Type:               "float8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("14"),
		Type:               "bool",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("extra_profiles"),
		Type:               "_jsonb",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
	})

	return rv
}

func (d *pgdbDescriptorPet) DataField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Name: "pb_data", Type: "bytea"}
}

func (d *pgdbDescriptorPet) SearchField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Name: "fts_data", Type: "tsvector"}
}

func (d *pgdbDescriptorPet) VersioningField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Name: "pb$updated_at", Type: "timestamptz"}
}

func (d *pgdbDescriptorPet) IndexPrimaryKey(opts ...pgdb_v1.IndexOptionsFunc) *pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io

	return &pgdb_v1.Index{
		Name:               io.IndexName("pksk_pet_models_animals_v1_4fc115ea"),
		Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
		IsPrimary:          true,
		IsUnique:           true,
		IsDropped:          false,
		Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pksk")},
		OverrideExpression: "",
	}

}

func (d *pgdbDescriptorPet) Indexes(opts ...pgdb_v1.IndexOptionsFunc) []*pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io
	rv := make([]*pgdb_v1.Index, 0)

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("pksk_pet_models_animals_v1_4fc115ea"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
			IsPrimary:          true,
			IsUnique:           true,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pksk")},
			OverrideExpression: "",
		})

	}

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("pksk_pet_models_animals_v1_4fc115ea"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
			IsPrimary:          false,
			IsUnique:           true,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pk"), io.ColumnName("sk")},
			OverrideExpression: "",
		})

	}

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("fts_data_pet_models_animals_v1_6d64344b"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE_GIN,
			IsPrimary:          false,
			IsUnique:           false,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("fts_data")},
			OverrideExpression: "",
		})

	}

	rv = append(rv, &pgdb_v1.Index{
		Name:               io.IndexName("profile_pet_models_animals_v1_6b04a2a2"),
		Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE_GIN,
		IsPrimary:          false,
		IsUnique:           false,
		IsDropped:          false,
		Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("profile")},
		OverrideExpression: "",
	})

	return rv
}

type pgdbMessagePet struct {
	self *Pet
}

func (dbr *Pet) DBReflect() pgdb_v1.Message {
	return &pgdbMessagePet{
		self: dbr,
	}
}

func (m *pgdbMessagePet) Descriptor() pgdb_v1.Descriptor {
	return instancepgdbDescriptorPet
}

func (m *pgdbMessagePet) Record(opts ...pgdb_v1.RecordOptionsFunc) (exp.Record, error) {
	ro := pgdb_v1.NewRecordOptions(opts)
	_ = ro
	nullExp := exp.NewLiteralExpression("NULL")
	_ = nullExp

	var sb strings.Builder

	rv := exp.Record{}

	if !ro.IsNested {

		cfv0 := string(m.self.TenantId)

		if ro.Nulled {
			rv[ro.ColumnName("tenant_id")] = nullExp
		} else {
			rv[ro.ColumnName("tenant_id")] = cfv0
		}

	}

	if !ro.IsNested {

	}

	if !ro.IsNested {

		sb.Reset()

		_, _ = sb.WriteString("models_animals_v1_pet")

		_, _ = sb.WriteString(":")

		_, _ = sb.WriteString(m.self.TenantId)

		_, _ = sb.WriteString(":")

		_, _ = sb.WriteString(m.self.Id)

		cfv2 := sb.String()

		if ro.Nulled {
			rv[ro.ColumnName("pk")] = nullExp
		} else {
			rv[ro.ColumnName("pk")] = cfv2
		}

	}

	if !ro.IsNested {

		sb.Reset()

		_, _ = sb.WriteString("example")

		cfv3 := sb.String()

		if ro.Nulled {
			rv[ro.ColumnName("sk")] = nullExp
		} else {
			rv[ro.ColumnName("sk")] = cfv3
		}

	}

	if !ro.IsNested {

		cfv4tmp := []*pgdb_v1.SearchContent{

			{
				Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_EXACT,
				Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_UNSPECIFIED,
				Value:  m.self.GetId(),
			},

			{
				Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_ENGLISH,
				Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_HIGH,
				Value:  m.self.GetDisplayName(),
			},

			{
				Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_ENGLISH,
				Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_UNSPECIFIED,
				Value:  m.self.GetDescription(),
			},
		}

		cfv4 := pgdb_v1.FullTextSearchVectors(cfv4tmp)

		if ro.Nulled {
			rv[ro.ColumnName("fts_data")] = nullExp
		} else {
			rv[ro.ColumnName("fts_data")] = cfv4
		}

	}

	if !ro.IsNested {

		cfv5, err := proto.Marshal(m.self)
		if err != nil {
			return nil, err
		}

		if ro.Nulled {
			rv[ro.ColumnName("pb_data")] = nullExp
		} else {
			rv[ro.ColumnName("pb_data")] = cfv5
		}

	}

	v1 := string(m.self.GetId())

	if ro.Nulled {
		rv[ro.ColumnName("id")] = nullExp
	} else {
		rv[ro.ColumnName("id")] = v1
	}

	var v2 *time.Time
	if m.self.GetCreatedAt().IsValid() {
		v2tmp := m.self.GetCreatedAt().AsTime()
		v2 = &v2tmp
	}

	if ro.Nulled {
		rv[ro.ColumnName("created_at")] = nullExp
	} else {
		rv[ro.ColumnName("created_at")] = v2
	}

	var v3 *time.Time
	if m.self.GetUpdatedAt().IsValid() {
		v3tmp := m.self.GetUpdatedAt().AsTime()
		v3 = &v3tmp
	}

	if ro.Nulled {
		rv[ro.ColumnName("updated_at")] = nullExp
	} else {
		rv[ro.ColumnName("updated_at")] = v3
	}

	var v4 *time.Time
	if m.self.GetDeletedAt().IsValid() {
		v4tmp := m.self.GetDeletedAt().AsTime()
		v4 = &v4tmp
	}

	if ro.Nulled {
		rv[ro.ColumnName("deleted_at")] = nullExp
	} else {
		rv[ro.ColumnName("deleted_at")] = v4
	}

	v5 := string(m.self.GetDisplayName())

	if ro.Nulled {
		rv[ro.ColumnName("display_name")] = nullExp
	} else {
		rv[ro.ColumnName("display_name")] = v5
	}

	v6 := string(m.self.GetDescription())

	if ro.Nulled {
		rv[ro.ColumnName("description")] = nullExp
	} else {
		rv[ro.ColumnName("description")] = v6
	}

	v7 := bool(m.self.GetSystemBuiltin())

	if ro.Nulled {
		rv[ro.ColumnName("system_builtin")] = nullExp
	} else {
		rv[ro.ColumnName("system_builtin")] = v7
	}

	v8 := &pgtype.Interval{}
	if m.self.GetElapsed().IsValid() {
		v8.Valid = true
		v8.Microseconds = int64(m.self.GetElapsed().AsDuration()) / 1000
	}

	if ro.Nulled {
		rv[ro.ColumnName("elapsed")] = nullExp
	} else {
		rv[ro.ColumnName("elapsed")] = v8
	}

	v9tmp, err := protojson.Marshal(m.self.GetProfile())
	if err != nil {
		return nil, err
	}
	v9 := exp.NewLiteralExpression("?::jsonb", string(v9tmp))

	if ro.Nulled {
		rv[ro.ColumnName("profile")] = nullExp
	} else {
		rv[ro.ColumnName("profile")] = v9
	}

	v10 := float32(m.self.GetCuteness())

	if ro.Nulled {
		rv[ro.ColumnName("cuteness")] = nullExp
	} else {
		rv[ro.ColumnName("cuteness")] = v10
	}

	v11 := float64(m.self.GetPrice())

	if ro.Nulled {
		rv[ro.ColumnName("price")] = nullExp
	} else {
		rv[ro.ColumnName("price")] = v11
	}

	v12 := bool(m.self.GetVeryLongNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaame())

	if ro.Nulled {
		rv[ro.ColumnName("14")] = nullExp
	} else {
		rv[ro.ColumnName("14")] = v12
	}

	v13 := make(xpq.Array[string], 0, len(m.self.GetExtraProfiles()))
	for _, v13arrTmp := range m.self.GetExtraProfiles() {
		v13tmp, err := protojson.Marshal(v13arrTmp)
		if err != nil {
			return nil, err
		}
		v13 = append(v13, string(v13tmp))
	}

	if ro.Nulled {
		rv[ro.ColumnName("extra_profiles")] = nullExp
	} else {
		rv[ro.ColumnName("extra_profiles")] = v13
	}

	return rv, nil
}

func (m *pgdbMessagePet) SearchData(opts ...pgdb_v1.RecordOptionsFunc) []*pgdb_v1.SearchContent {
	rv := []*pgdb_v1.SearchContent{

		{
			Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_EXACT,
			Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_UNSPECIFIED,
			Value:  m.self.GetId(),
		},

		{
			Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_ENGLISH,
			Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_HIGH,
			Value:  m.self.GetDisplayName(),
		},

		{
			Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_ENGLISH,
			Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_UNSPECIFIED,
			Value:  m.self.GetDescription(),
		},
	}

	return rv
}

type PetDB struct {
	tableName string
}

type PetDBQueryBuilder struct {
	tableName string
}

type PetDBQueryUnsafe struct {
	tableName string
}

type PetDBColumns struct {
	tableName string
}

func (x *Pet) DB() *PetDB {
	return &PetDB{tableName: x.DBReflect().Descriptor().TableName()}
}

func (x *PetDB) TableName() string {
	return x.tableName
}

func (x *PetDB) Query() *PetDBQueryBuilder {
	return &PetDBQueryBuilder{tableName: x.tableName}
}

func (x *PetDB) Columns() *PetDBColumns {
	return &PetDBColumns{tableName: x.tableName}
}

func (x *PetDB) WithTable(t string) *PetDB {
	return &PetDB{tableName: t}
}

func (x *PetDBQueryBuilder) WithTable(t string) *PetDBQueryBuilder {
	return &PetDBQueryBuilder{tableName: t}
}

func (x *PetDBQueryBuilder) Unsafe() *PetDBQueryUnsafe {
	return &PetDBQueryUnsafe{tableName: x.tableName}
}

type PetTenantIdSafeOperators struct {
	prefix    string
	tableName string
}

func (x *PetTenantIdSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Eq(v)
}

func (x *PetTenantIdSafeOperators) Neq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Neq(v)
}

func (x *PetTenantIdSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Gt(v)
}

func (x *PetTenantIdSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Gte(v)
}

func (x *PetTenantIdSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Lt(v)
}

func (x *PetTenantIdSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Lte(v)
}

func (x *PetTenantIdSafeOperators) In(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").In(v)
}

func (x *PetTenantIdSafeOperators) NotIn(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").NotIn(v)
}

func (x *PetTenantIdSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").IsNull()
}

func (x *PetTenantIdSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").IsNotNull()
}

func (x *PetTenantIdSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Between(exp.NewRangeVal(start, end))
}

func (x *PetTenantIdSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").NotBetween(exp.NewRangeVal(start, end))
}

func (x *PetTenantIdSafeOperators) ObjectContains(obj interface{}) (exp.Expression, error) {
	var err error
	var data []byte

	pm, ok := obj.(proto.Message)
	if ok {
		data, err = protojson.Marshal(pm)
	} else {
		data, err = json.Marshal(obj)
	}
	if err != nil {
		return nil, err
	}

	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id")
	return exp.NewLiteralExpression("(? @> ?::jsonb)", idExp, string(data)), nil
}

func (x *PetTenantIdSafeOperators) ObjectPathExists(path string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id")
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("@?"), path)
}

func (x *PetTenantIdSafeOperators) ObjectPath(path string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id")
	return exp.NewLiteralExpression("? @@ ?", idExp, path)
}

func (x *PetTenantIdSafeOperators) ObjectKeyExists(key string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id")
	return exp.NewLiteralExpression("? \\? ?", idExp, key)
}

func (x *PetTenantIdSafeOperators) ObjectAnyKeyExists(keys ...string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id")
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("?|"), xpq.StringArray(keys))
}

func (x *PetTenantIdSafeOperators) ObjectAllKeyExists(keys ...string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id")
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("?&"), xpq.StringArray(keys))
}

func (x *PetDBQueryBuilder) TenantId() *PetTenantIdSafeOperators {
	return &PetTenantIdSafeOperators{tableName: x.tableName, prefix: "pb$"}
}

type PetPKSKSafeOperators struct {
	prefix    string
	tableName string
}

func (x *PetPKSKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Eq(v)
}

func (x *PetPKSKSafeOperators) Neq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Neq(v)
}

func (x *PetPKSKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Gt(v)
}

func (x *PetPKSKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Gte(v)
}

func (x *PetPKSKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Lt(v)
}

func (x *PetPKSKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Lte(v)
}

func (x *PetPKSKSafeOperators) In(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").In(v)
}

func (x *PetPKSKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").NotIn(v)
}

func (x *PetPKSKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").IsNull()
}

func (x *PetPKSKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").IsNotNull()
}

func (x *PetPKSKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Between(exp.NewRangeVal(start, end))
}

func (x *PetPKSKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").NotBetween(exp.NewRangeVal(start, end))
}

func (x *PetDBQueryBuilder) PKSK() *PetPKSKSafeOperators {
	return &PetPKSKSafeOperators{tableName: x.tableName, prefix: "pb$"}
}

type PetPKSafeOperators struct {
	prefix    string
	tableName string
}

func (x *PetPKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Eq(v)
}

func (x *PetPKSafeOperators) Neq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Neq(v)
}

func (x *PetPKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Gt(v)
}

func (x *PetPKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Gte(v)
}

func (x *PetPKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Lt(v)
}

func (x *PetPKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Lte(v)
}

func (x *PetPKSafeOperators) In(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").In(v)
}

func (x *PetPKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").NotIn(v)
}

func (x *PetPKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").IsNull()
}

func (x *PetPKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").IsNotNull()
}

func (x *PetPKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Between(exp.NewRangeVal(start, end))
}

func (x *PetPKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").NotBetween(exp.NewRangeVal(start, end))
}

func (x *PetDBQueryBuilder) PK() *PetPKSafeOperators {
	return &PetPKSafeOperators{tableName: x.tableName, prefix: "pb$"}
}

type PetSKSafeOperators struct {
	prefix    string
	tableName string
}

func (x *PetSKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Eq(v)
}

func (x *PetSKSafeOperators) Neq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Neq(v)
}

func (x *PetSKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Gt(v)
}

func (x *PetSKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Gte(v)
}

func (x *PetSKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Lt(v)
}

func (x *PetSKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Lte(v)
}

func (x *PetSKSafeOperators) In(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").In(v)
}

func (x *PetSKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").NotIn(v)
}

func (x *PetSKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").IsNull()
}

func (x *PetSKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").IsNotNull()
}

func (x *PetSKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Between(exp.NewRangeVal(start, end))
}

func (x *PetSKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").NotBetween(exp.NewRangeVal(start, end))
}

func (x *PetDBQueryBuilder) SK() *PetSKSafeOperators {
	return &PetSKSafeOperators{tableName: x.tableName, prefix: "pb$"}
}

type PetFTSDataSafeOperators struct {
	prefix    string
	tableName string
}

func (x *PetFTSDataSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data").Eq(v)
}

func (x *PetFTSDataSafeOperators) ObjectContains(obj interface{}) (exp.Expression, error) {
	var err error
	var data []byte

	pm, ok := obj.(proto.Message)
	if ok {
		data, err = protojson.Marshal(pm)
	} else {
		data, err = json.Marshal(obj)
	}
	if err != nil {
		return nil, err
	}

	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data")
	return exp.NewLiteralExpression("(? @> ?::jsonb)", idExp, string(data)), nil
}

func (x *PetFTSDataSafeOperators) ObjectPathExists(path string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data")
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("@?"), path)
}

func (x *PetFTSDataSafeOperators) ObjectPath(path string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data")
	return exp.NewLiteralExpression("? @@ ?", idExp, path)
}

func (x *PetFTSDataSafeOperators) ObjectKeyExists(key string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data")
	return exp.NewLiteralExpression("? \\? ?", idExp, key)
}

func (x *PetFTSDataSafeOperators) ObjectAnyKeyExists(keys ...string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data")
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("?|"), xpq.StringArray(keys))
}

func (x *PetFTSDataSafeOperators) ObjectAllKeyExists(keys ...string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data")
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("?&"), xpq.StringArray(keys))
}

func (x *PetDBQueryBuilder) FTSData() *PetFTSDataSafeOperators {
	return &PetFTSDataSafeOperators{tableName: x.tableName, prefix: "pb$"}
}

type PetProfileSafeOperators struct {
	prefix    string
	tableName string
}

func (x *PetProfileSafeOperators) Eq(v any) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"profile").Eq(v)
}

func (x *PetProfileSafeOperators) ObjectContains(obj interface{}) (exp.Expression, error) {
	var err error
	var data []byte

	pm, ok := obj.(proto.Message)
	if ok {
		data, err = protojson.Marshal(pm)
	} else {
		data, err = json.Marshal(obj)
	}
	if err != nil {
		return nil, err
	}

	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"profile")
	return exp.NewLiteralExpression("(? @> ?::jsonb)", idExp, string(data)), nil
}

func (x *PetProfileSafeOperators) ObjectPathExists(path string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"profile")
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("@?"), path)
}

func (x *PetProfileSafeOperators) ObjectPath(path string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"profile")
	return exp.NewLiteralExpression("? @@ ?", idExp, path)
}

func (x *PetProfileSafeOperators) ObjectKeyExists(key string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"profile")
	return exp.NewLiteralExpression("? \\? ?", idExp, key)
}

func (x *PetProfileSafeOperators) ObjectAnyKeyExists(keys ...string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"profile")
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("?|"), xpq.StringArray(keys))
}

func (x *PetProfileSafeOperators) ObjectAllKeyExists(keys ...string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"profile")
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("?&"), xpq.StringArray(keys))
}

func (x *PetDBQueryBuilder) Profile() *PetProfileSafeOperators {
	return &PetProfileSafeOperators{tableName: x.tableName, prefix: "pb$"}
}

func (x *PetDBQueryUnsafe) TenantId() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "tenant_id")
}

func (x *PetDBQueryUnsafe) PKSK() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "pksk")
}

func (x *PetDBQueryUnsafe) PK() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "pk")
}

func (x *PetDBQueryUnsafe) SK() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "sk")
}

func (x *PetDBQueryUnsafe) FTSData() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "fts_data")
}

func (x *PetDBQueryUnsafe) PBData() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "pb_data")
}

func (x *PetDBQueryUnsafe) Id() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "id")
}

func (x *PetDBQueryUnsafe) CreatedAt() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "created_at")
}

func (x *PetDBQueryUnsafe) UpdatedAt() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "updated_at")
}

func (x *PetDBQueryUnsafe) DeletedAt() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "deleted_at")
}

func (x *PetDBQueryUnsafe) DisplayName() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "display_name")
}

func (x *PetDBQueryUnsafe) Description() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "description")
}

func (x *PetDBQueryUnsafe) SystemBuiltin() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "system_builtin")
}

func (x *PetDBQueryUnsafe) Elapsed() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "elapsed")
}

func (x *PetDBQueryUnsafe) Profile() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "profile")
}

func (x *PetDBQueryUnsafe) Cuteness() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "cuteness")
}

func (x *PetDBQueryUnsafe) Price() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "price")
}

func (x *PetDBQueryUnsafe) VeryLongNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaame() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "14")
}

func (x *PetDBQueryUnsafe) ExtraProfiles() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "extra_profiles")
}

func (x *PetDBColumns) WithTable(t string) *PetDBColumns {
	return &PetDBColumns{tableName: t}
}

func (x *PetDBColumns) TenantId() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "tenant_id")
}

func (x *PetDBColumns) PKSK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pksk")
}

func (x *PetDBColumns) PK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pk")
}

func (x *PetDBColumns) SK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "sk")
}

func (x *PetDBColumns) FTSData() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "fts_data")
}

func (x *PetDBColumns) PBData() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pb_data")
}

func (x *PetDBColumns) Id() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "id")
}

func (x *PetDBColumns) CreatedAt() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "created_at")
}

func (x *PetDBColumns) UpdatedAt() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "updated_at")
}

func (x *PetDBColumns) DeletedAt() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "deleted_at")
}

func (x *PetDBColumns) DisplayName() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "display_name")
}

func (x *PetDBColumns) Description() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "description")
}

func (x *PetDBColumns) SystemBuiltin() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "system_builtin")
}

func (x *PetDBColumns) Elapsed() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "elapsed")
}

func (x *PetDBColumns) Profile() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "profile")
}

func (x *PetDBColumns) Cuteness() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "cuteness")
}

func (x *PetDBColumns) Price() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "price")
}

func (x *PetDBColumns) VeryLongNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaame() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "14")
}

func (x *PetDBColumns) ExtraProfiles() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "extra_profiles")
}

type pgdbDescriptorScalarValue struct{}

var (
	instancepgdbDescriptorScalarValue pgdb_v1.Descriptor = &pgdbDescriptorScalarValue{}
)

func (d *pgdbDescriptorScalarValue) TableName() string {
	return "pb_scalar_value_models_animals_v1_35025835"
}

func (d *pgdbDescriptorScalarValue) Fields(opts ...pgdb_v1.DescriptorFieldOptionFunc) []*pgdb_v1.Column {
	df := pgdb_v1.NewDescriptorFieldOption(opts)
	_ = df

	rv := make([]*pgdb_v1.Column, 0)

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("tenant_id"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: "",
		})

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pksk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: "varchar GENERATED ALWAYS AS (pb$pk || '|' || pb$sk) STORED",
		})

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: "",
		})

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("sk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: "",
		})

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("fts_data"),
			Type:               "tsvector",
			Nullable:           df.Nullable(true),
			OverrideExpression: "",
		})

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pb_data"),
			Type:               "bytea",
			Nullable:           df.Nullable(false),
			OverrideExpression: "",
		})

	}

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("id"),
		Type:               "text",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("double"),
		Type:               "float8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("float"),
		Type:               "float4",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("int_32"),
		Type:               "int4",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("int_64"),
		Type:               "int8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("uint_32"),
		Type:               "int8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("uint_64"),
		Type:               "numeric",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("sint_32"),
		Type:               "int4",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("sint_64"),
		Type:               "int8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("fixed_32"),
		Type:               "int8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("fixed_64"),
		Type:               "numeric",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("sfixed_32"),
		Type:               "int4",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("sfixed_64"),
		Type:               "int8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("bool"),
		Type:               "bool",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("string"),
		Type:               "text",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("bytes"),
		Type:               "bytea",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_double"),
		Type:               "_float8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_float"),
		Type:               "_float4",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_int32"),
		Type:               "_int4",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_int64"),
		Type:               "_int8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_uint32"),
		Type:               "_int8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_uint64"),
		Type:               "_numeric",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_sint32"),
		Type:               "_int4",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_sint64"),
		Type:               "_int8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_fixed32"),
		Type:               "_int8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_fixed64"),
		Type:               "_numeric",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_sfixed32"),
		Type:               "_int4",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_sfixed64"),
		Type:               "_int8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_bool"),
		Type:               "_bool",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_string"),
		Type:               "_text",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_bytes"),
		Type:               "_bytea",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("repeated_enum"),
		Type:               "_int4",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("string_map"),
		Type:               "jsonb",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("created_at"),
		Type:               "timestamptz",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("str_ptr"),
		Type:               "text",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("bool_ptr"),
		Type:               "bool",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
	})

	return rv
}

func (d *pgdbDescriptorScalarValue) DataField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Name: "pb_data", Type: "bytea"}
}

func (d *pgdbDescriptorScalarValue) SearchField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Name: "fts_data", Type: "tsvector"}
}

func (d *pgdbDescriptorScalarValue) VersioningField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Name: "pb$created_at", Type: "timestamptz"}
}

func (d *pgdbDescriptorScalarValue) IndexPrimaryKey(opts ...pgdb_v1.IndexOptionsFunc) *pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io

	return &pgdb_v1.Index{
		Name:               io.IndexName("pksk_scalar_value_models_animals_v1_19369260"),
		Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
		IsPrimary:          true,
		IsUnique:           true,
		IsDropped:          false,
		Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pksk")},
		OverrideExpression: "",
	}

}

func (d *pgdbDescriptorScalarValue) Indexes(opts ...pgdb_v1.IndexOptionsFunc) []*pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io
	rv := make([]*pgdb_v1.Index, 0)

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("pksk_scalar_value_models_animals_v1_19369260"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
			IsPrimary:          true,
			IsUnique:           true,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pksk")},
			OverrideExpression: "",
		})

	}

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("pksk_scalar_value_models_animals_v1_19369260"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
			IsPrimary:          false,
			IsUnique:           true,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pk"), io.ColumnName("sk")},
			OverrideExpression: "",
		})

	}

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("fts_data_scalar_value_models_animals_v1_6f51bd7b"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE_GIN,
			IsPrimary:          false,
			IsUnique:           false,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("fts_data")},
			OverrideExpression: "",
		})

	}

	return rv
}

type pgdbMessageScalarValue struct {
	self *ScalarValue
}

func (dbr *ScalarValue) DBReflect() pgdb_v1.Message {
	return &pgdbMessageScalarValue{
		self: dbr,
	}
}

func (m *pgdbMessageScalarValue) Descriptor() pgdb_v1.Descriptor {
	return instancepgdbDescriptorScalarValue
}

func (m *pgdbMessageScalarValue) Record(opts ...pgdb_v1.RecordOptionsFunc) (exp.Record, error) {
	ro := pgdb_v1.NewRecordOptions(opts)
	_ = ro
	nullExp := exp.NewLiteralExpression("NULL")
	_ = nullExp

	var sb strings.Builder

	rv := exp.Record{}

	if !ro.IsNested {

		cfv0 := string(m.self.TenantId)

		if ro.Nulled {
			rv[ro.ColumnName("tenant_id")] = nullExp
		} else {
			rv[ro.ColumnName("tenant_id")] = cfv0
		}

	}

	if !ro.IsNested {

	}

	if !ro.IsNested {

		sb.Reset()

		_, _ = sb.WriteString("models_animals_v1_scalar_value")

		_, _ = sb.WriteString(":")

		_, _ = sb.WriteString(m.self.TenantId)

		cfv2 := sb.String()

		if ro.Nulled {
			rv[ro.ColumnName("pk")] = nullExp
		} else {
			rv[ro.ColumnName("pk")] = cfv2
		}

	}

	if !ro.IsNested {

		sb.Reset()

		_, _ = sb.WriteString(m.self.Id)

		cfv3 := sb.String()

		if ro.Nulled {
			rv[ro.ColumnName("sk")] = nullExp
		} else {
			rv[ro.ColumnName("sk")] = cfv3
		}

	}

	if !ro.IsNested {

		cfv4tmp := []*pgdb_v1.SearchContent{

			{
				Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_ENGLISH,
				Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_HIGH,
				Value:  m.self.GetString_(),
			},

			{
				Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_ENGLISH,
				Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_HIGH,
				Value:  m.self.GetRepeatedString(),
			},
		}

		cfv4 := pgdb_v1.FullTextSearchVectors(cfv4tmp)

		if ro.Nulled {
			rv[ro.ColumnName("fts_data")] = nullExp
		} else {
			rv[ro.ColumnName("fts_data")] = cfv4
		}

	}

	if !ro.IsNested {

		cfv5, err := proto.Marshal(m.self)
		if err != nil {
			return nil, err
		}

		if ro.Nulled {
			rv[ro.ColumnName("pb_data")] = nullExp
		} else {
			rv[ro.ColumnName("pb_data")] = cfv5
		}

	}

	v1 := string(m.self.GetId())

	if ro.Nulled {
		rv[ro.ColumnName("id")] = nullExp
	} else {
		rv[ro.ColumnName("id")] = v1
	}

	v2 := float64(m.self.GetDouble())

	if ro.Nulled {
		rv[ro.ColumnName("double")] = nullExp
	} else {
		rv[ro.ColumnName("double")] = v2
	}

	v3 := float32(m.self.GetFloat())

	if ro.Nulled {
		rv[ro.ColumnName("float")] = nullExp
	} else {
		rv[ro.ColumnName("float")] = v3
	}

	v4 := int32(m.self.GetInt32())

	if ro.Nulled {
		rv[ro.ColumnName("int_32")] = nullExp
	} else {
		rv[ro.ColumnName("int_32")] = v4
	}

	v5 := int64(m.self.GetInt64())

	if ro.Nulled {
		rv[ro.ColumnName("int_64")] = nullExp
	} else {
		rv[ro.ColumnName("int_64")] = v5
	}

	v6 := uint32(m.self.GetUint32())

	if ro.Nulled {
		rv[ro.ColumnName("uint_32")] = nullExp
	} else {
		rv[ro.ColumnName("uint_32")] = v6
	}

	v7 := uint64(m.self.GetUint64())

	if ro.Nulled {
		rv[ro.ColumnName("uint_64")] = nullExp
	} else {
		rv[ro.ColumnName("uint_64")] = v7
	}

	v8 := int32(m.self.GetSint32())

	if ro.Nulled {
		rv[ro.ColumnName("sint_32")] = nullExp
	} else {
		rv[ro.ColumnName("sint_32")] = v8
	}

	v9 := int64(m.self.GetSint64())

	if ro.Nulled {
		rv[ro.ColumnName("sint_64")] = nullExp
	} else {
		rv[ro.ColumnName("sint_64")] = v9
	}

	v10 := uint32(m.self.GetFixed32())

	if ro.Nulled {
		rv[ro.ColumnName("fixed_32")] = nullExp
	} else {
		rv[ro.ColumnName("fixed_32")] = v10
	}

	v11 := uint64(m.self.GetFixed64())

	if ro.Nulled {
		rv[ro.ColumnName("fixed_64")] = nullExp
	} else {
		rv[ro.ColumnName("fixed_64")] = v11
	}

	v12 := int32(m.self.GetSfixed32())

	if ro.Nulled {
		rv[ro.ColumnName("sfixed_32")] = nullExp
	} else {
		rv[ro.ColumnName("sfixed_32")] = v12
	}

	v13 := int64(m.self.GetSfixed64())

	if ro.Nulled {
		rv[ro.ColumnName("sfixed_64")] = nullExp
	} else {
		rv[ro.ColumnName("sfixed_64")] = v13
	}

	v14 := bool(m.self.GetBool())

	if ro.Nulled {
		rv[ro.ColumnName("bool")] = nullExp
	} else {
		rv[ro.ColumnName("bool")] = v14
	}

	v15 := string(m.self.GetString_())

	if ro.Nulled {
		rv[ro.ColumnName("string")] = nullExp
	} else {
		rv[ro.ColumnName("string")] = v15
	}

	v16 := []byte(m.self.GetBytes())

	if ro.Nulled {
		rv[ro.ColumnName("bytes")] = nullExp
	} else {
		rv[ro.ColumnName("bytes")] = v16
	}

	v17 := make(xpq.Array[float64], 0, len(m.self.GetRepeatedDouble()))
	for _, v17arrTmp := range m.self.GetRepeatedDouble() {
		v17 = append(v17, float64(v17arrTmp))
	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_double")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_double")] = v17
	}

	v18 := make(xpq.Array[float32], 0, len(m.self.GetRepeatedFloat()))
	for _, v18arrTmp := range m.self.GetRepeatedFloat() {
		v18 = append(v18, float32(v18arrTmp))
	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_float")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_float")] = v18
	}

	v19 := make(xpq.Array[int32], 0, len(m.self.GetRepeatedInt32()))
	for _, v19arrTmp := range m.self.GetRepeatedInt32() {
		v19 = append(v19, int32(v19arrTmp))
	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_int32")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_int32")] = v19
	}

	v20 := make(xpq.Array[int64], 0, len(m.self.GetRepeatedInt64()))
	for _, v20arrTmp := range m.self.GetRepeatedInt64() {
		v20 = append(v20, int64(v20arrTmp))
	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_int64")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_int64")] = v20
	}

	v21 := make(xpq.Array[uint32], 0, len(m.self.GetRepeatedUint32()))
	for _, v21arrTmp := range m.self.GetRepeatedUint32() {
		v21 = append(v21, uint32(v21arrTmp))
	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_uint32")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_uint32")] = v21
	}

	v22 := make(xpq.Array[uint64], 0, len(m.self.GetRepeatedUint64()))
	for _, v22arrTmp := range m.self.GetRepeatedUint64() {
		v22 = append(v22, uint64(v22arrTmp))
	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_uint64")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_uint64")] = v22
	}

	v23 := make(xpq.Array[int32], 0, len(m.self.GetRepeatedSint32()))
	for _, v23arrTmp := range m.self.GetRepeatedSint32() {
		v23 = append(v23, int32(v23arrTmp))
	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_sint32")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_sint32")] = v23
	}

	v24 := make(xpq.Array[int64], 0, len(m.self.GetRepeatedSint64()))
	for _, v24arrTmp := range m.self.GetRepeatedSint64() {
		v24 = append(v24, int64(v24arrTmp))
	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_sint64")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_sint64")] = v24
	}

	v25 := make(xpq.Array[uint32], 0, len(m.self.GetRepeatedFixed32()))
	for _, v25arrTmp := range m.self.GetRepeatedFixed32() {
		v25 = append(v25, uint32(v25arrTmp))
	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_fixed32")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_fixed32")] = v25
	}

	v26 := make(xpq.Array[uint64], 0, len(m.self.GetRepeatedFixed64()))
	for _, v26arrTmp := range m.self.GetRepeatedFixed64() {
		v26 = append(v26, uint64(v26arrTmp))
	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_fixed64")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_fixed64")] = v26
	}

	v27 := make(xpq.Array[int32], 0, len(m.self.GetRepeatedSfixed32()))
	for _, v27arrTmp := range m.self.GetRepeatedSfixed32() {
		v27 = append(v27, int32(v27arrTmp))
	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_sfixed32")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_sfixed32")] = v27
	}

	v28 := make(xpq.Array[int64], 0, len(m.self.GetRepeatedSfixed64()))
	for _, v28arrTmp := range m.self.GetRepeatedSfixed64() {
		v28 = append(v28, int64(v28arrTmp))
	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_sfixed64")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_sfixed64")] = v28
	}

	v29 := make(xpq.Array[bool], 0, len(m.self.GetRepeatedBool()))
	for _, v29arrTmp := range m.self.GetRepeatedBool() {
		v29 = append(v29, bool(v29arrTmp))
	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_bool")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_bool")] = v29
	}

	v30 := make(xpq.Array[string], 0, len(m.self.GetRepeatedString()))
	for _, v30arrTmp := range m.self.GetRepeatedString() {
		v30 = append(v30, string(v30arrTmp))
	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_string")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_string")] = v30
	}

	v31 := make(xpq.Array[[]byte], 0, len(m.self.GetRepeatedBytes()))
	for _, v31arrTmp := range m.self.GetRepeatedBytes() {
		v31 = append(v31, []byte(v31arrTmp))
	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_bytes")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_bytes")] = v31
	}

	v32 := make(xpq.Array[int32], 0, len(m.self.GetRepeatedEnum()))
	for _, v32arrTmp := range m.self.GetRepeatedEnum() {
		v32 = append(v32, int32(v32arrTmp))
	}

	if ro.Nulled {
		rv[ro.ColumnName("repeated_enum")] = nullExp
	} else {
		rv[ro.ColumnName("repeated_enum")] = v32
	}

	v33tmp, err := json.Marshal(m.self.GetStringMap())
	if err != nil {
		return nil, err
	}
	v33 := exp.NewLiteralExpression("?::jsonb", string(v33tmp))

	if ro.Nulled {
		rv[ro.ColumnName("string_map")] = nullExp
	} else {
		rv[ro.ColumnName("string_map")] = v33
	}

	var v34 *time.Time
	if m.self.GetCreatedAt().IsValid() {
		v34tmp := m.self.GetCreatedAt().AsTime()
		v34 = &v34tmp
	}

	if ro.Nulled {
		rv[ro.ColumnName("created_at")] = nullExp
	} else {
		rv[ro.ColumnName("created_at")] = v34
	}

	var v35 exp.LiteralExpression

	if m.self.GetStrPtr() != nil {
		v35 = exp.NewLiteralExpression("?", m.self.GetStrPtr().GetValue())
	} else {
		v35 = exp.NewLiteralExpression("NULL")
	}

	if ro.Nulled {
		rv[ro.ColumnName("str_ptr")] = nullExp
	} else {
		rv[ro.ColumnName("str_ptr")] = v35
	}

	var v36 exp.LiteralExpression

	if m.self.GetBoolPtr() != nil {
		v36 = exp.NewLiteralExpression("?", m.self.GetBoolPtr().GetValue())
	} else {
		v36 = exp.NewLiteralExpression("NULL")
	}

	if ro.Nulled {
		rv[ro.ColumnName("bool_ptr")] = nullExp
	} else {
		rv[ro.ColumnName("bool_ptr")] = v36
	}

	return rv, nil
}

func (m *pgdbMessageScalarValue) SearchData(opts ...pgdb_v1.RecordOptionsFunc) []*pgdb_v1.SearchContent {
	rv := []*pgdb_v1.SearchContent{

		{
			Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_ENGLISH,
			Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_HIGH,
			Value:  m.self.GetString_(),
		},

		{
			Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_ENGLISH,
			Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_HIGH,
			Value:  m.self.GetRepeatedString(),
		},
	}

	return rv
}

type ScalarValueDB struct {
	tableName string
}

type ScalarValueDBQueryBuilder struct {
	tableName string
}

type ScalarValueDBQueryUnsafe struct {
	tableName string
}

type ScalarValueDBColumns struct {
	tableName string
}

func (x *ScalarValue) DB() *ScalarValueDB {
	return &ScalarValueDB{tableName: x.DBReflect().Descriptor().TableName()}
}

func (x *ScalarValueDB) TableName() string {
	return x.tableName
}

func (x *ScalarValueDB) Query() *ScalarValueDBQueryBuilder {
	return &ScalarValueDBQueryBuilder{tableName: x.tableName}
}

func (x *ScalarValueDB) Columns() *ScalarValueDBColumns {
	return &ScalarValueDBColumns{tableName: x.tableName}
}

func (x *ScalarValueDB) WithTable(t string) *ScalarValueDB {
	return &ScalarValueDB{tableName: t}
}

func (x *ScalarValueDBQueryBuilder) WithTable(t string) *ScalarValueDBQueryBuilder {
	return &ScalarValueDBQueryBuilder{tableName: t}
}

func (x *ScalarValueDBQueryBuilder) Unsafe() *ScalarValueDBQueryUnsafe {
	return &ScalarValueDBQueryUnsafe{tableName: x.tableName}
}

type ScalarValueTenantIdSafeOperators struct {
	prefix    string
	tableName string
}

func (x *ScalarValueTenantIdSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Eq(v)
}

func (x *ScalarValueTenantIdSafeOperators) Neq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Neq(v)
}

func (x *ScalarValueTenantIdSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Gt(v)
}

func (x *ScalarValueTenantIdSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Gte(v)
}

func (x *ScalarValueTenantIdSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Lt(v)
}

func (x *ScalarValueTenantIdSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Lte(v)
}

func (x *ScalarValueTenantIdSafeOperators) In(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").In(v)
}

func (x *ScalarValueTenantIdSafeOperators) NotIn(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").NotIn(v)
}

func (x *ScalarValueTenantIdSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").IsNull()
}

func (x *ScalarValueTenantIdSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").IsNotNull()
}

func (x *ScalarValueTenantIdSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Between(exp.NewRangeVal(start, end))
}

func (x *ScalarValueTenantIdSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").NotBetween(exp.NewRangeVal(start, end))
}

func (x *ScalarValueDBQueryBuilder) TenantId() *ScalarValueTenantIdSafeOperators {
	return &ScalarValueTenantIdSafeOperators{tableName: x.tableName, prefix: "pb$"}
}

type ScalarValuePKSKSafeOperators struct {
	prefix    string
	tableName string
}

func (x *ScalarValuePKSKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Eq(v)
}

func (x *ScalarValuePKSKSafeOperators) Neq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Neq(v)
}

func (x *ScalarValuePKSKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Gt(v)
}

func (x *ScalarValuePKSKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Gte(v)
}

func (x *ScalarValuePKSKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Lt(v)
}

func (x *ScalarValuePKSKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Lte(v)
}

func (x *ScalarValuePKSKSafeOperators) In(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").In(v)
}

func (x *ScalarValuePKSKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").NotIn(v)
}

func (x *ScalarValuePKSKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").IsNull()
}

func (x *ScalarValuePKSKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").IsNotNull()
}

func (x *ScalarValuePKSKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Between(exp.NewRangeVal(start, end))
}

func (x *ScalarValuePKSKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").NotBetween(exp.NewRangeVal(start, end))
}

func (x *ScalarValueDBQueryBuilder) PKSK() *ScalarValuePKSKSafeOperators {
	return &ScalarValuePKSKSafeOperators{tableName: x.tableName, prefix: "pb$"}
}

type ScalarValuePKSafeOperators struct {
	prefix    string
	tableName string
}

func (x *ScalarValuePKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Eq(v)
}

func (x *ScalarValuePKSafeOperators) Neq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Neq(v)
}

func (x *ScalarValuePKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Gt(v)
}

func (x *ScalarValuePKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Gte(v)
}

func (x *ScalarValuePKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Lt(v)
}

func (x *ScalarValuePKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Lte(v)
}

func (x *ScalarValuePKSafeOperators) In(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").In(v)
}

func (x *ScalarValuePKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").NotIn(v)
}

func (x *ScalarValuePKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").IsNull()
}

func (x *ScalarValuePKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").IsNotNull()
}

func (x *ScalarValuePKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Between(exp.NewRangeVal(start, end))
}

func (x *ScalarValuePKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").NotBetween(exp.NewRangeVal(start, end))
}

func (x *ScalarValueDBQueryBuilder) PK() *ScalarValuePKSafeOperators {
	return &ScalarValuePKSafeOperators{tableName: x.tableName, prefix: "pb$"}
}

type ScalarValueSKSafeOperators struct {
	prefix    string
	tableName string
}

func (x *ScalarValueSKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Eq(v)
}

func (x *ScalarValueSKSafeOperators) Neq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Neq(v)
}

func (x *ScalarValueSKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Gt(v)
}

func (x *ScalarValueSKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Gte(v)
}

func (x *ScalarValueSKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Lt(v)
}

func (x *ScalarValueSKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Lte(v)
}

func (x *ScalarValueSKSafeOperators) In(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").In(v)
}

func (x *ScalarValueSKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").NotIn(v)
}

func (x *ScalarValueSKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").IsNull()
}

func (x *ScalarValueSKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").IsNotNull()
}

func (x *ScalarValueSKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Between(exp.NewRangeVal(start, end))
}

func (x *ScalarValueSKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").NotBetween(exp.NewRangeVal(start, end))
}

func (x *ScalarValueDBQueryBuilder) SK() *ScalarValueSKSafeOperators {
	return &ScalarValueSKSafeOperators{tableName: x.tableName, prefix: "pb$"}
}

type ScalarValueFTSDataSafeOperators struct {
	prefix    string
	tableName string
}

func (x *ScalarValueFTSDataSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data").Eq(v)
}

func (x *ScalarValueFTSDataSafeOperators) ObjectContains(obj interface{}) (exp.Expression, error) {
	var err error
	var data []byte

	pm, ok := obj.(proto.Message)
	if ok {
		data, err = protojson.Marshal(pm)
	} else {
		data, err = json.Marshal(obj)
	}
	if err != nil {
		return nil, err
	}

	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data")
	return exp.NewLiteralExpression("(? @> ?::jsonb)", idExp, string(data)), nil
}

func (x *ScalarValueFTSDataSafeOperators) ObjectPathExists(path string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data")
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("@?"), path)
}

func (x *ScalarValueFTSDataSafeOperators) ObjectPath(path string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data")
	return exp.NewLiteralExpression("? @@ ?", idExp, path)
}

func (x *ScalarValueFTSDataSafeOperators) ObjectKeyExists(key string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data")
	return exp.NewLiteralExpression("? \\? ?", idExp, key)
}

func (x *ScalarValueFTSDataSafeOperators) ObjectAnyKeyExists(keys ...string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data")
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("?|"), xpq.StringArray(keys))
}

func (x *ScalarValueFTSDataSafeOperators) ObjectAllKeyExists(keys ...string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data")
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("?&"), xpq.StringArray(keys))
}

func (x *ScalarValueDBQueryBuilder) FTSData() *ScalarValueFTSDataSafeOperators {
	return &ScalarValueFTSDataSafeOperators{tableName: x.tableName, prefix: "pb$"}
}

func (x *ScalarValueDBQueryUnsafe) TenantId() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "tenant_id")
}

func (x *ScalarValueDBQueryUnsafe) PKSK() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "pksk")
}

func (x *ScalarValueDBQueryUnsafe) PK() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "pk")
}

func (x *ScalarValueDBQueryUnsafe) SK() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "sk")
}

func (x *ScalarValueDBQueryUnsafe) FTSData() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "fts_data")
}

func (x *ScalarValueDBQueryUnsafe) PBData() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "pb_data")
}

func (x *ScalarValueDBQueryUnsafe) Id() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "id")
}

func (x *ScalarValueDBQueryUnsafe) Double() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "double")
}

func (x *ScalarValueDBQueryUnsafe) Float() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "float")
}

func (x *ScalarValueDBQueryUnsafe) Int32() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "int_32")
}

func (x *ScalarValueDBQueryUnsafe) Int64() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "int_64")
}

func (x *ScalarValueDBQueryUnsafe) Uint32() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "uint_32")
}

func (x *ScalarValueDBQueryUnsafe) Uint64() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "uint_64")
}

func (x *ScalarValueDBQueryUnsafe) Sint32() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "sint_32")
}

func (x *ScalarValueDBQueryUnsafe) Sint64() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "sint_64")
}

func (x *ScalarValueDBQueryUnsafe) Fixed32() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "fixed_32")
}

func (x *ScalarValueDBQueryUnsafe) Fixed64() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "fixed_64")
}

func (x *ScalarValueDBQueryUnsafe) Sfixed32() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "sfixed_32")
}

func (x *ScalarValueDBQueryUnsafe) Sfixed64() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "sfixed_64")
}

func (x *ScalarValueDBQueryUnsafe) Bool() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "bool")
}

func (x *ScalarValueDBQueryUnsafe) String_() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "string")
}

func (x *ScalarValueDBQueryUnsafe) Bytes() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "bytes")
}

func (x *ScalarValueDBQueryUnsafe) RepeatedDouble() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_double")
}

func (x *ScalarValueDBQueryUnsafe) RepeatedFloat() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_float")
}

func (x *ScalarValueDBQueryUnsafe) RepeatedInt32() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_int32")
}

func (x *ScalarValueDBQueryUnsafe) RepeatedInt64() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_int64")
}

func (x *ScalarValueDBQueryUnsafe) RepeatedUint32() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_uint32")
}

func (x *ScalarValueDBQueryUnsafe) RepeatedUint64() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_uint64")
}

func (x *ScalarValueDBQueryUnsafe) RepeatedSint32() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_sint32")
}

func (x *ScalarValueDBQueryUnsafe) RepeatedSint64() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_sint64")
}

func (x *ScalarValueDBQueryUnsafe) RepeatedFixed32() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_fixed32")
}

func (x *ScalarValueDBQueryUnsafe) RepeatedFixed64() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_fixed64")
}

func (x *ScalarValueDBQueryUnsafe) RepeatedSfixed32() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_sfixed32")
}

func (x *ScalarValueDBQueryUnsafe) RepeatedSfixed64() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_sfixed64")
}

func (x *ScalarValueDBQueryUnsafe) RepeatedBool() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_bool")
}

func (x *ScalarValueDBQueryUnsafe) RepeatedString() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_string")
}

func (x *ScalarValueDBQueryUnsafe) RepeatedBytes() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_bytes")
}

func (x *ScalarValueDBQueryUnsafe) RepeatedEnum() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_enum")
}

func (x *ScalarValueDBQueryUnsafe) StringMap() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "string_map")
}

func (x *ScalarValueDBQueryUnsafe) CreatedAt() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "created_at")
}

func (x *ScalarValueDBQueryUnsafe) StrPtr() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "str_ptr")
}

func (x *ScalarValueDBQueryUnsafe) BoolPtr() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "bool_ptr")
}

func (x *ScalarValueDBColumns) WithTable(t string) *ScalarValueDBColumns {
	return &ScalarValueDBColumns{tableName: t}
}

func (x *ScalarValueDBColumns) TenantId() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "tenant_id")
}

func (x *ScalarValueDBColumns) PKSK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pksk")
}

func (x *ScalarValueDBColumns) PK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pk")
}

func (x *ScalarValueDBColumns) SK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "sk")
}

func (x *ScalarValueDBColumns) FTSData() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "fts_data")
}

func (x *ScalarValueDBColumns) PBData() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pb_data")
}

func (x *ScalarValueDBColumns) Id() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "id")
}

func (x *ScalarValueDBColumns) Double() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "double")
}

func (x *ScalarValueDBColumns) Float() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "float")
}

func (x *ScalarValueDBColumns) Int32() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "int_32")
}

func (x *ScalarValueDBColumns) Int64() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "int_64")
}

func (x *ScalarValueDBColumns) Uint32() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "uint_32")
}

func (x *ScalarValueDBColumns) Uint64() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "uint_64")
}

func (x *ScalarValueDBColumns) Sint32() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "sint_32")
}

func (x *ScalarValueDBColumns) Sint64() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "sint_64")
}

func (x *ScalarValueDBColumns) Fixed32() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "fixed_32")
}

func (x *ScalarValueDBColumns) Fixed64() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "fixed_64")
}

func (x *ScalarValueDBColumns) Sfixed32() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "sfixed_32")
}

func (x *ScalarValueDBColumns) Sfixed64() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "sfixed_64")
}

func (x *ScalarValueDBColumns) Bool() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "bool")
}

func (x *ScalarValueDBColumns) String_() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "string")
}

func (x *ScalarValueDBColumns) Bytes() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "bytes")
}

func (x *ScalarValueDBColumns) RepeatedDouble() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_double")
}

func (x *ScalarValueDBColumns) RepeatedFloat() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_float")
}

func (x *ScalarValueDBColumns) RepeatedInt32() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_int32")
}

func (x *ScalarValueDBColumns) RepeatedInt64() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_int64")
}

func (x *ScalarValueDBColumns) RepeatedUint32() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_uint32")
}

func (x *ScalarValueDBColumns) RepeatedUint64() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_uint64")
}

func (x *ScalarValueDBColumns) RepeatedSint32() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_sint32")
}

func (x *ScalarValueDBColumns) RepeatedSint64() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_sint64")
}

func (x *ScalarValueDBColumns) RepeatedFixed32() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_fixed32")
}

func (x *ScalarValueDBColumns) RepeatedFixed64() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_fixed64")
}

func (x *ScalarValueDBColumns) RepeatedSfixed32() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_sfixed32")
}

func (x *ScalarValueDBColumns) RepeatedSfixed64() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_sfixed64")
}

func (x *ScalarValueDBColumns) RepeatedBool() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_bool")
}

func (x *ScalarValueDBColumns) RepeatedString() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_string")
}

func (x *ScalarValueDBColumns) RepeatedBytes() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_bytes")
}

func (x *ScalarValueDBColumns) RepeatedEnum() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "repeated_enum")
}

func (x *ScalarValueDBColumns) StringMap() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "string_map")
}

func (x *ScalarValueDBColumns) CreatedAt() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "created_at")
}

func (x *ScalarValueDBColumns) StrPtr() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "str_ptr")
}

func (x *ScalarValueDBColumns) BoolPtr() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "bool_ptr")
}

type pgdbDescriptorEBook struct{}

var (
	instancepgdbDescriptorEBook pgdb_v1.Descriptor = &pgdbDescriptorEBook{}
)

func (d *pgdbDescriptorEBook) TableName() string {
	return "pb_e_book_models_animals_v1_a344683d"
}

func (d *pgdbDescriptorEBook) Fields(opts ...pgdb_v1.DescriptorFieldOptionFunc) []*pgdb_v1.Column {
	df := pgdb_v1.NewDescriptorFieldOption(opts)
	_ = df

	rv := make([]*pgdb_v1.Column, 0)

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("size"),
		Type:               "int8",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	return rv
}

func (d *pgdbDescriptorEBook) DataField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Name: "pb_data", Type: "bytea"}
}

func (d *pgdbDescriptorEBook) SearchField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Name: "fts_data", Type: "tsvector"}
}

func (d *pgdbDescriptorEBook) VersioningField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Name: "pb$", Type: "timestamptz"}
}

func (d *pgdbDescriptorEBook) IndexPrimaryKey(opts ...pgdb_v1.IndexOptionsFunc) *pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io

	return nil

}

func (d *pgdbDescriptorEBook) Indexes(opts ...pgdb_v1.IndexOptionsFunc) []*pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io
	rv := make([]*pgdb_v1.Index, 0)

	return rv
}

type pgdbMessageEBook struct {
	self *EBook
}

func (dbr *EBook) DBReflect() pgdb_v1.Message {
	return &pgdbMessageEBook{
		self: dbr,
	}
}

func (m *pgdbMessageEBook) Descriptor() pgdb_v1.Descriptor {
	return instancepgdbDescriptorEBook
}

func (m *pgdbMessageEBook) Record(opts ...pgdb_v1.RecordOptionsFunc) (exp.Record, error) {
	ro := pgdb_v1.NewRecordOptions(opts)
	_ = ro
	nullExp := exp.NewLiteralExpression("NULL")
	_ = nullExp

	rv := exp.Record{}

	v1 := int64(m.self.GetSize())

	if ro.Nulled {
		rv[ro.ColumnName("size")] = nullExp
	} else {
		rv[ro.ColumnName("size")] = v1
	}

	return rv, nil
}

func (m *pgdbMessageEBook) SearchData(opts ...pgdb_v1.RecordOptionsFunc) []*pgdb_v1.SearchContent {
	rv := []*pgdb_v1.SearchContent{}

	return rv
}

type EBookDB struct {
	tableName string
}

type EBookDBQueryBuilder struct {
	tableName string
}

type EBookDBQueryUnsafe struct {
	tableName string
}

type EBookDBColumns struct {
	tableName string
}

func (x *EBook) DB() *EBookDB {
	return &EBookDB{tableName: x.DBReflect().Descriptor().TableName()}
}

func (x *EBookDB) TableName() string {
	return x.tableName
}

func (x *EBookDB) Query() *EBookDBQueryBuilder {
	return &EBookDBQueryBuilder{tableName: x.tableName}
}

func (x *EBookDB) Columns() *EBookDBColumns {
	return &EBookDBColumns{tableName: x.tableName}
}

func (x *EBookDB) WithTable(t string) *EBookDB {
	return &EBookDB{tableName: t}
}

func (x *EBookDBQueryBuilder) WithTable(t string) *EBookDBQueryBuilder {
	return &EBookDBQueryBuilder{tableName: t}
}

func (x *EBookDBQueryBuilder) Unsafe() *EBookDBQueryUnsafe {
	return &EBookDBQueryUnsafe{tableName: x.tableName}
}

func (x *EBookDBQueryUnsafe) Size() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "size")
}

func (x *EBookDBColumns) WithTable(t string) *EBookDBColumns {
	return &EBookDBColumns{tableName: t}
}

func (x *EBookDBColumns) Size() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "size")
}

type pgdbDescriptorPaperBook struct{}

var (
	instancepgdbDescriptorPaperBook pgdb_v1.Descriptor = &pgdbDescriptorPaperBook{}
)

func (d *pgdbDescriptorPaperBook) TableName() string {
	return "pb_paper_book_models_animals_v1_ba82559d"
}

func (d *pgdbDescriptorPaperBook) Fields(opts ...pgdb_v1.DescriptorFieldOptionFunc) []*pgdb_v1.Column {
	df := pgdb_v1.NewDescriptorFieldOption(opts)
	_ = df

	rv := make([]*pgdb_v1.Column, 0)

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("pages"),
		Type:               "int4",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	return rv
}

func (d *pgdbDescriptorPaperBook) DataField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Name: "pb_data", Type: "bytea"}
}

func (d *pgdbDescriptorPaperBook) SearchField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Name: "fts_data", Type: "tsvector"}
}

func (d *pgdbDescriptorPaperBook) VersioningField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Name: "pb$", Type: "timestamptz"}
}

func (d *pgdbDescriptorPaperBook) IndexPrimaryKey(opts ...pgdb_v1.IndexOptionsFunc) *pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io

	return nil

}

func (d *pgdbDescriptorPaperBook) Indexes(opts ...pgdb_v1.IndexOptionsFunc) []*pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io
	rv := make([]*pgdb_v1.Index, 0)

	return rv
}

type pgdbMessagePaperBook struct {
	self *PaperBook
}

func (dbr *PaperBook) DBReflect() pgdb_v1.Message {
	return &pgdbMessagePaperBook{
		self: dbr,
	}
}

func (m *pgdbMessagePaperBook) Descriptor() pgdb_v1.Descriptor {
	return instancepgdbDescriptorPaperBook
}

func (m *pgdbMessagePaperBook) Record(opts ...pgdb_v1.RecordOptionsFunc) (exp.Record, error) {
	ro := pgdb_v1.NewRecordOptions(opts)
	_ = ro
	nullExp := exp.NewLiteralExpression("NULL")
	_ = nullExp

	rv := exp.Record{}

	v1 := int32(m.self.GetPages())

	if ro.Nulled {
		rv[ro.ColumnName("pages")] = nullExp
	} else {
		rv[ro.ColumnName("pages")] = v1
	}

	return rv, nil
}

func (m *pgdbMessagePaperBook) SearchData(opts ...pgdb_v1.RecordOptionsFunc) []*pgdb_v1.SearchContent {
	rv := []*pgdb_v1.SearchContent{}

	return rv
}

type PaperBookDB struct {
	tableName string
}

type PaperBookDBQueryBuilder struct {
	tableName string
}

type PaperBookDBQueryUnsafe struct {
	tableName string
}

type PaperBookDBColumns struct {
	tableName string
}

func (x *PaperBook) DB() *PaperBookDB {
	return &PaperBookDB{tableName: x.DBReflect().Descriptor().TableName()}
}

func (x *PaperBookDB) TableName() string {
	return x.tableName
}

func (x *PaperBookDB) Query() *PaperBookDBQueryBuilder {
	return &PaperBookDBQueryBuilder{tableName: x.tableName}
}

func (x *PaperBookDB) Columns() *PaperBookDBColumns {
	return &PaperBookDBColumns{tableName: x.tableName}
}

func (x *PaperBookDB) WithTable(t string) *PaperBookDB {
	return &PaperBookDB{tableName: t}
}

func (x *PaperBookDBQueryBuilder) WithTable(t string) *PaperBookDBQueryBuilder {
	return &PaperBookDBQueryBuilder{tableName: t}
}

func (x *PaperBookDBQueryBuilder) Unsafe() *PaperBookDBQueryUnsafe {
	return &PaperBookDBQueryUnsafe{tableName: x.tableName}
}

func (x *PaperBookDBQueryUnsafe) Pages() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "pages")
}

func (x *PaperBookDBColumns) WithTable(t string) *PaperBookDBColumns {
	return &PaperBookDBColumns{tableName: t}
}

func (x *PaperBookDBColumns) Pages() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pages")
}

type pgdbDescriptorBook struct{}

var (
	instancepgdbDescriptorBook pgdb_v1.Descriptor = &pgdbDescriptorBook{}
)

func (d *pgdbDescriptorBook) TableName() string {
	return "pb_book_models_animals_v1_d871ffce"
}

func (d *pgdbDescriptorBook) Fields(opts ...pgdb_v1.DescriptorFieldOptionFunc) []*pgdb_v1.Column {
	df := pgdb_v1.NewDescriptorFieldOption(opts)
	_ = df

	rv := make([]*pgdb_v1.Column, 0)

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("tenant_id"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: "",
		})

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pksk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: "varchar GENERATED ALWAYS AS (pb$pk || '|' || pb$sk) STORED",
		})

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: "",
		})

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("sk"),
			Type:               "varchar",
			Nullable:           df.Nullable(false),
			OverrideExpression: "",
		})

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("fts_data"),
			Type:               "tsvector",
			Nullable:           df.Nullable(true),
			OverrideExpression: "",
		})

	}

	if !df.IsNested {

		rv = append(rv, &pgdb_v1.Column{
			Name:               df.ColumnName("pb_data"),
			Type:               "bytea",
			Nullable:           df.Nullable(false),
			OverrideExpression: "",
		})

	}

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("id"),
		Type:               "text",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("created_at"),
		Type:               "timestamptz",
		Nullable:           df.Nullable(true),
		OverrideExpression: "",
	})

	rv = append(rv, &pgdb_v1.Column{
		Name:               df.ColumnName("medium_oneof"),
		Type:               "int4",
		Nullable:           df.Nullable(false),
		OverrideExpression: "",
	})

	rv = append(rv, ((*PaperBook)(nil)).DBReflect().Descriptor().Fields(df.Nested("50$")...)...)

	rv = append(rv, ((*EBook)(nil)).DBReflect().Descriptor().Fields(df.Nested("51$")...)...)

	return rv
}

func (d *pgdbDescriptorBook) DataField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Name: "pb_data", Type: "bytea"}
}

func (d *pgdbDescriptorBook) SearchField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Name: "fts_data", Type: "tsvector"}
}

func (d *pgdbDescriptorBook) VersioningField() *pgdb_v1.Column {
	return &pgdb_v1.Column{Name: "pb$created_at", Type: "timestamptz"}
}

func (d *pgdbDescriptorBook) IndexPrimaryKey(opts ...pgdb_v1.IndexOptionsFunc) *pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io

	return &pgdb_v1.Index{
		Name:               io.IndexName("pksk_book_models_animals_v1_a25b591a"),
		Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
		IsPrimary:          true,
		IsUnique:           true,
		IsDropped:          false,
		Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pksk")},
		OverrideExpression: "",
	}

}

func (d *pgdbDescriptorBook) Indexes(opts ...pgdb_v1.IndexOptionsFunc) []*pgdb_v1.Index {
	io := pgdb_v1.NewIndexOptions(opts)
	_ = io
	rv := make([]*pgdb_v1.Index, 0)

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("pksk_book_models_animals_v1_a25b591a"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
			IsPrimary:          true,
			IsUnique:           true,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pksk")},
			OverrideExpression: "",
		})

	}

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("pksk_book_models_animals_v1_a25b591a"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE,
			IsPrimary:          false,
			IsUnique:           true,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("pk"), io.ColumnName("sk")},
			OverrideExpression: "",
		})

	}

	if !io.IsNested {

		rv = append(rv, &pgdb_v1.Index{
			Name:               io.IndexName("fts_data_book_models_animals_v1_6cf7b95a"),
			Method:             pgdb_v1.MessageOptions_Index_INDEX_METHOD_BTREE_GIN,
			IsPrimary:          false,
			IsUnique:           false,
			IsDropped:          false,
			Columns:            []string{io.ColumnName("tenant_id"), io.ColumnName("fts_data")},
			OverrideExpression: "",
		})

	}

	rv = append(rv, ((*PaperBook)(nil)).DBReflect().Descriptor().Indexes(io.Nested("50$")...)...)

	rv = append(rv, ((*EBook)(nil)).DBReflect().Descriptor().Indexes(io.Nested("51$")...)...)

	return rv
}

type pgdbMessageBook struct {
	self *Book
}

func (dbr *Book) DBReflect() pgdb_v1.Message {
	return &pgdbMessageBook{
		self: dbr,
	}
}

func (m *pgdbMessageBook) Descriptor() pgdb_v1.Descriptor {
	return instancepgdbDescriptorBook
}

func (m *pgdbMessageBook) Record(opts ...pgdb_v1.RecordOptionsFunc) (exp.Record, error) {
	ro := pgdb_v1.NewRecordOptions(opts)
	_ = ro
	nullExp := exp.NewLiteralExpression("NULL")
	_ = nullExp

	var sb strings.Builder

	rv := exp.Record{}

	if !ro.IsNested {

		cfv0 := string(m.self.TenantId)

		if ro.Nulled {
			rv[ro.ColumnName("tenant_id")] = nullExp
		} else {
			rv[ro.ColumnName("tenant_id")] = cfv0
		}

	}

	if !ro.IsNested {

	}

	if !ro.IsNested {

		sb.Reset()

		_, _ = sb.WriteString("models_animals_v1_book")

		_, _ = sb.WriteString(":")

		_, _ = sb.WriteString(m.self.TenantId)

		_, _ = sb.WriteString(":")

		_, _ = sb.WriteString(m.self.Id)

		cfv2 := sb.String()

		if ro.Nulled {
			rv[ro.ColumnName("pk")] = nullExp
		} else {
			rv[ro.ColumnName("pk")] = cfv2
		}

	}

	if !ro.IsNested {

		sb.Reset()

		_, _ = sb.WriteString("example")

		cfv3 := sb.String()

		if ro.Nulled {
			rv[ro.ColumnName("sk")] = nullExp
		} else {
			rv[ro.ColumnName("sk")] = cfv3
		}

	}

	if !ro.IsNested {

		cfv4tmp := []*pgdb_v1.SearchContent{

			{
				Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_EXACT,
				Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_UNSPECIFIED,
				Value:  m.self.GetId(),
			},
		}

		cfv4tmp = append(cfv4tmp, m.self.GetPaper().DBReflect().SearchData()...)

		cfv4tmp = append(cfv4tmp, m.self.GetEbook().DBReflect().SearchData()...)

		cfv4 := pgdb_v1.FullTextSearchVectors(cfv4tmp)

		if ro.Nulled {
			rv[ro.ColumnName("fts_data")] = nullExp
		} else {
			rv[ro.ColumnName("fts_data")] = cfv4
		}

	}

	if !ro.IsNested {

		cfv5, err := proto.Marshal(m.self)
		if err != nil {
			return nil, err
		}

		if ro.Nulled {
			rv[ro.ColumnName("pb_data")] = nullExp
		} else {
			rv[ro.ColumnName("pb_data")] = cfv5
		}

	}

	v1 := string(m.self.GetId())

	if ro.Nulled {
		rv[ro.ColumnName("id")] = nullExp
	} else {
		rv[ro.ColumnName("id")] = v1
	}

	var v2 *time.Time
	if m.self.GetCreatedAt().IsValid() {
		v2tmp := m.self.GetCreatedAt().AsTime()
		v2 = &v2tmp
	}

	if ro.Nulled {
		rv[ro.ColumnName("created_at")] = nullExp
	} else {
		rv[ro.ColumnName("created_at")] = v2
	}

	v3tmp := m.self.GetPaper()
	v3opts := ro.Nested("50$")
	if v3tmp == nil {
		v3opts = append(v3opts, pgdb_v1.RecordOptionNulled(true))
	}

	v3, err := pgdb_v1.MarshalNestedRecord(v3tmp, v3opts...)
	if err != nil {
		return nil, err
	}

	for k, v := range v3 {
		if ro.Nulled {
			rv[k] = nullExp
		} else {
			rv[k] = v
		}
	}

	v4tmp := m.self.GetEbook()
	v4opts := ro.Nested("51$")
	if v4tmp == nil {
		v4opts = append(v4opts, pgdb_v1.RecordOptionNulled(true))
	}

	v4, err := pgdb_v1.MarshalNestedRecord(v4tmp, v4opts...)
	if err != nil {
		return nil, err
	}

	for k, v := range v4 {
		if ro.Nulled {
			rv[k] = nullExp
		} else {
			rv[k] = v
		}
	}

	oneof1 := uint32(0)

	switch m.self.GetMedium().(type) {

	case *Book_Paper:
		oneof1 = 50

	case *Book_Ebook:
		oneof1 = 51

	}

	if ro.Nulled {
		rv[ro.ColumnName("medium_oneof")] = nullExp
	} else {
		rv[ro.ColumnName("medium_oneof")] = oneof1
	}

	return rv, nil
}

func (m *pgdbMessageBook) SearchData(opts ...pgdb_v1.RecordOptionsFunc) []*pgdb_v1.SearchContent {
	rv := []*pgdb_v1.SearchContent{

		{
			Type:   pgdb_v1.FieldOptions_FULL_TEXT_TYPE_EXACT,
			Weight: pgdb_v1.FieldOptions_FULL_TEXT_WEIGHT_UNSPECIFIED,
			Value:  m.self.GetId(),
		},
	}

	rv = append(rv, m.self.GetPaper().DBReflect().SearchData()...)

	rv = append(rv, m.self.GetEbook().DBReflect().SearchData()...)

	return rv
}

type BookDB struct {
	tableName string
}

type BookDBQueryBuilder struct {
	tableName string
}

type BookDBQueryUnsafe struct {
	tableName string
}

type BookDBColumns struct {
	tableName string
}

func (x *Book) DB() *BookDB {
	return &BookDB{tableName: x.DBReflect().Descriptor().TableName()}
}

func (x *BookDB) TableName() string {
	return x.tableName
}

func (x *BookDB) Query() *BookDBQueryBuilder {
	return &BookDBQueryBuilder{tableName: x.tableName}
}

func (x *BookDB) Columns() *BookDBColumns {
	return &BookDBColumns{tableName: x.tableName}
}

func (x *BookDB) WithTable(t string) *BookDB {
	return &BookDB{tableName: t}
}

func (x *BookDBQueryBuilder) WithTable(t string) *BookDBQueryBuilder {
	return &BookDBQueryBuilder{tableName: t}
}

func (x *BookDBQueryBuilder) Unsafe() *BookDBQueryUnsafe {
	return &BookDBQueryUnsafe{tableName: x.tableName}
}

type BookTenantIdSafeOperators struct {
	prefix    string
	tableName string
}

func (x *BookTenantIdSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Eq(v)
}

func (x *BookTenantIdSafeOperators) Neq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Neq(v)
}

func (x *BookTenantIdSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Gt(v)
}

func (x *BookTenantIdSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Gte(v)
}

func (x *BookTenantIdSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Lt(v)
}

func (x *BookTenantIdSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Lte(v)
}

func (x *BookTenantIdSafeOperators) In(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").In(v)
}

func (x *BookTenantIdSafeOperators) NotIn(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").NotIn(v)
}

func (x *BookTenantIdSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").IsNull()
}

func (x *BookTenantIdSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").IsNotNull()
}

func (x *BookTenantIdSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").Between(exp.NewRangeVal(start, end))
}

func (x *BookTenantIdSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"tenant_id").NotBetween(exp.NewRangeVal(start, end))
}

func (x *BookDBQueryBuilder) TenantId() *BookTenantIdSafeOperators {
	return &BookTenantIdSafeOperators{tableName: x.tableName, prefix: "pb$"}
}

type BookPKSKSafeOperators struct {
	prefix    string
	tableName string
}

func (x *BookPKSKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Eq(v)
}

func (x *BookPKSKSafeOperators) Neq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Neq(v)
}

func (x *BookPKSKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Gt(v)
}

func (x *BookPKSKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Gte(v)
}

func (x *BookPKSKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Lt(v)
}

func (x *BookPKSKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Lte(v)
}

func (x *BookPKSKSafeOperators) In(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").In(v)
}

func (x *BookPKSKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").NotIn(v)
}

func (x *BookPKSKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").IsNull()
}

func (x *BookPKSKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").IsNotNull()
}

func (x *BookPKSKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").Between(exp.NewRangeVal(start, end))
}

func (x *BookPKSKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pksk").NotBetween(exp.NewRangeVal(start, end))
}

func (x *BookDBQueryBuilder) PKSK() *BookPKSKSafeOperators {
	return &BookPKSKSafeOperators{tableName: x.tableName, prefix: "pb$"}
}

type BookPKSafeOperators struct {
	prefix    string
	tableName string
}

func (x *BookPKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Eq(v)
}

func (x *BookPKSafeOperators) Neq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Neq(v)
}

func (x *BookPKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Gt(v)
}

func (x *BookPKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Gte(v)
}

func (x *BookPKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Lt(v)
}

func (x *BookPKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Lte(v)
}

func (x *BookPKSafeOperators) In(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").In(v)
}

func (x *BookPKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").NotIn(v)
}

func (x *BookPKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").IsNull()
}

func (x *BookPKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").IsNotNull()
}

func (x *BookPKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").Between(exp.NewRangeVal(start, end))
}

func (x *BookPKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"pk").NotBetween(exp.NewRangeVal(start, end))
}

func (x *BookDBQueryBuilder) PK() *BookPKSafeOperators {
	return &BookPKSafeOperators{tableName: x.tableName, prefix: "pb$"}
}

type BookSKSafeOperators struct {
	prefix    string
	tableName string
}

func (x *BookSKSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Eq(v)
}

func (x *BookSKSafeOperators) Neq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Neq(v)
}

func (x *BookSKSafeOperators) Gt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Gt(v)
}

func (x *BookSKSafeOperators) Gte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Gte(v)
}

func (x *BookSKSafeOperators) Lt(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Lt(v)
}

func (x *BookSKSafeOperators) Lte(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Lte(v)
}

func (x *BookSKSafeOperators) In(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").In(v)
}

func (x *BookSKSafeOperators) NotIn(v []string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").NotIn(v)
}

func (x *BookSKSafeOperators) IsNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").IsNull()
}

func (x *BookSKSafeOperators) IsNotNull() exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").IsNotNull()
}

func (x *BookSKSafeOperators) Between(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").Between(exp.NewRangeVal(start, end))
}

func (x *BookSKSafeOperators) NotBetween(start string, end string) exp.RangeExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"sk").NotBetween(exp.NewRangeVal(start, end))
}

func (x *BookDBQueryBuilder) SK() *BookSKSafeOperators {
	return &BookSKSafeOperators{tableName: x.tableName, prefix: "pb$"}
}

type BookFTSDataSafeOperators struct {
	prefix    string
	tableName string
}

func (x *BookFTSDataSafeOperators) Eq(v string) exp.BooleanExpression {
	return exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data").Eq(v)
}

func (x *BookFTSDataSafeOperators) ObjectContains(obj interface{}) (exp.Expression, error) {
	var err error
	var data []byte

	pm, ok := obj.(proto.Message)
	if ok {
		data, err = protojson.Marshal(pm)
	} else {
		data, err = json.Marshal(obj)
	}
	if err != nil {
		return nil, err
	}

	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data")
	return exp.NewLiteralExpression("(? @> ?::jsonb)", idExp, string(data)), nil
}

func (x *BookFTSDataSafeOperators) ObjectPathExists(path string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data")
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("@?"), path)
}

func (x *BookFTSDataSafeOperators) ObjectPath(path string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data")
	return exp.NewLiteralExpression("? @@ ?", idExp, path)
}

func (x *BookFTSDataSafeOperators) ObjectKeyExists(key string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data")
	return exp.NewLiteralExpression("? \\? ?", idExp, key)
}

func (x *BookFTSDataSafeOperators) ObjectAnyKeyExists(keys ...string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data")
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("?|"), xpq.StringArray(keys))
}

func (x *BookFTSDataSafeOperators) ObjectAllKeyExists(keys ...string) exp.Expression {
	idExp := exp.NewIdentifierExpression("", x.tableName, x.prefix+"fts_data")
	return exp.NewLiteralExpression("(? ? ?)", idExp, exp.NewLiteralExpression("?&"), xpq.StringArray(keys))
}

func (x *BookDBQueryBuilder) FTSData() *BookFTSDataSafeOperators {
	return &BookFTSDataSafeOperators{tableName: x.tableName, prefix: "pb$"}
}

func (x *BookDBQueryUnsafe) TenantId() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "tenant_id")
}

func (x *BookDBQueryUnsafe) PKSK() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "pksk")
}

func (x *BookDBQueryUnsafe) PK() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "pk")
}

func (x *BookDBQueryUnsafe) SK() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "sk")
}

func (x *BookDBQueryUnsafe) FTSData() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "fts_data")
}

func (x *BookDBQueryUnsafe) PBData() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "pb_data")
}

func (x *BookDBQueryUnsafe) Id() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "id")
}

func (x *BookDBQueryUnsafe) CreatedAt() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "created_at")
}

func (x *BookDBQueryUnsafe) Medium() exp.IdentifierExpression {
	return exp.NewIdentifierExpression("", x.tableName, "medium_oneof")
}

func (x *BookDBColumns) WithTable(t string) *BookDBColumns {
	return &BookDBColumns{tableName: t}
}

func (x *BookDBColumns) TenantId() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "tenant_id")
}

func (x *BookDBColumns) PKSK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pksk")
}

func (x *BookDBColumns) PK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pk")
}

func (x *BookDBColumns) SK() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "sk")
}

func (x *BookDBColumns) FTSData() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "fts_data")
}

func (x *BookDBColumns) PBData() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "pb_data")
}

func (x *BookDBColumns) Id() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "id")
}

func (x *BookDBColumns) CreatedAt() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "created_at")
}

func (x *BookDBColumns) Medium() exp.Expression {
	return exp.NewIdentifierExpression("", x.tableName, "medium_oneof")
}
