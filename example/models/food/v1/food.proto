syntax = "proto3";

package models.food.v1;

import "dynamo/v1/dynamo.proto";
import "google/protobuf/timestamp.proto";
import "models/llm/v1/models.proto";
import "pgdb/v1/pgdb.proto";

option go_package = "github.com/ductone/protoc-gen-pgdb/example/models/food/v1";

message Pasta {
  option (pgdb.v1.msg).partitioned = true;
  option (dynamo.v1.msg).key = {
    pk_fields: [
      "tenant_id",
      "id"
    ]
    sk_const: "example"
  };
  string tenant_id = 1;
  string id = 2 [(pgdb.v1.options) = {full_text_type: FULL_TEXT_TYPE_EXACT}];
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;
  google.protobuf.Timestamp deleted_at = 5;
}

message PastaIngredient {
  option (pgdb.v1.msg).partitioned = true;
  option (dynamo.v1.msg).key = {
    pk_fields: [
      "tenant_id",
      "pasta_id",
      "ingredient_id",
      "id"
    ]
    sk_const: "exampleingredient"
  };

  option (pgdb.v1.msg).indexes = {
    name: "pastas"
    method: INDEX_METHOD_BTREE
    columns: [
      "tenant_id",
      "pasta_id",
      "id"
    ]
  };
  option (pgdb.v1.msg).indexes = {
    name: "ingredients"
    method: INDEX_METHOD_BTREE
    columns: [
      "tenant_id",
      "ingredient_id",
      "id"
    ]
  };
  option (pgdb.v1.msg).indexes = {
    name: "everythingggg"
    method: INDEX_METHOD_BTREE
    columns: [
      "ingredient_id",
      "pasta_id",
      "id"
    ]
  };
  option (pgdb.v1.msg).indexes = {
    name: "everythingggg_alive_only"
    method: INDEX_METHOD_BTREE
    columns: [
      "ingredient_id",
      "pasta_id",
      "id"
    ]
    partial_deleted_at_is_null: true
  };
  option (pgdb.v1.msg).stats = {
    name: "tenant_id_ingredient_id"
    columns: [
      "tenant_id",
      "ingredient_id"
    ]
  };
  string tenant_id = 1;
  string ingredient_id = 2;
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;
  google.protobuf.Timestamp deleted_at = 5;
  string pasta_id = 6 [(pgdb.v1.options) = {full_text_type: FULL_TEXT_TYPE_EXACT}];
  string id = 7 [(pgdb.v1.options) = {full_text_type: FULL_TEXT_TYPE_EXACT}];

  message ModelEmbedding {
    option (pgdb.v1.msg).nested_only = true;
    models.llm.v1.Model model = 1;
    repeated float embedding = 2;
  }

  // We want to verify
  // 1. Type is repeated
  // 2. Type is a nested message
  // 3. Message type has 2 fields, enum type and repeated float type
  repeated ModelEmbedding model_embeddings = 8 [(pgdb.v1.options) = {message_behavior: MESSAGE_BEHAVIOR_VECTOR}];
}

message SauceIngredient {
  option (dynamo.v1.msg).key = {
    pk_fields: [
      "tenant_id",
      "id"
    ]
    sk_const: "examplesauce"
  };
  option (pgdb.v1.msg).indexes = {
    name: "source_addr_index"
    method: INDEX_METHOD_BTREE
    columns: [
      "tenant_id",
      "source_addr"
    ]
  };
  string tenant_id = 1;
  string id = 2 [(pgdb.v1.options) = {full_text_type: FULL_TEXT_TYPE_EXACT}];
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;
  google.protobuf.Timestamp deleted_at = 5;
  string source_addr = 6 [(pgdb.v1.options) = {message_behavior: MESSAGE_BEHAVIOR_INET_ADDR}];
}

message GarlicIngredient {
  option (pgdb.v1.msg) = {
    partitioned_by_created_at: true
    partitioned_by_date_range: PARTITIONED_BY_DATE_RANGE_MONTH
  };
  option (dynamo.v1.msg).key = {
    pk_fields: [
      "tenant_id",
      "id"
    ]
    sk_const: "examplecheese"
  };
  option (pgdb.v1.msg).indexes = {
    name: "source_addr_index"
    method: INDEX_METHOD_BTREE
    columns: [
      "tenant_id",
      "source_addr"
    ]
  };
  string tenant_id = 1;
  string id = 2 [(pgdb.v1.options) = {full_text_type: FULL_TEXT_TYPE_EXACT}];
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;
  google.protobuf.Timestamp deleted_at = 5;
  string source_addr = 6 [(pgdb.v1.options) = {message_behavior: MESSAGE_BEHAVIOR_INET_ADDR}];
}

message CheeseIngredient {
  option (pgdb.v1.msg) = {
    partitioned_by_ksuid_field_name: "event_id"
    partitioned_by_date_range: PARTITIONED_BY_DATE_RANGE_MONTH
  };
  option (pgdb.v1.msg).use_pkskv2_column = true;
  option (dynamo.v1.msg).key = {
    pk_fields: [
      "tenant_id",
      "id"
    ]
    sk_const: "examplecheese"
  };
  option (pgdb.v1.msg).indexes = {
    name: "source_addr_index"
    method: INDEX_METHOD_BTREE
    columns: [
      "tenant_id",
      "source_addr"
    ]
  };
  string tenant_id = 1;
  string id = 2 [(pgdb.v1.options) = {full_text_type: FULL_TEXT_TYPE_EXACT}];
  string event_id = 3;  // KSUID field for partitioning
  google.protobuf.Timestamp updated_at = 4;
  google.protobuf.Timestamp deleted_at = 5;
  string source_addr = 6 [(pgdb.v1.options) = {message_behavior: MESSAGE_BEHAVIOR_INET_ADDR}];
}
